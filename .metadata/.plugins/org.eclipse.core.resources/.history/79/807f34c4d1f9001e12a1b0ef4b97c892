/**
  ******************************************************************************
  * File Name          : app_mems.c
  * Description        : This file provides code for the configuration
  *                      of the STMicroelectronics.X-CUBE-MEMS1.10.0.0 instances.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "app_mems.h"
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include "iks01a3_motion_sensors.h"
#include "iks01a3_env_sensors.h"
#include "stm32l4xx_nucleo.h"
#include "math.h"

/* Private typedef -----------------------------------------------------------*/
typedef struct displayFloatToInt_s {
  int8_t sign; /* 0 means positive, 1 means negative*/
  uint32_t  out_int;
  uint32_t  out_dec;
} displayFloatToInt_t;

typedef struct{
	int8_t acc_x,acc_y, acc_z;
	int16_t temp,hum;
	uint32_t press;
}DataSend;
/* Private define ------------------------------------------------------------*/
#define MAX_BUF_SIZE 256

/* Private variables ---------------------------------------------------------*/
static volatile uint8_t PushButtonDetected = 0;
//static uint8_t verbose = 1;  /* Verbose output to UART terminal ON/OFF. */
static IKS01A3_MOTION_SENSOR_Capabilities_t MotionCapabilities[IKS01A3_MOTION_INSTANCES_NBR];
static IKS01A3_ENV_SENSOR_Capabilities_t EnvCapabilities[IKS01A3_ENV_INSTANCES_NBR];
static char dataOut[MAX_BUF_SIZE];
static char dataSend[MAX_BUF_SIZE];
static int32_t PushButtonState = GPIO_PIN_RESET;
extern UART_HandleTypeDef huart1;
/* Private function prototypes -----------------------------------------------*/
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec);
static void Accelero_Sensor_Handler(uint32_t Instance);
static void Gyro_Sensor_Handler(uint32_t Instance);
static void Magneto_Sensor_Handler(uint32_t Instance);
static void Temp_Sensor_Handler(uint32_t Instance);
static void Hum_Sensor_Handler(uint32_t Instance);
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);
static void MX_IKS01A3_DataLogTerminal_Init_G21(void);
static void MX_IKS01A3_DataLogTerminal_Process_G21();
static void Accelero_Sensor_Handler_LSM6DSO_G21(DataSend *Data_Packet);
static void Temp_Sensor_Handler_HTS221_G21(DataSend *Data_Packet);
static void Press_Sensor_Handler_LPS22HH_G21(DataSend *Data_Packet);
static void Hum_Sensor_Handler_HTS221_G21(DataSend *Data_Packet);
static void LoraE5_Send(UART_HandleTypeDef *lora_uart, char *DataToSend);

void MX_MEMS_Init(void)
{
  /* USER CODE BEGIN SV */

  /* USER CODE END SV */

  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
	MX_IKS01A3_DataLogTerminal_Init_G21();

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

	MX_IKS01A3_DataLogTerminal_Process_G21();

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}

/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
  //displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);

  //IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);


  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);

  //IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
    printf("%s", dataOut);
    /*floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
             (int)out_value_odr.out_dec);
    printf("%s", dataOut);
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
             (int)out_value_odr.out_dec);
    printf("%s", dataOut);
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
    printf("%s", dataOut);*/
  }
}


/**
  * @brief  Initialize the DataLogTerminal application (modified by our group G21)
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init_G21(void)
{
	//displayFloatToInt_t out_value_odr;


	  /* Initialize LED */
	  BSP_LED_Init(LED2);

	  /* Initialize button */
	  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);

	  /* Check what is the Push Button State when the button is not pressed. It can change across families */
	  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;

	  /* Initialize Virtual COM Port */
	  BSP_COM_Init(COM1);

	  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);

	  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);

	    IKS01A3_MOTION_SENSOR_GetCapabilities(IKS01A3_LSM6DSO_0, &MotionCapabilities[IKS01A3_LSM6DSO_0]);
	    snprintf(dataOut, MAX_BUF_SIZE,
	             "\r\nMotion Sensor  LSM6DSO capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
				  MotionCapabilities[IKS01A3_LSM6DSO_0].Acc, MotionCapabilities[IKS01A3_LSM6DSO_0].Gyro, MotionCapabilities[IKS01A3_LSM6DSO_0].Magneto, MotionCapabilities[IKS01A3_LSM6DSO_0].LowPower);
	    printf("%s", dataOut);

	    IKS01A3_MOTION_SENSOR_GetCapabilities(IKS01A3_LIS2MDL_0, &MotionCapabilities[IKS01A3_LIS2MDL_0]);
		snprintf(dataOut, MAX_BUF_SIZE,
				 "\r\nMotion Sensor  LIS2MDL capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
				  MotionCapabilities[IKS01A3_LIS2MDL_0].Acc, MotionCapabilities[IKS01A3_LIS2MDL_0].Gyro, MotionCapabilities[IKS01A3_LIS2MDL_0].Magneto, MotionCapabilities[IKS01A3_LIS2MDL_0].LowPower);
		printf("%s", dataOut);

	  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);

	  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);


		IKS01A3_ENV_SENSOR_GetCapabilities(IKS01A3_HTS221_0, &EnvCapabilities[IKS01A3_HTS221_0]);
		snprintf(dataOut, MAX_BUF_SIZE,
				 "\r\nEnvironmental Sensor HTS221 capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
				 EnvCapabilities[IKS01A3_HTS221_0].Temperature, EnvCapabilities[IKS01A3_HTS221_0].Pressure, EnvCapabilities[IKS01A3_HTS221_0].Humidity, EnvCapabilities[IKS01A3_HTS221_0].LowPower);
		printf("%s", dataOut);

		IKS01A3_ENV_SENSOR_GetCapabilities(IKS01A3_LPS22HH_0, &EnvCapabilities[IKS01A3_LPS22HH_0]);
		snprintf(dataOut, MAX_BUF_SIZE,
				 "\r\nEnvironmental Sensor LPS22HH capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
				 EnvCapabilities[IKS01A3_LPS22HH_0].Temperature, EnvCapabilities[IKS01A3_LPS22HH_0].Pressure, EnvCapabilities[IKS01A3_LPS22HH_0].Humidity, EnvCapabilities[IKS01A3_LPS22HH_0].LowPower);
		printf("%s", dataOut);



}


/**
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  PushButtonDetected = 1;
}

/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process(void)
{
  int i;

  if (PushButtonDetected != 0U)
  {
    /* Debouncing */
    HAL_Delay(50);

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));

    /* Debouncing */
    HAL_Delay(50);

    /* Reset Interrupt flag */
    PushButtonDetected = 0;

    /* Do nothing */
  }



  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
  {
    if(MotionCapabilities[i].Acc)
    {
      Accelero_Sensor_Handler(i);
    }
    if(MotionCapabilities[i].Gyro)
    {
      Gyro_Sensor_Handler(i);
    }
    if(MotionCapabilities[i].Magneto)
    {
      Magneto_Sensor_Handler(i);
    }
  }

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
  {
    if(EnvCapabilities[i].Humidity)
    {
      Hum_Sensor_Handler(i);
    }
    if(EnvCapabilities[i].Temperature)
    {
      Temp_Sensor_Handler(i);
    }
    if(EnvCapabilities[i].Pressure)
    {
      Press_Sensor_Handler(i);
    }
  }

  HAL_Delay( 5000 );
}

/**
  * @brief  Process of the DataLogTerminal application modified by G21
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process_G21(void)
{
	DataSend Packet;
  if (PushButtonDetected != 0U)
  {
    /* Debouncing */
    HAL_Delay(50);

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));

    /* Debouncing */
    HAL_Delay(50);

    /* Reset Interrupt flag */
    PushButtonDetected = 0;

    /* Do nothing */
  }

  Accelero_Sensor_Handler_LSM6DSO_G21(&Packet);
  Temp_Sensor_Handler_HTS221_G21(&Packet);
  Hum_Sensor_Handler_HTS221_G21(&Packet);
  Press_Sensor_Handler_LPS22HH_G21(&Packet);
  snprintf(dataSend, MAX_BUF_SIZE, "\"%d%d,%d%d,%d%d,%d%d,%d,%ld\"\n",((Packet.acc_x >= 0) ? 2 : 3 ),abs(Packet.acc_x),((Packet.acc_y >= 0) ? 2 : 3 ),abs(Packet.acc_y),((Packet.acc_z >= 0) ? 2 : 3 ),abs(Packet.acc_z),
		  ((Packet.temp > 0) ? 2 : 3 ),abs(Packet.temp),Packet.hum,Packet.press);
  LoraE5_Send(&huart1, dataSend);
  HAL_Delay( 1000 );
}

/**
  * @brief  Splits a float into two integer values.
  * @param  in the float value as input
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
  if(in >= 0.0f)
  {
    out_value->sign = 0;
  }else
  {
    out_value->sign = 1;
    in = -in;
  }

  in = in + (0.5f / pow(10, dec_prec));
  out_value->out_int = (int32_t)in;
  in = in - (float)(out_value->out_int);
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
}

/**
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
             (int)(acceleration.x)/100, (int)Instance, (int)acceleration.y/100, (int)Instance, (int)acceleration.z/100);
  }

  printf("%s", dataOut);

}

/**
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  None
  * @retval None
  */
static void Accelero_Sensor_Handler_LSM6DSO_G21(DataSend *Data_Packet)
{
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;
  if (IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &acceleration))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[LSM6DSO]: Error\r\n");
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[LSM6DSO]: %d, ACC_Y[LSM6DSO]: %d, ACC_Z[LSM6DSO]: %d\r\n",
             (int)(acceleration.x)/100,(int)acceleration.y/100,(int)acceleration.z/100);
  }

  printf("%s", dataOut);
  Data_Packet->acc_x = (((abs((int)(acceleration.x)/100)) > 9) ? 9 : (int)(acceleration.x)/100);
  Data_Packet->acc_y = (((abs((int)(acceleration.y)/100)) > 9) ? 9 : (int)(acceleration.y)/100);
  Data_Packet->acc_z = (((abs((int)(acceleration.z)/100)) > 9) ? 9 : (int)(acceleration.z)/100);
}

/**
  * @brief  Handles the temperature sensor data getting/sending modified by G21
  * @param  None
  * @retval None
  */

static void Temp_Sensor_Handler_HTS221_G21(DataSend *Data_Packet)
{
  float temperature;
  displayFloatToInt_t out_value;
  if (IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &temperature))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[HTS221]: Error\r\n");
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[HTS221]: %c%d.%02d degC\r\n", ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
             (int)out_value.out_dec);
  }
  printf("%s", dataOut);
  Data_Packet->temp = (int16_t)(temperature*100);
}

/**
  * @brief  Handles the pressure sensor data getting/sending modified by G21
  * @param  None
  * @retval None
  */
static void Press_Sensor_Handler_LPS22HH_G21(DataSend *Data_Packet)
{
  float pressure;
  displayFloatToInt_t out_value;
  if (IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pressure))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[LPS22HH]: Error\r\n");
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[LPS22HH]: %d.%02d hPa\r\n", (int)out_value.out_int,
             (int)out_value.out_dec);
  }
  printf("%s", dataOut);
  Data_Packet->press = (uint32_t)(pressure*100);


}

/**
  * @brief  Handles the humidity data getting/sending modified by G21
  * @param  None
  * @retval None
  */
static void Hum_Sensor_Handler_HTS221_G21(DataSend *Data_Packet)
{

  float humidity;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[HTS221]: Error\r\n");
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[HTS221]: %d.%02d %%\r\n", (int)out_value.out_int,
             (int)out_value.out_dec);
  }

  printf("%s", dataOut);
  Data_Packet->hum = (int16_t)(humidity*100);
}

/**
  * @brief  API for sending data with LORA
  * @param  uart that handles LORA
  * @param 	Data To send to LORA
  * @retval None
  */

void LoraE5_Send(UART_HandleTypeDef *lora_uart, char *DataToSend){
	char command[] = "AT+TEST=TXLRPKT," ;
	char response[1000] = "";
	HAL_UART_Transmit(lora_uart, (uint8_t*)command, strlen(command), 1000);
	HAL_UART_Transmit(lora_uart, (uint8_t*)DataToSend, strlen(DataToSend), 1000);
	HAL_UART_Receive(lora_uart, (uint8_t*)response, sizeof(response), 1000);
	printf("%s",response);

}


/**
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
  IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
  }

  printf("%s", dataOut);

}

/**
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
  IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
  }

  printf("%s", dataOut);


}

/**
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
  float temperature;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
             (int)out_value.out_dec);
  }

  printf("%s", dataOut);


}

/**
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
  float pressure;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
             (int)out_value.out_dec);
  }

  printf("%s", dataOut);


}

/**
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{

  float humidity;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
             (int)out_value.out_dec);
  }

  printf("%s", dataOut);

}

#ifdef __cplusplus
}
#endif
