/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "lcd.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
rgb_lcd lcd;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char command1[] = "AT+MODE=TEST\r\n" ;
char command2[] = "AT+TEST=RXLRPKT\r\n" ;
char line1[] = "[x]|[y]|[z]";
char line2[] = "[temp]|[hum]|[press]";
char response[100];
char acc_data[40];
char env_data[50];
char data[256];
int j = 0;
int i = 0;
size_t taille = 0;
uint8_t length_resp = 0;

typedef struct{
	char x[3], y[3], z[3];
}acceleration;

typedef struct{
	char temp[7], hum[6], press[7];
}environment;
void dataToString(char *data, acceleration *acc, environment *env);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  acceleration acc;
  environment env;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcd);
  lcd_position(&hi2c1, 3, 0);
  lcd_print(&hi2c1, line1);
  lcd_position(&hi2c1, 0, 1);
  lcd_print(&hi2c1, line2);
  HAL_UART_Transmit(&huart1, (uint8_t*)command1, strlen(command1), 1000);
  HAL_UART_Receive(&huart1, (uint8_t*)response, sizeof(response), 1000);
  HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), 1000);
  HAL_Delay(1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == RESET);
	memset(data,'\0',sizeof(data));
	memset(response,'\0',sizeof(response));
	memset(acc_data,'\0',sizeof(acc_data));
	memset(env_data,'\0',sizeof(env_data));
	HAL_UART_Transmit(&huart1, (uint8_t*)command2, strlen(command2), 1000);
	HAL_UART_Receive(&huart1, (uint8_t*)response, sizeof(response), 1000);

	if((strlen(response) > 80) && (strlen(response) < 104)){
		taille = sizeof(response)/sizeof(char);
		while(response[i] != '\"'){
		  i++;
		}
		for(j = 0; j < taille-i;j++){
		  i++;
		  if(response[i] == '\"'){
				break;
		  }
		  data[j] = response[i];

		}
	/*HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
	HAL_UART_Transmit(&huart2, (uint8_t*)'\n', 1, 1000);*/
	dataToString(data, &acc, &env);
	sprintf(acc_data,"\nacc_x = %s ; acc_y = %s ; acc_z = %s\n",acc.x , acc.y, acc.z);
	sprintf(env_data,"\ntemp = %s degC ; hum = %s %% ; press = %s hPa\n",env.temp , env.hum, env.press);

	HAL_UART_Transmit(&huart2, (uint8_t*)acc_data, strlen(acc_data), 1000);
	HAL_UART_Transmit(&huart2, (uint8_t*)env_data, strlen(env_data), 1000);
		i = 0;
		j = 0;
	}
	//else HAL_UART_Transmit(&huart2, (uint8_t*)"We're waiting for data\n", 23, 1000);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void dataToString(char *data, acceleration *acc, environment *env){
	snprintf(acc->x,3,"%c%c", ((data[0] == '2') ? '+' : '-'),data[1]);
	snprintf(acc->y,3,"%c%c", ((data[2] == '2') ? '+' : '-'),data[3]);
	snprintf(acc->z,3,"%c%c", ((data[4] == '2') ? '+' : '-'),data[5]);
	snprintf(env->temp,7,"%c%c%c,%c%c", ((data[7] == '2') ? '+' : '-'),data[8],data[9],data[10],data[11]);
	snprintf(env->hum,6,"%c%c,%c%c", data[12],data[13],data[14],data[15]);
	if(data[16] == '0'){
		snprintf(env->press,7,"%c%c%c,%c%c",data[17],data[18],data[19],data[20],data[21]);
	}else snprintf(env->press,7,"%c%c%c%c,%c%c", data[16],data[17],data[18],data[19],data[20],data[21]);

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
