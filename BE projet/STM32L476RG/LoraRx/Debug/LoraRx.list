
LoraRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  2000005c  080042b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  080042b4  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5ac  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000185d  00000000  00000000  0002a67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ce  00000000  00000000  0002c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259df  00000000  00000000  0002ce8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af64  00000000  00000000  0005286d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7827  00000000  00000000  0005d7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028b4  00000000  00000000  00144ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001478ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040e0 	.word	0x080040e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080040e0 	.word	0x080040e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b08f      	sub	sp, #60	; 0x3c
 8000580:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc1d 	bl	8000dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  data data_decodee;
  int taille = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f829 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8d9 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8a7 	bl	80006e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000596:	f000 f875 	bl	8000684 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lora_init();
 800059a:	f000 f939 	bl	8000810 <lora_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lora_receive();
 800059e:	f000 f971 	bl	8000884 <lora_receive>
	  taille = strlen(response);
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0x60>)
 80005a4:	f7ff fe14 	bl	80001d0 <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
	  if(taille > 80){
 80005ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ae:	2b50      	cmp	r3, #80	; 0x50
 80005b0:	dd0f      	ble.n	80005d2 <main+0x56>
		  trame_decode();
 80005b2:	f000 f98f 	bl	80008d4 <trame_decode>
		  data_decode(&data_decodee);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f9c5 	bl	8000948 <data_decode>
		  display_serial_data(data_decodee);
 80005be:	466c      	mov	r4, sp
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ce:	f000 fa49 	bl	8000a64 <display_serial_data>
	  }
	  HAL_Delay(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 fc70 	bl	8000eb8 <HAL_Delay>
	  lora_receive();
 80005d8:	e7e1      	b.n	800059e <main+0x22>
 80005da:	bf00      	nop
 80005dc:	20000188 	.word	0x20000188

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f8f2 	bl	80037d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000606:	f000 ff31 	bl	800146c <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 fa6e 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ff68 	bl	8001518 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064e:	f000 fa4f 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fb30 	bl	8001cd0 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 fa3b 	bl	8000af0 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	; 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART1_UART_Init+0x58>)
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <MX_USART1_UART_Init+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART1_UART_Init+0x58>)
 8000690:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART1_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_USART1_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART1_UART_Init+0x58>)
 80006c8:	f002 f9e2 	bl	8002a90 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 fa0d 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000078 	.word	0x20000078
 80006e0:	40013800 	.word	0x40013800

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART2_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000728:	f002 f9b2 	bl	8002a90 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f9dd 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000100 	.word	0x20000100
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a24      	ldr	r2, [pc, #144]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0xc4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 fe2d 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0xc8>)
 80007de:	f000 fc75 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e2:	2320      	movs	r3, #32
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 fc66 	bl	80010cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800

08000810 <lora_init>:

/* USER CODE BEGIN 4 */
void lora_init(void){
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8000816:	af00      	add	r7, sp, #0
	char command1[] = "AT+MODE=TEST\r\n" ;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <lora_init+0x6c>)
 800081a:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 800081e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000820:	c407      	stmia	r4!, {r0, r1, r2}
 8000822:	8023      	strh	r3, [r4, #0]
 8000824:	3402      	adds	r4, #2
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	7023      	strb	r3, [r4, #0]
	char response[1000] = "";
 800082a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800082e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	3304      	adds	r3, #4
 8000838:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ffca 	bl	80037d8 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*)command1, strlen(command1), 1000);
 8000844:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fcc1 	bl	80001d0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f507 717a 	add.w	r1, r7, #1000	; 0x3e8
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <lora_init+0x70>)
 800085c:	f002 f966 	bl	8002b2c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)response, sizeof(response), 1000);
 8000860:	4639      	mov	r1, r7
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <lora_init+0x70>)
 800086c:	f002 f9e8 	bl	8002c40 <HAL_UART_Receive>
}
 8000870:	bf00      	nop
 8000872:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	080040f8 	.word	0x080040f8
 8000880:	20000078 	.word	0x20000078

08000884 <lora_receive>:

void lora_receive(void){
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
	char command2[] = "AT+TEST=RXLRPKT\n" ;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <lora_receive+0x44>)
 800088c:	1d3c      	adds	r4, r7, #4
 800088e:	461d      	mov	r5, r3
 8000890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	682b      	ldr	r3, [r5, #0]
 8000896:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)command2, strlen(command2), 1000);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fc98 	bl	80001d0 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	1d39      	adds	r1, r7, #4
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <lora_receive+0x48>)
 80008ac:	f002 f93e 	bl	8002b2c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)response, sizeof(response), 1000);
 80008b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b8:	4905      	ldr	r1, [pc, #20]	; (80008d0 <lora_receive+0x4c>)
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <lora_receive+0x48>)
 80008bc:	f002 f9c0 	bl	8002c40 <HAL_UART_Receive>

}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bdb0      	pop	{r4, r5, r7, pc}
 80008c8:	08004108 	.word	0x08004108
 80008cc:	20000078 	.word	0x20000078
 80008d0:	20000188 	.word	0x20000188

080008d4 <trame_decode>:

void trame_decode(void){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
	int i = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
	int j = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
	while(response[i] != '\"'){
 80008e2:	e002      	b.n	80008ea <trame_decode+0x16>
		i++;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
	while(response[i] != '\"'){
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <trame_decode+0x6c>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b22      	cmp	r3, #34	; 0x22
 80008f4:	d1f6      	bne.n	80008e4 <trame_decode+0x10>
	}
	if(response[i] == '\"'){
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <trame_decode+0x6c>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b22      	cmp	r3, #34	; 0x22
 8000900:	d118      	bne.n	8000934 <trame_decode+0x60>
			i++;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
			while(response[i] != '\"'){
 8000908:	e00e      	b.n	8000928 <trame_decode+0x54>
				trame_decodee[j] = response[i];
 800090a:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <trame_decode+0x6c>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	7819      	ldrb	r1, [r3, #0]
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <trame_decode+0x70>)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	460a      	mov	r2, r1
 800091a:	701a      	strb	r2, [r3, #0]
				i++;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
				j++;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	603b      	str	r3, [r7, #0]
			while(response[i] != '\"'){
 8000928:	4a05      	ldr	r2, [pc, #20]	; (8000940 <trame_decode+0x6c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b22      	cmp	r3, #34	; 0x22
 8000932:	d1ea      	bne.n	800090a <trame_decode+0x36>
			}
	}
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	20000188 	.word	0x20000188
 8000944:	20000570 	.word	0x20000570

08000948 <data_decode>:

void data_decode(data *data_decode){
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af04      	add	r7, sp, #16
 800094e:	6078      	str	r0, [r7, #4]
	snprintf(data_decode->acc_x, 4, "%c%c",(trame_decodee[0] == '2') ? '+' : '-',
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <data_decode+0x10c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b32      	cmp	r3, #50	; 0x32
 8000958:	d101      	bne.n	800095e <data_decode+0x16>
 800095a:	232b      	movs	r3, #43	; 0x2b
 800095c:	e000      	b.n	8000960 <data_decode+0x18>
 800095e:	232d      	movs	r3, #45	; 0x2d
											  trame_decodee[1]);
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <data_decode+0x10c>)
 8000962:	7852      	ldrb	r2, [r2, #1]
	snprintf(data_decode->acc_x, 4, "%c%c",(trame_decodee[0] == '2') ? '+' : '-',
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	4a3c      	ldr	r2, [pc, #240]	; (8000a58 <data_decode+0x110>)
 8000968:	2104      	movs	r1, #4
 800096a:	f002 ff01 	bl	8003770 <sniprintf>

	snprintf(data_decode->acc_y, 4, "%c%c",(trame_decodee[2] == '2') ? '+' : '-',
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	1d18      	adds	r0, r3, #4
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <data_decode+0x10c>)
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b32      	cmp	r3, #50	; 0x32
 8000978:	d101      	bne.n	800097e <data_decode+0x36>
 800097a:	232b      	movs	r3, #43	; 0x2b
 800097c:	e000      	b.n	8000980 <data_decode+0x38>
 800097e:	232d      	movs	r3, #45	; 0x2d
											  trame_decodee[3]);
 8000980:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <data_decode+0x10c>)
 8000982:	78d2      	ldrb	r2, [r2, #3]
	snprintf(data_decode->acc_y, 4, "%c%c",(trame_decodee[2] == '2') ? '+' : '-',
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <data_decode+0x110>)
 8000988:	2104      	movs	r1, #4
 800098a:	f002 fef1 	bl	8003770 <sniprintf>

	snprintf(data_decode->acc_z, 4, "%c%c",(trame_decodee[4] == '2') ? '+' : '-',
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f103 0008 	add.w	r0, r3, #8
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <data_decode+0x10c>)
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	2b32      	cmp	r3, #50	; 0x32
 800099a:	d101      	bne.n	80009a0 <data_decode+0x58>
 800099c:	232b      	movs	r3, #43	; 0x2b
 800099e:	e000      	b.n	80009a2 <data_decode+0x5a>
 80009a0:	232d      	movs	r3, #45	; 0x2d
											  trame_decodee[5]);
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <data_decode+0x10c>)
 80009a4:	7952      	ldrb	r2, [r2, #5]
	snprintf(data_decode->acc_z, 4, "%c%c",(trame_decodee[4] == '2') ? '+' : '-',
 80009a6:	9200      	str	r2, [sp, #0]
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <data_decode+0x110>)
 80009aa:	2104      	movs	r1, #4
 80009ac:	f002 fee0 	bl	8003770 <sniprintf>

	snprintf(data_decode->temperature, 7, "%c%c%c,%c%c",(trame_decodee[6] == '2') ? '+' : '-',
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f103 000c 	add.w	r0, r3, #12
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <data_decode+0x10c>)
 80009b8:	799b      	ldrb	r3, [r3, #6]
 80009ba:	2b32      	cmp	r3, #50	; 0x32
 80009bc:	d101      	bne.n	80009c2 <data_decode+0x7a>
 80009be:	232b      	movs	r3, #43	; 0x2b
 80009c0:	e000      	b.n	80009c4 <data_decode+0x7c>
 80009c2:	232d      	movs	r3, #45	; 0x2d
												trame_decodee[7],
 80009c4:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <data_decode+0x10c>)
 80009c6:	79d2      	ldrb	r2, [r2, #7]
	snprintf(data_decode->temperature, 7, "%c%c%c,%c%c",(trame_decodee[6] == '2') ? '+' : '-',
 80009c8:	4611      	mov	r1, r2
											  trame_decodee[8],
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <data_decode+0x10c>)
 80009cc:	7a12      	ldrb	r2, [r2, #8]
	snprintf(data_decode->temperature, 7, "%c%c%c,%c%c",(trame_decodee[6] == '2') ? '+' : '-',
 80009ce:	4614      	mov	r4, r2
										   	  trame_decodee[9],
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <data_decode+0x10c>)
 80009d2:	7a52      	ldrb	r2, [r2, #9]
	snprintf(data_decode->temperature, 7, "%c%c%c,%c%c",(trame_decodee[6] == '2') ? '+' : '-',
 80009d4:	4615      	mov	r5, r2
											  trame_decodee[10]);
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <data_decode+0x10c>)
 80009d8:	7a92      	ldrb	r2, [r2, #10]
	snprintf(data_decode->temperature, 7, "%c%c%c,%c%c",(trame_decodee[6] == '2') ? '+' : '-',
 80009da:	9203      	str	r2, [sp, #12]
 80009dc:	9502      	str	r5, [sp, #8]
 80009de:	9401      	str	r4, [sp, #4]
 80009e0:	9100      	str	r1, [sp, #0]
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <data_decode+0x114>)
 80009e4:	2107      	movs	r1, #7
 80009e6:	f002 fec3 	bl	8003770 <sniprintf>

	snprintf(data_decode->humidity, 6, "%c%c,%c%c",trame_decodee[11],
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f103 0013 	add.w	r0, r3, #19
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <data_decode+0x10c>)
 80009f2:	7adb      	ldrb	r3, [r3, #11]
 80009f4:	461c      	mov	r4, r3
											  trame_decodee[12],
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <data_decode+0x10c>)
 80009f8:	7b1b      	ldrb	r3, [r3, #12]
	snprintf(data_decode->humidity, 6, "%c%c,%c%c",trame_decodee[11],
 80009fa:	461a      	mov	r2, r3
											  trame_decodee[13],
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <data_decode+0x10c>)
 80009fe:	7b5b      	ldrb	r3, [r3, #13]
	snprintf(data_decode->humidity, 6, "%c%c,%c%c",trame_decodee[11],
 8000a00:	4619      	mov	r1, r3
											  trame_decodee[14]);
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <data_decode+0x10c>)
 8000a04:	7b9b      	ldrb	r3, [r3, #14]
	snprintf(data_decode->humidity, 6, "%c%c,%c%c",trame_decodee[11],
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	9101      	str	r1, [sp, #4]
 8000a0a:	9200      	str	r2, [sp, #0]
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <data_decode+0x118>)
 8000a10:	2106      	movs	r1, #6
 8000a12:	f002 fead 	bl	8003770 <sniprintf>

	snprintf(data_decode->pressure, 7, "%c%c%c,%c%c",trame_decodee[15],
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f103 0019 	add.w	r0, r3, #25
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <data_decode+0x10c>)
 8000a1e:	7bdb      	ldrb	r3, [r3, #15]
 8000a20:	461d      	mov	r5, r3
											  trame_decodee[16],
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <data_decode+0x10c>)
 8000a24:	7c1b      	ldrb	r3, [r3, #16]
	snprintf(data_decode->pressure, 7, "%c%c%c,%c%c",trame_decodee[15],
 8000a26:	461a      	mov	r2, r3
											  trame_decodee[17],
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <data_decode+0x10c>)
 8000a2a:	7c5b      	ldrb	r3, [r3, #17]
	snprintf(data_decode->pressure, 7, "%c%c%c,%c%c",trame_decodee[15],
 8000a2c:	4619      	mov	r1, r3
											  trame_decodee[18],
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <data_decode+0x10c>)
 8000a30:	7c9b      	ldrb	r3, [r3, #18]
	snprintf(data_decode->pressure, 7, "%c%c%c,%c%c",trame_decodee[15],
 8000a32:	461c      	mov	r4, r3
											  trame_decodee[19]);
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <data_decode+0x10c>)
 8000a36:	7cdb      	ldrb	r3, [r3, #19]
	snprintf(data_decode->pressure, 7, "%c%c%c,%c%c",trame_decodee[15],
 8000a38:	9303      	str	r3, [sp, #12]
 8000a3a:	9402      	str	r4, [sp, #8]
 8000a3c:	9101      	str	r1, [sp, #4]
 8000a3e:	9200      	str	r2, [sp, #0]
 8000a40:	462b      	mov	r3, r5
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <data_decode+0x114>)
 8000a44:	2107      	movs	r1, #7
 8000a46:	f002 fe93 	bl	8003770 <sniprintf>

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bdb0      	pop	{r4, r5, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000570 	.word	0x20000570
 8000a58:	0800411c 	.word	0x0800411c
 8000a5c:	08004124 	.word	0x08004124
 8000a60:	08004130 	.word	0x08004130

08000a64 <display_serial_data>:

void display_serial_data(data data_display){
 8000a64:	b084      	sub	sp, #16
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b0c6      	sub	sp, #280	; 0x118
 8000a6a:	af06      	add	r7, sp, #24
 8000a6c:	f507 7c84 	add.w	ip, r7, #264	; 0x108
 8000a70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char data_out[256] = "";
 8000a74:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fea6 	bl	80037d8 <memset>
	snprintf(data_out, 113, "acc_x : %s | acc_y : %s | acc_z : %s \ntemperature : %s degC \nhumidity : %s %% \npressure = %s hPa \n"
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	f207 1321 	addw	r3, r7, #289	; 0x121
 8000a92:	9304      	str	r3, [sp, #16]
 8000a94:	f207 131b 	addw	r3, r7, #283	; 0x11b
 8000a98:	9303      	str	r3, [sp, #12]
 8000a9a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <display_serial_data+0x80>)
 8000ab2:	2171      	movs	r1, #113	; 0x71
 8000ab4:	f002 fe5c 	bl	8003770 <sniprintf>
												  data_display.acc_y,
												  data_display.acc_z,
												  data_display.temperature,
												  data_display.humidity,
												  data_display.pressure);
	HAL_UART_Transmit(&huart2, (uint8_t*)data_out,110 , 1000);
 8000ab8:	4639      	mov	r1, r7
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	226e      	movs	r2, #110	; 0x6e
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <display_serial_data+0x84>)
 8000ac2:	f002 f833 	bl	8002b2c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n---------------------------------------\n",44 , 1000);
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	222c      	movs	r2, #44	; 0x2c
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <display_serial_data+0x88>)
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <display_serial_data+0x84>)
 8000ad0:	f002 f82c 	bl	8002b2c <HAL_UART_Transmit>
}
 8000ad4:	bf00      	nop
 8000ad6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000ada:	46bd      	mov	sp, r7
 8000adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr
 8000ae4:	0800413c 	.word	0x0800413c
 8000ae8:	20000100 	.word	0x20000100
 8000aec:	080041a0 	.word	0x080041a0

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_MspInit+0x44>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x44>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0ae      	sub	sp, #184	; 0xb8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2288      	movs	r2, #136	; 0x88
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 fe37 	bl	80037d8 <memset>
  if(huart->Instance==USART1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <HAL_UART_MspInit+0x138>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d13d      	bne.n	8000bf0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fac9 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b8c:	f7ff ffb0 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b94:	4a3a      	ldr	r2, [pc, #232]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9c:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fa6f 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bee:	e040      	b.n	8000c72 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <HAL_UART_MspInit+0x140>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13b      	bne.n	8000c72 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fa86 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000c12:	f7ff ff6d 	bl	8000af0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0x13c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c46:	230c      	movs	r3, #12
 8000c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fa2d 	bl	80010cc <HAL_GPIO_Init>
}
 8000c72:	bf00      	nop
 8000c74:	37b8      	adds	r7, #184	; 0xb8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013800 	.word	0x40013800
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40004400 	.word	0x40004400

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f8d0 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f002 fd6c 	bl	80037e8 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20018000 	.word	0x20018000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200005a4 	.word	0x200005a4
 8000d44:	200006f8 	.word	0x200006f8

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fd2b 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fbed 	bl	800057c <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000db0:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8000db4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000db8:	200006f4 	.word	0x200006f4

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 f944 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fe85 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f941 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f919 	bl	800107a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200005a8 	.word	0x200005a8

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200005a8 	.word	0x200005a8

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff47 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff5c 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb0 	bl	8001020 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e17f      	b.n	80013dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8171 	beq.w	80013d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <HAL_GPIO_Init+0x40>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b03      	cmp	r3, #3
 8001178:	d118      	bne.n	80011ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80ac 	beq.w	80013d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <HAL_GPIO_Init+0x330>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	4a5e      	ldr	r2, [pc, #376]	; (80013fc <HAL_GPIO_Init+0x330>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6613      	str	r3, [r2, #96]	; 0x60
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_GPIO_Init+0x330>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001296:	4a5a      	ldr	r2, [pc, #360]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c0:	d025      	beq.n	800130e <HAL_GPIO_Init+0x242>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x338>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01f      	beq.n	800130a <HAL_GPIO_Init+0x23e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x33c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x23a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4d      	ldr	r2, [pc, #308]	; (800140c <HAL_GPIO_Init+0x340>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x236>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x344>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x232>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4b      	ldr	r2, [pc, #300]	; (8001414 <HAL_GPIO_Init+0x348>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x22e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4a      	ldr	r2, [pc, #296]	; (8001418 <HAL_GPIO_Init+0x34c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x22a>
 80012f2:	2306      	movs	r3, #6
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x244>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x244>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x244>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x244>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x244>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x244>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x244>
 800130e:	2300      	movs	r3, #0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001320:	4937      	ldr	r1, [pc, #220]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_GPIO_Init+0x350>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_GPIO_Init+0x350>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_GPIO_Init+0x350>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_GPIO_Init+0x350>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_GPIO_Init+0x350>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x350>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_Init+0x350>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_GPIO_Init+0x350>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f ae78 	bne.w	80010dc <HAL_GPIO_Init+0x10>
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	48000400 	.word	0x48000400
 8001408:	48000800 	.word	0x48000800
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48001000 	.word	0x48001000
 8001414:	48001400 	.word	0x48001400
 8001418:	48001800 	.word	0x48001800
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800143c:	e002      	b.n	8001444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_PWREx_GetVoltageRange+0x18>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40007000 	.word	0x40007000

0800146c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147a:	d130      	bne.n	80014de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001488:	d038      	beq.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001498:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2232      	movs	r2, #50	; 0x32
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0c9b      	lsrs	r3, r3, #18
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b0:	e002      	b.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c4:	d102      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f2      	bne.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	d110      	bne.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e00f      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ea:	d007      	beq.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f4:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000
 8001510:	20000000 	.word	0x20000000
 8001514:	431bde83 	.word	0x431bde83

08001518 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e3ca      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152a:	4b97      	ldr	r3, [pc, #604]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001534:	4b94      	ldr	r3, [pc, #592]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80e4 	beq.w	8001714 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_RCC_OscConfig+0x4a>
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	f040 808b 	bne.w	8001670 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b01      	cmp	r3, #1
 800155e:	f040 8087 	bne.w	8001670 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001562:	4b89      	ldr	r3, [pc, #548]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x62>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e3a2      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1a      	ldr	r2, [r3, #32]
 800157e:	4b82      	ldr	r3, [pc, #520]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <HAL_RCC_OscConfig+0x7c>
 800158a:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001592:	e005      	b.n	80015a0 <HAL_RCC_OscConfig+0x88>
 8001594:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d223      	bcs.n	80015ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fd55 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e383      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b8:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a72      	ldr	r2, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b70      	ldr	r3, [pc, #448]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	496d      	ldr	r1, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d6:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4968      	ldr	r1, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
 80015ea:	e025      	b.n	8001638 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4960      	ldr	r1, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	495b      	ldr	r1, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fd15 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e343      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001638:	f000 fc4a 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b52      	ldr	r3, [pc, #328]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	4950      	ldr	r1, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x274>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	4a4e      	ldr	r2, [pc, #312]	; (8001790 <HAL_RCC_OscConfig+0x278>)
 8001656:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001658:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <HAL_RCC_OscConfig+0x27c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fbcf 	bl	8000e00 <HAL_InitTick>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d052      	beq.n	8001712 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	e327      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d032      	beq.n	80016de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a42      	ldr	r2, [pc, #264]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc0c 	bl	8000ea0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800168c:	f7ff fc08 	bl	8000ea0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e310      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a36      	ldr	r2, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4931      	ldr	r1, [pc, #196]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c8:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	492c      	ldr	r1, [pc, #176]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e01a      	b.n	8001714 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a29      	ldr	r2, [pc, #164]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fbd9 	bl	8000ea0 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f2:	f7ff fbd5 	bl	8000ea0 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e2dd      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x1da>
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001712:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d074      	beq.n	800180a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b08      	cmp	r3, #8
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x21a>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d10e      	bne.n	800174a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d064      	beq.n	8001808 <HAL_RCC_OscConfig+0x2f0>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d160      	bne.n	8001808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e2ba      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x24a>
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e026      	b.n	80017b0 <HAL_RCC_OscConfig+0x298>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176a:	d115      	bne.n	8001798 <HAL_RCC_OscConfig+0x280>
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a02      	ldr	r2, [pc, #8]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x298>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	080041cc 	.word	0x080041cc
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004
 8001798:	4ba0      	ldr	r3, [pc, #640]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a9f      	ldr	r2, [pc, #636]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b9d      	ldr	r3, [pc, #628]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a9c      	ldr	r2, [pc, #624]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb72 	bl	8000ea0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb6e 	bl	8000ea0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e276      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2a8>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb5e 	bl	8000ea0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb5a 	bl	8000ea0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e262      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2d0>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d060      	beq.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x310>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d119      	bne.n	8001856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d116      	bne.n	8001856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001828:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x328>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e23f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	4973      	ldr	r1, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	e040      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d023      	beq.n	80018a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fb19 	bl	8000ea0 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fb15 	bl	8000ea0 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e21d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	495f      	ldr	r1, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e018      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff faf5 	bl	8000ea0 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff faf1 	bl	8000ea0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1f9      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03c      	beq.n	800195e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01c      	beq.n	8001926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fad0 	bl	8000ea0 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff facc 	bl	8000ea0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1d4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ef      	beq.n	8001904 <HAL_RCC_OscConfig+0x3ec>
 8001924:	e01b      	b.n	800195e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff fab3 	bl	8000ea0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff faaf 	bl	8000ea0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1b7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ef      	bne.n	800193e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80a6 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001986:	6593      	str	r3, [r2, #88]	; 0x58
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001994:	2301      	movs	r3, #1
 8001996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d118      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fa76 	bl	8000ea0 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b8:	f7ff fa72 	bl	8000ea0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e17a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4d8>
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ee:	e029      	b.n	8001a44 <HAL_RCC_OscConfig+0x52c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d115      	bne.n	8001a24 <HAL_RCC_OscConfig+0x50c>
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a18:	e014      	b.n	8001a44 <HAL_RCC_OscConfig+0x52c>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	4b9c      	ldr	r3, [pc, #624]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a9b      	ldr	r2, [pc, #620]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a34:	4b98      	ldr	r3, [pc, #608]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a97      	ldr	r2, [pc, #604]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d016      	beq.n	8001a7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa28 	bl	8000ea0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff fa24 	bl	8000ea0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e12a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ed      	beq.n	8001a54 <HAL_RCC_OscConfig+0x53c>
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fa11 	bl	8000ea0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fa0d 	bl	8000ea0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e113      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	4b7f      	ldr	r3, [pc, #508]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ed      	bne.n	8001a82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a79      	ldr	r2, [pc, #484]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80fe 	beq.w	8001cbe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	f040 80d0 	bne.w	8001c6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001acc:	4b72      	ldr	r3, [pc, #456]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d130      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	3b01      	subs	r3, #1
 8001aec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d127      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d11f      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b0c:	2a07      	cmp	r2, #7
 8001b0e:	bf14      	ite	ne
 8001b10:	2201      	movne	r2, #1
 8001b12:	2200      	moveq	r2, #0
 8001b14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d113      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	3b01      	subs	r3, #1
 8001b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d06e      	beq.n	8001c20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d069      	beq.n	8001c1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b54:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0ad      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b70:	f7ff f996 	bl	8000ea0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f992 	bl	8000ea0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e09a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8a:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b96:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ba6:	3a01      	subs	r2, #1
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb0:	0212      	lsls	r2, r2, #8
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bb8:	0852      	lsrs	r2, r2, #1
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	0552      	lsls	r2, r2, #21
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bc4:	0852      	lsrs	r2, r2, #1
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	0652      	lsls	r2, r2, #25
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd0:	0912      	lsrs	r2, r2, #4
 8001bd2:	0452      	lsls	r2, r2, #17
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	4930      	ldr	r1, [pc, #192]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2d      	ldr	r2, [pc, #180]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf4:	f7ff f954 	bl	8000ea0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f950 	bl	8000ea0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1a:	e050      	b.n	8001cbe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d148      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c44:	f7ff f92c 	bl	8000ea0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f928 	bl	8000ea0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e030      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x734>
 8001c6a:	e028      	b.n	8001cbe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d023      	beq.n	8001cba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_RCC_OscConfig+0x780>)
 8001c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f90f 	bl	8000ea0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e00c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f90b 	bl	8000ea0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d905      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e013      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_OscConfig+0x7b0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ec      	bne.n	8001c86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x7b0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <HAL_RCC_OscConfig+0x7b0>)
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x7b4>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e001      	b.n	8001cbe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	feeefffc 	.word	0xfeeefffc

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0e7      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4970      	ldr	r1, [pc, #448]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b6e      	ldr	r3, [pc, #440]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0cf      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4960      	ldr	r1, [pc, #384]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d04c      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0a6      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b54      	ldr	r3, [pc, #336]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09a      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e08e      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e086      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4943      	ldr	r1, [pc, #268]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db8:	f7ff f872 	bl	8000ea0 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7ff f86e 	bl	8000ea0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e06e      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d208      	bcs.n	8001e16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	492b      	ldr	r1, [pc, #172]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d210      	bcs.n	8001e46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 0207 	bic.w	r2, r3, #7
 8001e2c:	4923      	ldr	r1, [pc, #140]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e036      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e84:	f000 f824 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	490b      	ldr	r1, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1fc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe ffa9 	bl	8000e00 <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	080041cc 	.word	0x080041cc
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d121      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d11e      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e004      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d134      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d003      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0xac>
 8001f74:	e005      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f78:	617b      	str	r3, [r7, #20]
      break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	e002      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	617b      	str	r3, [r7, #20]
      break;
 8001f86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	fb03 f202 	mul.w	r2, r3, r2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	0e5b      	lsrs	r3, r3, #25
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	080041e4 	.word	0x080041e4
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4904      	ldr	r1, [pc, #16]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	080041dc 	.word	0x080041dc

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002030:	f7ff ffda 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	080041dc 	.word	0x080041dc

08002058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002070:	f7ff f9ee 	bl	8001450 <HAL_PWREx_GetVoltageRange>
 8002074:	6178      	str	r0, [r7, #20]
 8002076:	e014      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002090:	f7ff f9de 	bl	8001450 <HAL_PWREx_GetVoltageRange>
 8002094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a8:	d10b      	bne.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d919      	bls.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2ba0      	cmp	r3, #160	; 0xa0
 80020b4:	d902      	bls.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b6:	2302      	movs	r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e013      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e010      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d902      	bls.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020c8:	2303      	movs	r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e00a      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d102      	bne.n	80020da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020d4:	2302      	movs	r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e004      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b70      	cmp	r3, #112	; 0x70
 80020de:	d101      	bne.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002120:	2300      	movs	r3, #0
 8002122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002124:	2300      	movs	r3, #0
 8002126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002130:	2b00      	cmp	r3, #0
 8002132:	d041      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002138:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800213c:	d02a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800213e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002142:	d824      	bhi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002148:	d008      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800214a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800214e:	d81e      	bhi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002158:	d010      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800215a:	e018      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800215c:	4b86      	ldr	r3, [pc, #536]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a85      	ldr	r2, [pc, #532]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002168:	e015      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fabb 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800217a:	e00c      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3320      	adds	r3, #32
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fba6 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218c:	e003      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	74fb      	strb	r3, [r7, #19]
      break;
 8002192:	e000      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021aa:	4973      	ldr	r1, [pc, #460]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021b2:	e001      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d041      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021cc:	d02a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021d2:	d824      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d8:	d008      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021de:	d81e      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d010      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ea:	e018      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a61      	ldr	r2, [pc, #388]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021f8:	e015      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fa73 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800220a:	e00c      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3320      	adds	r3, #32
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fb5e 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221c:	e003      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	74fb      	strb	r3, [r7, #19]
      break;
 8002222:	e000      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800222c:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800223a:	494f      	ldr	r1, [pc, #316]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002242:	e001      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a0 	beq.w	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a40      	ldr	r2, [pc, #256]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3a      	ldr	r2, [pc, #232]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002298:	f7fe fe02 	bl	8000ea0 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800229e:	e009      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fdfe 	bl	8000ea0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d902      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	74fb      	strb	r3, [r7, #19]
        break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d15c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d019      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fdbd 	bl	8000ea0 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002328:	e00b      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fdb9 	bl	8000ea0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d902      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	74fb      	strb	r3, [r7, #19]
            break;
 8002340:	e006      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ec      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
 8002374:	e006      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002384:	7c7b      	ldrb	r3, [r7, #17]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b9e      	ldr	r3, [pc, #632]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a9d      	ldr	r2, [pc, #628]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a2:	4b98      	ldr	r3, [pc, #608]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f023 0203 	bic.w	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	4994      	ldr	r1, [pc, #592]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c4:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 020c 	bic.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	498c      	ldr	r1, [pc, #560]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e6:	4b87      	ldr	r3, [pc, #540]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4983      	ldr	r1, [pc, #524]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	497b      	ldr	r1, [pc, #492]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242a:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	4972      	ldr	r1, [pc, #456]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244c:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	496a      	ldr	r1, [pc, #424]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	4961      	ldr	r1, [pc, #388]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002490:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	4959      	ldr	r1, [pc, #356]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b2:	4b54      	ldr	r3, [pc, #336]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	4950      	ldr	r1, [pc, #320]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	4948      	ldr	r1, [pc, #288]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f6:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	493f      	ldr	r1, [pc, #252]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d028      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002536:	d106      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002542:	60d3      	str	r3, [r2, #12]
 8002544:	e011      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254e:	d10c      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f8c8 	bl	80026ec <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	491f      	ldr	r1, [pc, #124]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002594:	d106      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a0:	60d3      	str	r3, [r2, #12]
 80025a2:	e011      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f899 	bl	80026ec <RCCEx_PLLSAI1_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02b      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f2:	d109      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a02      	ldr	r2, [pc, #8]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fe:	60d3      	str	r3, [r2, #12]
 8002600:	e014      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002610:	d10c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2101      	movs	r1, #1
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f867 	bl	80026ec <RCCEx_PLLSAI1_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02f      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002646:	4928      	ldr	r1, [pc, #160]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002656:	d10d      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f844 	bl	80026ec <RCCEx_PLLSAI1_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d014      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	74bb      	strb	r3, [r7, #18]
 8002672:	e011      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267c:	d10c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3320      	adds	r3, #32
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f925 	bl	80028d4 <RCCEx_PLLSAI2_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d6:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026de:	7cbb      	ldrb	r3, [r7, #18]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000

080026ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026fa:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d10d      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
       ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
       ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d047      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e044      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d018      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x86>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d825      	bhi.n	8002790 <RCCEx_PLLSAI1_Config+0xa4>
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <RCCEx_PLLSAI1_Config+0x62>
 8002748:	2b02      	cmp	r3, #2
 800274a:	d009      	beq.n	8002760 <RCCEx_PLLSAI1_Config+0x74>
 800274c:	e020      	b.n	8002790 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11d      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275e:	e01a      	b.n	8002796 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002760:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d116      	bne.n	800279a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e013      	b.n	800279a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002772:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277e:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278e:	e006      	b.n	800279e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e004      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800279e:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	430b      	orrs	r3, r1
 80027bc:	4944      	ldr	r1, [pc, #272]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d17d      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d4:	f7fe fb64 	bl	8000ea0 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027da:	e009      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027dc:	f7fe fb60 	bl	8000ea0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	73fb      	strb	r3, [r7, #15]
        break;
 80027ee:	e005      	b.n	80027fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ef      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d160      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	0211      	lsls	r1, r2, #8
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	0912      	lsrs	r2, r2, #4
 8002820:	0452      	lsls	r2, r2, #17
 8002822:	430a      	orrs	r2, r1
 8002824:	492a      	ldr	r1, [pc, #168]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	610b      	str	r3, [r1, #16]
 800282a:	e027      	b.n	800287c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d112      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800283a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	0211      	lsls	r1, r2, #8
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6912      	ldr	r2, [r2, #16]
 8002848:	0852      	lsrs	r2, r2, #1
 800284a:	3a01      	subs	r2, #1
 800284c:	0552      	lsls	r2, r2, #21
 800284e:	430a      	orrs	r2, r1
 8002850:	491f      	ldr	r1, [pc, #124]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	610b      	str	r3, [r1, #16]
 8002856:	e011      	b.n	800287c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	0211      	lsls	r1, r2, #8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6952      	ldr	r2, [r2, #20]
 800286e:	0852      	lsrs	r2, r2, #1
 8002870:	3a01      	subs	r2, #1
 8002872:	0652      	lsls	r2, r2, #25
 8002874:	430a      	orrs	r2, r1
 8002876:	4916      	ldr	r1, [pc, #88]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fb0a 	bl	8000ea0 <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288e:	e009      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002890:	f7fe fb06 	bl	8000ea0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	73fb      	strb	r3, [r7, #15]
          break;
 80028a2:	e005      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ef      	beq.n	8002890 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028e2:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d018      	beq.n	8002920 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0203 	and.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10d      	bne.n	800291a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
       ||
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002906:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
       ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d047      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e044      	b.n	80029aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d018      	beq.n	800295a <RCCEx_PLLSAI2_Config+0x86>
 8002928:	2b03      	cmp	r3, #3
 800292a:	d825      	bhi.n	8002978 <RCCEx_PLLSAI2_Config+0xa4>
 800292c:	2b01      	cmp	r3, #1
 800292e:	d002      	beq.n	8002936 <RCCEx_PLLSAI2_Config+0x62>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d009      	beq.n	8002948 <RCCEx_PLLSAI2_Config+0x74>
 8002934:	e020      	b.n	8002978 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002936:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11d      	bne.n	800297e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002946:	e01a      	b.n	800297e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d116      	bne.n	8002982 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e013      	b.n	8002982 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002976:	e006      	b.n	8002986 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e004      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002986:	bf00      	nop
    }

    if(status == HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	430b      	orrs	r3, r1
 80029a4:	4939      	ldr	r1, [pc, #228]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d167      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a35      	ldr	r2, [pc, #212]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029bc:	f7fe fa70 	bl	8000ea0 <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029c2:	e009      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029c4:	f7fe fa6c 	bl	8000ea0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
        break;
 80029d6:	e005      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ef      	bne.n	80029c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d14a      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	0912      	lsrs	r2, r2, #4
 8002a08:	0452      	lsls	r2, r2, #17
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	491f      	ldr	r1, [pc, #124]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	614b      	str	r3, [r1, #20]
 8002a12:	e011      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6892      	ldr	r2, [r2, #8]
 8002a24:	0211      	lsls	r1, r2, #8
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6912      	ldr	r2, [r2, #16]
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0652      	lsls	r2, r2, #25
 8002a30:	430a      	orrs	r2, r1
 8002a32:	4916      	ldr	r1, [pc, #88]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fa2c 	bl	8000ea0 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a4a:	e009      	b.n	8002a60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a4c:	f7fe fa28 	bl	8000ea0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a5e:	e005      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ef      	beq.n	8002a4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e040      	b.n	8002b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe f846 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fc34 	bl	8003344 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f979 	bl	8002dd4 <UART_SetConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e01b      	b.n	8002b24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fcb3 	bl	8003488 <UART_CheckIdleState>
 8002b22:	4603      	mov	r3, r0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d178      	bne.n	8002c36 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_Transmit+0x24>
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e071      	b.n	8002c38 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2221      	movs	r2, #33	; 0x21
 8002b60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b62:	f7fe f99d 	bl	8000ea0 <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d108      	bne.n	8002b94 <HAL_UART_Transmit+0x68>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e003      	b.n	8002b9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b9c:	e030      	b.n	8002c00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fd15 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e03c      	b.n	8002c38 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	881a      	ldrh	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e008      	b.n	8002bee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b292      	uxth	r2, r2
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1c8      	bne.n	8002b9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2140      	movs	r1, #64	; 0x40
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fcde 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e005      	b.n	8002c38 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 80b6 	bne.w	8002dc8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_UART_Receive+0x28>
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0ae      	b.n	8002dca <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2222      	movs	r2, #34	; 0x22
 8002c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c82:	f7fe f90d 	bl	8000ea0 <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_UART_Receive+0x80>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_UART_Receive+0x76>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cb4:	e02d      	b.n	8002d12 <HAL_UART_Receive+0xd2>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cbe:	e028      	b.n	8002d12 <HAL_UART_Receive+0xd2>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_UART_Receive+0xa4>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_UART_Receive+0x9a>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cd8:	e01b      	b.n	8002d12 <HAL_UART_Receive+0xd2>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	227f      	movs	r2, #127	; 0x7f
 8002cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ce2:	e016      	b.n	8002d12 <HAL_UART_Receive+0xd2>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cec:	d10d      	bne.n	8002d0a <HAL_UART_Receive+0xca>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_UART_Receive+0xc0>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	227f      	movs	r2, #127	; 0x7f
 8002cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cfe:	e008      	b.n	8002d12 <HAL_UART_Receive+0xd2>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	223f      	movs	r2, #63	; 0x3f
 8002d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d08:	e003      	b.n	8002d12 <HAL_UART_Receive+0xd2>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d22:	d108      	bne.n	8002d36 <HAL_UART_Receive+0xf6>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e003      	b.n	8002d3e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d3e:	e037      	b.n	8002db0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2120      	movs	r1, #32
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fc44 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e033      	b.n	8002dca <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10c      	bne.n	8002d82 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	8a7b      	ldrh	r3, [r7, #18]
 8002d72:	4013      	ands	r3, r2
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e00d      	b.n	8002d9e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	8a7b      	ldrh	r3, [r7, #18]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1c1      	bne.n	8002d40 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b08a      	sub	sp, #40	; 0x28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4ba4      	ldr	r3, [pc, #656]	; (8003094 <UART_SetConfig+0x2c0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a99      	ldr	r2, [pc, #612]	; (8003098 <UART_SetConfig+0x2c4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a90      	ldr	r2, [pc, #576]	; (800309c <UART_SetConfig+0x2c8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d126      	bne.n	8002eac <UART_SetConfig+0xd8>
 8002e5e:	4b90      	ldr	r3, [pc, #576]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d81b      	bhi.n	8002ea4 <UART_SetConfig+0xd0>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <UART_SetConfig+0xa0>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e95 	.word	0x08002e95
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e9d 	.word	0x08002e9d
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8a:	e116      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e112      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002e94:	2304      	movs	r3, #4
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9a:	e10e      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea2:	e10a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eaa:	e106      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <UART_SetConfig+0x2d0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d138      	bne.n	8002f28 <UART_SetConfig+0x154>
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d82d      	bhi.n	8002f20 <UART_SetConfig+0x14c>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <UART_SetConfig+0xf8>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002f01 	.word	0x08002f01
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002f21 	.word	0x08002f21
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f21 	.word	0x08002f21
 8002eec:	08002f09 	.word	0x08002f09
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f21 	.word	0x08002f21
 8002efc:	08002f19 	.word	0x08002f19
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e0d8      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e0d4      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f10:	2304      	movs	r3, #4
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e0d0      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f18:	2308      	movs	r3, #8
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1e:	e0cc      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f20:	2310      	movs	r3, #16
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e0c8      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <UART_SetConfig+0x2d4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d125      	bne.n	8002f7e <UART_SetConfig+0x1aa>
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3c:	2b30      	cmp	r3, #48	; 0x30
 8002f3e:	d016      	beq.n	8002f6e <UART_SetConfig+0x19a>
 8002f40:	2b30      	cmp	r3, #48	; 0x30
 8002f42:	d818      	bhi.n	8002f76 <UART_SetConfig+0x1a2>
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d00a      	beq.n	8002f5e <UART_SetConfig+0x18a>
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d814      	bhi.n	8002f76 <UART_SetConfig+0x1a2>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <UART_SetConfig+0x182>
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d008      	beq.n	8002f66 <UART_SetConfig+0x192>
 8002f54:	e00f      	b.n	8002f76 <UART_SetConfig+0x1a2>
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5c:	e0ad      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f64:	e0a9      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f66:	2304      	movs	r3, #4
 8002f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6c:	e0a5      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f74:	e0a1      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f76:	2310      	movs	r3, #16
 8002f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7c:	e09d      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <UART_SetConfig+0x2d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x200>
 8002f88:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f92:	2bc0      	cmp	r3, #192	; 0xc0
 8002f94:	d016      	beq.n	8002fc4 <UART_SetConfig+0x1f0>
 8002f96:	2bc0      	cmp	r3, #192	; 0xc0
 8002f98:	d818      	bhi.n	8002fcc <UART_SetConfig+0x1f8>
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d00a      	beq.n	8002fb4 <UART_SetConfig+0x1e0>
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d814      	bhi.n	8002fcc <UART_SetConfig+0x1f8>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <UART_SetConfig+0x1d8>
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d008      	beq.n	8002fbc <UART_SetConfig+0x1e8>
 8002faa:	e00f      	b.n	8002fcc <UART_SetConfig+0x1f8>
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb2:	e082      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e07e      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e07a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fca:	e076      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd2:	e072      	b.n	80030ba <UART_SetConfig+0x2e6>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <UART_SetConfig+0x2dc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d12a      	bne.n	8003034 <UART_SetConfig+0x260>
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fec:	d01a      	beq.n	8003024 <UART_SetConfig+0x250>
 8002fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff2:	d81b      	bhi.n	800302c <UART_SetConfig+0x258>
 8002ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff8:	d00c      	beq.n	8003014 <UART_SetConfig+0x240>
 8002ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffe:	d815      	bhi.n	800302c <UART_SetConfig+0x258>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x238>
 8003004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003008:	d008      	beq.n	800301c <UART_SetConfig+0x248>
 800300a:	e00f      	b.n	800302c <UART_SetConfig+0x258>
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e052      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003014:	2302      	movs	r3, #2
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e04e      	b.n	80030ba <UART_SetConfig+0x2e6>
 800301c:	2304      	movs	r3, #4
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e04a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003024:	2308      	movs	r3, #8
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302a:	e046      	b.n	80030ba <UART_SetConfig+0x2e6>
 800302c:	2310      	movs	r3, #16
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003032:	e042      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <UART_SetConfig+0x2c4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d13a      	bne.n	80030b4 <UART_SetConfig+0x2e0>
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <UART_SetConfig+0x2cc>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800304c:	d01a      	beq.n	8003084 <UART_SetConfig+0x2b0>
 800304e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003052:	d81b      	bhi.n	800308c <UART_SetConfig+0x2b8>
 8003054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003058:	d00c      	beq.n	8003074 <UART_SetConfig+0x2a0>
 800305a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305e:	d815      	bhi.n	800308c <UART_SetConfig+0x2b8>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <UART_SetConfig+0x298>
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003068:	d008      	beq.n	800307c <UART_SetConfig+0x2a8>
 800306a:	e00f      	b.n	800308c <UART_SetConfig+0x2b8>
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003074:	2302      	movs	r3, #2
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e01e      	b.n	80030ba <UART_SetConfig+0x2e6>
 800307c:	2304      	movs	r3, #4
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e01a      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003084:	2308      	movs	r3, #8
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e016      	b.n	80030ba <UART_SetConfig+0x2e6>
 800308c:	2310      	movs	r3, #16
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e012      	b.n	80030ba <UART_SetConfig+0x2e6>
 8003094:	efff69f3 	.word	0xefff69f3
 8003098:	40008000 	.word	0x40008000
 800309c:	40013800 	.word	0x40013800
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40004400 	.word	0x40004400
 80030a8:	40004800 	.word	0x40004800
 80030ac:	40004c00 	.word	0x40004c00
 80030b0:	40005000 	.word	0x40005000
 80030b4:	2310      	movs	r3, #16
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a9f      	ldr	r2, [pc, #636]	; (800333c <UART_SetConfig+0x568>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d17a      	bne.n	80031ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d824      	bhi.n	8003116 <UART_SetConfig+0x342>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0x300>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003117 	.word	0x08003117
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003117 	.word	0x08003117
 80030e4:	08003107 	.word	0x08003107
 80030e8:	08003117 	.word	0x08003117
 80030ec:	08003117 	.word	0x08003117
 80030f0:	08003117 	.word	0x08003117
 80030f4:	0800310f 	.word	0x0800310f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7fe ff82 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80030fc:	61f8      	str	r0, [r7, #28]
        break;
 80030fe:	e010      	b.n	8003122 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003100:	4b8f      	ldr	r3, [pc, #572]	; (8003340 <UART_SetConfig+0x56c>)
 8003102:	61fb      	str	r3, [r7, #28]
        break;
 8003104:	e00d      	b.n	8003122 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003106:	f7fe fee3 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 800310a:	61f8      	str	r0, [r7, #28]
        break;
 800310c:	e009      	b.n	8003122 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003112:	61fb      	str	r3, [r7, #28]
        break;
 8003114:	e005      	b.n	8003122 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80fb 	beq.w	8003320 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	429a      	cmp	r2, r3
 8003138:	d305      	bcc.n	8003146 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	429a      	cmp	r2, r3
 8003144:	d903      	bls.n	800314e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800314c:	e0e8      	b.n	8003320 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2200      	movs	r2, #0
 8003152:	461c      	mov	r4, r3
 8003154:	4615      	mov	r5, r2
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	022b      	lsls	r3, r5, #8
 8003160:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003164:	0222      	lsls	r2, r4, #8
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	6849      	ldr	r1, [r1, #4]
 800316a:	0849      	lsrs	r1, r1, #1
 800316c:	2000      	movs	r0, #0
 800316e:	4688      	mov	r8, r1
 8003170:	4681      	mov	r9, r0
 8003172:	eb12 0a08 	adds.w	sl, r2, r8
 8003176:	eb43 0b09 	adc.w	fp, r3, r9
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003188:	4650      	mov	r0, sl
 800318a:	4659      	mov	r1, fp
 800318c:	f7fd f878 	bl	8000280 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4613      	mov	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319e:	d308      	bcc.n	80031b2 <UART_SetConfig+0x3de>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d204      	bcs.n	80031b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e0b6      	b.n	8003320 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031b8:	e0b2      	b.n	8003320 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d15e      	bne.n	8003282 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80031c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d828      	bhi.n	800321e <UART_SetConfig+0x44a>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <UART_SetConfig+0x400>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031f9 	.word	0x080031f9
 80031d8:	08003201 	.word	0x08003201
 80031dc:	08003209 	.word	0x08003209
 80031e0:	0800321f 	.word	0x0800321f
 80031e4:	0800320f 	.word	0x0800320f
 80031e8:	0800321f 	.word	0x0800321f
 80031ec:	0800321f 	.word	0x0800321f
 80031f0:	0800321f 	.word	0x0800321f
 80031f4:	08003217 	.word	0x08003217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f8:	f7fe ff02 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80031fc:	61f8      	str	r0, [r7, #28]
        break;
 80031fe:	e014      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7fe ff14 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8003204:	61f8      	str	r0, [r7, #28]
        break;
 8003206:	e010      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003208:	4b4d      	ldr	r3, [pc, #308]	; (8003340 <UART_SetConfig+0x56c>)
 800320a:	61fb      	str	r3, [r7, #28]
        break;
 800320c:	e00d      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320e:	f7fe fe5f 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8003212:	61f8      	str	r0, [r7, #28]
        break;
 8003214:	e009      	b.n	800322a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	61fb      	str	r3, [r7, #28]
        break;
 800321c:	e005      	b.n	800322a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d077      	beq.n	8003320 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005a      	lsls	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d916      	bls.n	800327a <UART_SetConfig+0x4a6>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d212      	bcs.n	800327a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f023 030f 	bic.w	r3, r3, #15
 800325c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	b29a      	uxth	r2, r3
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	4313      	orrs	r3, r2
 800326e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	8afa      	ldrh	r2, [r7, #22]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e052      	b.n	8003320 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003280:	e04e      	b.n	8003320 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003286:	2b08      	cmp	r3, #8
 8003288:	d827      	bhi.n	80032da <UART_SetConfig+0x506>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <UART_SetConfig+0x4bc>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7fe fea4 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80032b8:	61f8      	str	r0, [r7, #28]
        break;
 80032ba:	e014      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe feb6 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80032c0:	61f8      	str	r0, [r7, #28]
        break;
 80032c2:	e010      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <UART_SetConfig+0x56c>)
 80032c6:	61fb      	str	r3, [r7, #28]
        break;
 80032c8:	e00d      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fe01 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80032ce:	61f8      	str	r0, [r7, #28]
        break;
 80032d0:	e009      	b.n	80032e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	61fb      	str	r3, [r7, #28]
        break;
 80032d8:	e005      	b.n	80032e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032e4:	bf00      	nop
    }

    if (pclk != 0U)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d019      	beq.n	8003320 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	085a      	lsrs	r2, r3, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d909      	bls.n	800331a <UART_SetConfig+0x546>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d205      	bcs.n	800331a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e002      	b.n	8003320 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800332c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333a:	bf00      	nop
 800333c:	40008000 	.word	0x40008000
 8003340:	00f42400 	.word	0x00f42400

08003344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01a      	beq.n	800345a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003442:	d10a      	bne.n	800345a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b098      	sub	sp, #96	; 0x60
 800348c:	af02      	add	r7, sp, #8
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003498:	f7fd fd02 	bl	8000ea0 <HAL_GetTick>
 800349c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d12e      	bne.n	800350a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f88c 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d021      	beq.n	800350a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	653b      	str	r3, [r7, #80]	; 0x50
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
 80034e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e062      	b.n	80035d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d149      	bne.n	80035ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f856 	bl	80035d8 <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d03c      	beq.n	80035ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	623b      	str	r3, [r7, #32]
   return(result);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
 8003552:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e6      	bne.n	8003532 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3308      	adds	r3, #8
 800356a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	60fb      	str	r3, [r7, #12]
   return(result);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3308      	adds	r3, #8
 8003582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003584:	61fa      	str	r2, [r7, #28]
 8003586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	69b9      	ldr	r1, [r7, #24]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	617b      	str	r3, [r7, #20]
   return(result);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e5      	bne.n	8003564 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e011      	b.n	80035d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3758      	adds	r7, #88	; 0x58
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e8:	e049      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d045      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fd fc55 	bl	8000ea0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <UART_WaitOnFlagUntilTimeout+0x30>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e048      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d031      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d110      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f838 	bl	80036a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2208      	movs	r2, #8
 800363a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e029      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003658:	d111      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f81e 	bl	80036a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e00f      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	429a      	cmp	r2, r3
 800369a:	d0a6      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b095      	sub	sp, #84	; 0x54
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036cc:	643b      	str	r3, [r7, #64]	; 0x40
 80036ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e6      	bne.n	80036ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3308      	adds	r3, #8
 80036e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	2b01      	cmp	r3, #1
 800371a:	d118      	bne.n	800374e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	60bb      	str	r3, [r7, #8]
   return(result);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f023 0310 	bic.w	r3, r3, #16
 8003730:	647b      	str	r3, [r7, #68]	; 0x44
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6979      	ldr	r1, [r7, #20]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	613b      	str	r3, [r7, #16]
   return(result);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e6      	bne.n	800371c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003762:	bf00      	nop
 8003764:	3754      	adds	r7, #84	; 0x54
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <sniprintf>:
 8003770:	b40c      	push	{r2, r3}
 8003772:	b530      	push	{r4, r5, lr}
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <sniprintf+0x64>)
 8003776:	1e0c      	subs	r4, r1, #0
 8003778:	681d      	ldr	r5, [r3, #0]
 800377a:	b09d      	sub	sp, #116	; 0x74
 800377c:	da08      	bge.n	8003790 <sniprintf+0x20>
 800377e:	238b      	movs	r3, #139	; 0x8b
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295
 8003786:	b01d      	add	sp, #116	; 0x74
 8003788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800378c:	b002      	add	sp, #8
 800378e:	4770      	bx	lr
 8003790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003798:	bf14      	ite	ne
 800379a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800379e:	4623      	moveq	r3, r4
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	9307      	str	r3, [sp, #28]
 80037a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a8:	9002      	str	r0, [sp, #8]
 80037aa:	9006      	str	r0, [sp, #24]
 80037ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037b2:	ab21      	add	r3, sp, #132	; 0x84
 80037b4:	a902      	add	r1, sp, #8
 80037b6:	4628      	mov	r0, r5
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	f000 f993 	bl	8003ae4 <_svfiprintf_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	bfbc      	itt	lt
 80037c2:	238b      	movlt	r3, #139	; 0x8b
 80037c4:	602b      	strlt	r3, [r5, #0]
 80037c6:	2c00      	cmp	r4, #0
 80037c8:	d0dd      	beq.n	8003786 <sniprintf+0x16>
 80037ca:	9b02      	ldr	r3, [sp, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e7d9      	b.n	8003786 <sniprintf+0x16>
 80037d2:	bf00      	nop
 80037d4:	20000058 	.word	0x20000058

080037d8 <memset>:
 80037d8:	4402      	add	r2, r0
 80037da:	4603      	mov	r3, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d100      	bne.n	80037e2 <memset+0xa>
 80037e0:	4770      	bx	lr
 80037e2:	f803 1b01 	strb.w	r1, [r3], #1
 80037e6:	e7f9      	b.n	80037dc <memset+0x4>

080037e8 <__errno>:
 80037e8:	4b01      	ldr	r3, [pc, #4]	; (80037f0 <__errno+0x8>)
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000058 	.word	0x20000058

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4d0d      	ldr	r5, [pc, #52]	; (800382c <__libc_init_array+0x38>)
 80037f8:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <__libc_init_array+0x3c>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	2600      	movs	r6, #0
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	4d0b      	ldr	r5, [pc, #44]	; (8003834 <__libc_init_array+0x40>)
 8003806:	4c0c      	ldr	r4, [pc, #48]	; (8003838 <__libc_init_array+0x44>)
 8003808:	f000 fc6a 	bl	80040e0 <_init>
 800380c:	1b64      	subs	r4, r4, r5
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	2600      	movs	r6, #0
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f855 3b04 	ldr.w	r3, [r5], #4
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f855 3b04 	ldr.w	r3, [r5], #4
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	08004250 	.word	0x08004250
 8003830:	08004250 	.word	0x08004250
 8003834:	08004250 	.word	0x08004250
 8003838:	08004254 	.word	0x08004254

0800383c <__retarget_lock_acquire_recursive>:
 800383c:	4770      	bx	lr

0800383e <__retarget_lock_release_recursive>:
 800383e:	4770      	bx	lr

08003840 <_free_r>:
 8003840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003842:	2900      	cmp	r1, #0
 8003844:	d044      	beq.n	80038d0 <_free_r+0x90>
 8003846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800384a:	9001      	str	r0, [sp, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f1a1 0404 	sub.w	r4, r1, #4
 8003852:	bfb8      	it	lt
 8003854:	18e4      	addlt	r4, r4, r3
 8003856:	f000 f8df 	bl	8003a18 <__malloc_lock>
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <_free_r+0x94>)
 800385c:	9801      	ldr	r0, [sp, #4]
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	b933      	cbnz	r3, 8003870 <_free_r+0x30>
 8003862:	6063      	str	r3, [r4, #4]
 8003864:	6014      	str	r4, [r2, #0]
 8003866:	b003      	add	sp, #12
 8003868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800386c:	f000 b8da 	b.w	8003a24 <__malloc_unlock>
 8003870:	42a3      	cmp	r3, r4
 8003872:	d908      	bls.n	8003886 <_free_r+0x46>
 8003874:	6825      	ldr	r5, [r4, #0]
 8003876:	1961      	adds	r1, r4, r5
 8003878:	428b      	cmp	r3, r1
 800387a:	bf01      	itttt	eq
 800387c:	6819      	ldreq	r1, [r3, #0]
 800387e:	685b      	ldreq	r3, [r3, #4]
 8003880:	1949      	addeq	r1, r1, r5
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	e7ed      	b.n	8003862 <_free_r+0x22>
 8003886:	461a      	mov	r2, r3
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	b10b      	cbz	r3, 8003890 <_free_r+0x50>
 800388c:	42a3      	cmp	r3, r4
 800388e:	d9fa      	bls.n	8003886 <_free_r+0x46>
 8003890:	6811      	ldr	r1, [r2, #0]
 8003892:	1855      	adds	r5, r2, r1
 8003894:	42a5      	cmp	r5, r4
 8003896:	d10b      	bne.n	80038b0 <_free_r+0x70>
 8003898:	6824      	ldr	r4, [r4, #0]
 800389a:	4421      	add	r1, r4
 800389c:	1854      	adds	r4, r2, r1
 800389e:	42a3      	cmp	r3, r4
 80038a0:	6011      	str	r1, [r2, #0]
 80038a2:	d1e0      	bne.n	8003866 <_free_r+0x26>
 80038a4:	681c      	ldr	r4, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	6053      	str	r3, [r2, #4]
 80038aa:	440c      	add	r4, r1
 80038ac:	6014      	str	r4, [r2, #0]
 80038ae:	e7da      	b.n	8003866 <_free_r+0x26>
 80038b0:	d902      	bls.n	80038b8 <_free_r+0x78>
 80038b2:	230c      	movs	r3, #12
 80038b4:	6003      	str	r3, [r0, #0]
 80038b6:	e7d6      	b.n	8003866 <_free_r+0x26>
 80038b8:	6825      	ldr	r5, [r4, #0]
 80038ba:	1961      	adds	r1, r4, r5
 80038bc:	428b      	cmp	r3, r1
 80038be:	bf04      	itt	eq
 80038c0:	6819      	ldreq	r1, [r3, #0]
 80038c2:	685b      	ldreq	r3, [r3, #4]
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	bf04      	itt	eq
 80038c8:	1949      	addeq	r1, r1, r5
 80038ca:	6021      	streq	r1, [r4, #0]
 80038cc:	6054      	str	r4, [r2, #4]
 80038ce:	e7ca      	b.n	8003866 <_free_r+0x26>
 80038d0:	b003      	add	sp, #12
 80038d2:	bd30      	pop	{r4, r5, pc}
 80038d4:	200006ec 	.word	0x200006ec

080038d8 <sbrk_aligned>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4e0e      	ldr	r6, [pc, #56]	; (8003914 <sbrk_aligned+0x3c>)
 80038dc:	460c      	mov	r4, r1
 80038de:	6831      	ldr	r1, [r6, #0]
 80038e0:	4605      	mov	r5, r0
 80038e2:	b911      	cbnz	r1, 80038ea <sbrk_aligned+0x12>
 80038e4:	f000 fba6 	bl	8004034 <_sbrk_r>
 80038e8:	6030      	str	r0, [r6, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 fba1 	bl	8004034 <_sbrk_r>
 80038f2:	1c43      	adds	r3, r0, #1
 80038f4:	d00a      	beq.n	800390c <sbrk_aligned+0x34>
 80038f6:	1cc4      	adds	r4, r0, #3
 80038f8:	f024 0403 	bic.w	r4, r4, #3
 80038fc:	42a0      	cmp	r0, r4
 80038fe:	d007      	beq.n	8003910 <sbrk_aligned+0x38>
 8003900:	1a21      	subs	r1, r4, r0
 8003902:	4628      	mov	r0, r5
 8003904:	f000 fb96 	bl	8004034 <_sbrk_r>
 8003908:	3001      	adds	r0, #1
 800390a:	d101      	bne.n	8003910 <sbrk_aligned+0x38>
 800390c:	f04f 34ff 	mov.w	r4, #4294967295
 8003910:	4620      	mov	r0, r4
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	200006f0 	.word	0x200006f0

08003918 <_malloc_r>:
 8003918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800391c:	1ccd      	adds	r5, r1, #3
 800391e:	f025 0503 	bic.w	r5, r5, #3
 8003922:	3508      	adds	r5, #8
 8003924:	2d0c      	cmp	r5, #12
 8003926:	bf38      	it	cc
 8003928:	250c      	movcc	r5, #12
 800392a:	2d00      	cmp	r5, #0
 800392c:	4607      	mov	r7, r0
 800392e:	db01      	blt.n	8003934 <_malloc_r+0x1c>
 8003930:	42a9      	cmp	r1, r5
 8003932:	d905      	bls.n	8003940 <_malloc_r+0x28>
 8003934:	230c      	movs	r3, #12
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	2600      	movs	r6, #0
 800393a:	4630      	mov	r0, r6
 800393c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003940:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a14 <_malloc_r+0xfc>
 8003944:	f000 f868 	bl	8003a18 <__malloc_lock>
 8003948:	f8d8 3000 	ldr.w	r3, [r8]
 800394c:	461c      	mov	r4, r3
 800394e:	bb5c      	cbnz	r4, 80039a8 <_malloc_r+0x90>
 8003950:	4629      	mov	r1, r5
 8003952:	4638      	mov	r0, r7
 8003954:	f7ff ffc0 	bl	80038d8 <sbrk_aligned>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	4604      	mov	r4, r0
 800395c:	d155      	bne.n	8003a0a <_malloc_r+0xf2>
 800395e:	f8d8 4000 	ldr.w	r4, [r8]
 8003962:	4626      	mov	r6, r4
 8003964:	2e00      	cmp	r6, #0
 8003966:	d145      	bne.n	80039f4 <_malloc_r+0xdc>
 8003968:	2c00      	cmp	r4, #0
 800396a:	d048      	beq.n	80039fe <_malloc_r+0xe6>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	4631      	mov	r1, r6
 8003970:	4638      	mov	r0, r7
 8003972:	eb04 0903 	add.w	r9, r4, r3
 8003976:	f000 fb5d 	bl	8004034 <_sbrk_r>
 800397a:	4581      	cmp	r9, r0
 800397c:	d13f      	bne.n	80039fe <_malloc_r+0xe6>
 800397e:	6821      	ldr	r1, [r4, #0]
 8003980:	1a6d      	subs	r5, r5, r1
 8003982:	4629      	mov	r1, r5
 8003984:	4638      	mov	r0, r7
 8003986:	f7ff ffa7 	bl	80038d8 <sbrk_aligned>
 800398a:	3001      	adds	r0, #1
 800398c:	d037      	beq.n	80039fe <_malloc_r+0xe6>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	442b      	add	r3, r5
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	f8d8 3000 	ldr.w	r3, [r8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d038      	beq.n	8003a0e <_malloc_r+0xf6>
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	42a2      	cmp	r2, r4
 80039a0:	d12b      	bne.n	80039fa <_malloc_r+0xe2>
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	e00f      	b.n	80039c8 <_malloc_r+0xb0>
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	1b52      	subs	r2, r2, r5
 80039ac:	d41f      	bmi.n	80039ee <_malloc_r+0xd6>
 80039ae:	2a0b      	cmp	r2, #11
 80039b0:	d917      	bls.n	80039e2 <_malloc_r+0xca>
 80039b2:	1961      	adds	r1, r4, r5
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	6025      	str	r5, [r4, #0]
 80039b8:	bf18      	it	ne
 80039ba:	6059      	strne	r1, [r3, #4]
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	bf08      	it	eq
 80039c0:	f8c8 1000 	streq.w	r1, [r8]
 80039c4:	5162      	str	r2, [r4, r5]
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	4638      	mov	r0, r7
 80039ca:	f104 060b 	add.w	r6, r4, #11
 80039ce:	f000 f829 	bl	8003a24 <__malloc_unlock>
 80039d2:	f026 0607 	bic.w	r6, r6, #7
 80039d6:	1d23      	adds	r3, r4, #4
 80039d8:	1af2      	subs	r2, r6, r3
 80039da:	d0ae      	beq.n	800393a <_malloc_r+0x22>
 80039dc:	1b9b      	subs	r3, r3, r6
 80039de:	50a3      	str	r3, [r4, r2]
 80039e0:	e7ab      	b.n	800393a <_malloc_r+0x22>
 80039e2:	42a3      	cmp	r3, r4
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	d1dd      	bne.n	80039a4 <_malloc_r+0x8c>
 80039e8:	f8c8 2000 	str.w	r2, [r8]
 80039ec:	e7ec      	b.n	80039c8 <_malloc_r+0xb0>
 80039ee:	4623      	mov	r3, r4
 80039f0:	6864      	ldr	r4, [r4, #4]
 80039f2:	e7ac      	b.n	800394e <_malloc_r+0x36>
 80039f4:	4634      	mov	r4, r6
 80039f6:	6876      	ldr	r6, [r6, #4]
 80039f8:	e7b4      	b.n	8003964 <_malloc_r+0x4c>
 80039fa:	4613      	mov	r3, r2
 80039fc:	e7cc      	b.n	8003998 <_malloc_r+0x80>
 80039fe:	230c      	movs	r3, #12
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4638      	mov	r0, r7
 8003a04:	f000 f80e 	bl	8003a24 <__malloc_unlock>
 8003a08:	e797      	b.n	800393a <_malloc_r+0x22>
 8003a0a:	6025      	str	r5, [r4, #0]
 8003a0c:	e7dc      	b.n	80039c8 <_malloc_r+0xb0>
 8003a0e:	605b      	str	r3, [r3, #4]
 8003a10:	deff      	udf	#255	; 0xff
 8003a12:	bf00      	nop
 8003a14:	200006ec 	.word	0x200006ec

08003a18 <__malloc_lock>:
 8003a18:	4801      	ldr	r0, [pc, #4]	; (8003a20 <__malloc_lock+0x8>)
 8003a1a:	f7ff bf0f 	b.w	800383c <__retarget_lock_acquire_recursive>
 8003a1e:	bf00      	nop
 8003a20:	200006e8 	.word	0x200006e8

08003a24 <__malloc_unlock>:
 8003a24:	4801      	ldr	r0, [pc, #4]	; (8003a2c <__malloc_unlock+0x8>)
 8003a26:	f7ff bf0a 	b.w	800383e <__retarget_lock_release_recursive>
 8003a2a:	bf00      	nop
 8003a2c:	200006e8 	.word	0x200006e8

08003a30 <__ssputs_r>:
 8003a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	688e      	ldr	r6, [r1, #8]
 8003a36:	461f      	mov	r7, r3
 8003a38:	42be      	cmp	r6, r7
 8003a3a:	680b      	ldr	r3, [r1, #0]
 8003a3c:	4682      	mov	sl, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	4690      	mov	r8, r2
 8003a42:	d82c      	bhi.n	8003a9e <__ssputs_r+0x6e>
 8003a44:	898a      	ldrh	r2, [r1, #12]
 8003a46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a4a:	d026      	beq.n	8003a9a <__ssputs_r+0x6a>
 8003a4c:	6965      	ldr	r5, [r4, #20]
 8003a4e:	6909      	ldr	r1, [r1, #16]
 8003a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a54:	eba3 0901 	sub.w	r9, r3, r1
 8003a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a5c:	1c7b      	adds	r3, r7, #1
 8003a5e:	444b      	add	r3, r9
 8003a60:	106d      	asrs	r5, r5, #1
 8003a62:	429d      	cmp	r5, r3
 8003a64:	bf38      	it	cc
 8003a66:	461d      	movcc	r5, r3
 8003a68:	0553      	lsls	r3, r2, #21
 8003a6a:	d527      	bpl.n	8003abc <__ssputs_r+0x8c>
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	f7ff ff53 	bl	8003918 <_malloc_r>
 8003a72:	4606      	mov	r6, r0
 8003a74:	b360      	cbz	r0, 8003ad0 <__ssputs_r+0xa0>
 8003a76:	6921      	ldr	r1, [r4, #16]
 8003a78:	464a      	mov	r2, r9
 8003a7a:	f000 faeb 	bl	8004054 <memcpy>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	6126      	str	r6, [r4, #16]
 8003a8c:	6165      	str	r5, [r4, #20]
 8003a8e:	444e      	add	r6, r9
 8003a90:	eba5 0509 	sub.w	r5, r5, r9
 8003a94:	6026      	str	r6, [r4, #0]
 8003a96:	60a5      	str	r5, [r4, #8]
 8003a98:	463e      	mov	r6, r7
 8003a9a:	42be      	cmp	r6, r7
 8003a9c:	d900      	bls.n	8003aa0 <__ssputs_r+0x70>
 8003a9e:	463e      	mov	r6, r7
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	4632      	mov	r2, r6
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	f000 faab 	bl	8004000 <memmove>
 8003aaa:	68a3      	ldr	r3, [r4, #8]
 8003aac:	1b9b      	subs	r3, r3, r6
 8003aae:	60a3      	str	r3, [r4, #8]
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	4433      	add	r3, r6
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	462a      	mov	r2, r5
 8003abe:	f000 fad7 	bl	8004070 <_realloc_r>
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d1e0      	bne.n	8003a8a <__ssputs_r+0x5a>
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	4650      	mov	r0, sl
 8003acc:	f7ff feb8 	bl	8003840 <_free_r>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	f8ca 3000 	str.w	r3, [sl]
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	e7e9      	b.n	8003ab8 <__ssputs_r+0x88>

08003ae4 <_svfiprintf_r>:
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	4698      	mov	r8, r3
 8003aea:	898b      	ldrh	r3, [r1, #12]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	b09d      	sub	sp, #116	; 0x74
 8003af0:	4607      	mov	r7, r0
 8003af2:	460d      	mov	r5, r1
 8003af4:	4614      	mov	r4, r2
 8003af6:	d50e      	bpl.n	8003b16 <_svfiprintf_r+0x32>
 8003af8:	690b      	ldr	r3, [r1, #16]
 8003afa:	b963      	cbnz	r3, 8003b16 <_svfiprintf_r+0x32>
 8003afc:	2140      	movs	r1, #64	; 0x40
 8003afe:	f7ff ff0b 	bl	8003918 <_malloc_r>
 8003b02:	6028      	str	r0, [r5, #0]
 8003b04:	6128      	str	r0, [r5, #16]
 8003b06:	b920      	cbnz	r0, 8003b12 <_svfiprintf_r+0x2e>
 8003b08:	230c      	movs	r3, #12
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	e0d0      	b.n	8003cb4 <_svfiprintf_r+0x1d0>
 8003b12:	2340      	movs	r3, #64	; 0x40
 8003b14:	616b      	str	r3, [r5, #20]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b24:	2330      	movs	r3, #48	; 0x30
 8003b26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ccc <_svfiprintf_r+0x1e8>
 8003b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b2e:	f04f 0901 	mov.w	r9, #1
 8003b32:	4623      	mov	r3, r4
 8003b34:	469a      	mov	sl, r3
 8003b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b3a:	b10a      	cbz	r2, 8003b40 <_svfiprintf_r+0x5c>
 8003b3c:	2a25      	cmp	r2, #37	; 0x25
 8003b3e:	d1f9      	bne.n	8003b34 <_svfiprintf_r+0x50>
 8003b40:	ebba 0b04 	subs.w	fp, sl, r4
 8003b44:	d00b      	beq.n	8003b5e <_svfiprintf_r+0x7a>
 8003b46:	465b      	mov	r3, fp
 8003b48:	4622      	mov	r2, r4
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f7ff ff6f 	bl	8003a30 <__ssputs_r>
 8003b52:	3001      	adds	r0, #1
 8003b54:	f000 80a9 	beq.w	8003caa <_svfiprintf_r+0x1c6>
 8003b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b5a:	445a      	add	r2, fp
 8003b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80a1 	beq.w	8003caa <_svfiprintf_r+0x1c6>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b72:	f10a 0a01 	add.w	sl, sl, #1
 8003b76:	9304      	str	r3, [sp, #16]
 8003b78:	9307      	str	r3, [sp, #28]
 8003b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b80:	4654      	mov	r4, sl
 8003b82:	2205      	movs	r2, #5
 8003b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b88:	4850      	ldr	r0, [pc, #320]	; (8003ccc <_svfiprintf_r+0x1e8>)
 8003b8a:	f7fc fb29 	bl	80001e0 <memchr>
 8003b8e:	9a04      	ldr	r2, [sp, #16]
 8003b90:	b9d8      	cbnz	r0, 8003bca <_svfiprintf_r+0xe6>
 8003b92:	06d0      	lsls	r0, r2, #27
 8003b94:	bf44      	itt	mi
 8003b96:	2320      	movmi	r3, #32
 8003b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b9c:	0711      	lsls	r1, r2, #28
 8003b9e:	bf44      	itt	mi
 8003ba0:	232b      	movmi	r3, #43	; 0x2b
 8003ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8003baa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bac:	d015      	beq.n	8003bda <_svfiprintf_r+0xf6>
 8003bae:	9a07      	ldr	r2, [sp, #28]
 8003bb0:	4654      	mov	r4, sl
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f04f 0c0a 	mov.w	ip, #10
 8003bb8:	4621      	mov	r1, r4
 8003bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bbe:	3b30      	subs	r3, #48	; 0x30
 8003bc0:	2b09      	cmp	r3, #9
 8003bc2:	d94d      	bls.n	8003c60 <_svfiprintf_r+0x17c>
 8003bc4:	b1b0      	cbz	r0, 8003bf4 <_svfiprintf_r+0x110>
 8003bc6:	9207      	str	r2, [sp, #28]
 8003bc8:	e014      	b.n	8003bf4 <_svfiprintf_r+0x110>
 8003bca:	eba0 0308 	sub.w	r3, r0, r8
 8003bce:	fa09 f303 	lsl.w	r3, r9, r3
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	46a2      	mov	sl, r4
 8003bd8:	e7d2      	b.n	8003b80 <_svfiprintf_r+0x9c>
 8003bda:	9b03      	ldr	r3, [sp, #12]
 8003bdc:	1d19      	adds	r1, r3, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	9103      	str	r1, [sp, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bfbb      	ittet	lt
 8003be6:	425b      	neglt	r3, r3
 8003be8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bec:	9307      	strge	r3, [sp, #28]
 8003bee:	9307      	strlt	r3, [sp, #28]
 8003bf0:	bfb8      	it	lt
 8003bf2:	9204      	strlt	r2, [sp, #16]
 8003bf4:	7823      	ldrb	r3, [r4, #0]
 8003bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bf8:	d10c      	bne.n	8003c14 <_svfiprintf_r+0x130>
 8003bfa:	7863      	ldrb	r3, [r4, #1]
 8003bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfe:	d134      	bne.n	8003c6a <_svfiprintf_r+0x186>
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	1d1a      	adds	r2, r3, #4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	9203      	str	r2, [sp, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bfb8      	it	lt
 8003c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c10:	3402      	adds	r4, #2
 8003c12:	9305      	str	r3, [sp, #20]
 8003c14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cdc <_svfiprintf_r+0x1f8>
 8003c18:	7821      	ldrb	r1, [r4, #0]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	4650      	mov	r0, sl
 8003c1e:	f7fc fadf 	bl	80001e0 <memchr>
 8003c22:	b138      	cbz	r0, 8003c34 <_svfiprintf_r+0x150>
 8003c24:	9b04      	ldr	r3, [sp, #16]
 8003c26:	eba0 000a 	sub.w	r0, r0, sl
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	4082      	lsls	r2, r0
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	3401      	adds	r4, #1
 8003c32:	9304      	str	r3, [sp, #16]
 8003c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c38:	4825      	ldr	r0, [pc, #148]	; (8003cd0 <_svfiprintf_r+0x1ec>)
 8003c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c3e:	2206      	movs	r2, #6
 8003c40:	f7fc face 	bl	80001e0 <memchr>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d038      	beq.n	8003cba <_svfiprintf_r+0x1d6>
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <_svfiprintf_r+0x1f0>)
 8003c4a:	bb1b      	cbnz	r3, 8003c94 <_svfiprintf_r+0x1b0>
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	3307      	adds	r3, #7
 8003c50:	f023 0307 	bic.w	r3, r3, #7
 8003c54:	3308      	adds	r3, #8
 8003c56:	9303      	str	r3, [sp, #12]
 8003c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5a:	4433      	add	r3, r6
 8003c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c5e:	e768      	b.n	8003b32 <_svfiprintf_r+0x4e>
 8003c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c64:	460c      	mov	r4, r1
 8003c66:	2001      	movs	r0, #1
 8003c68:	e7a6      	b.n	8003bb8 <_svfiprintf_r+0xd4>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	3401      	adds	r4, #1
 8003c6e:	9305      	str	r3, [sp, #20]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f04f 0c0a 	mov.w	ip, #10
 8003c76:	4620      	mov	r0, r4
 8003c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c7c:	3a30      	subs	r2, #48	; 0x30
 8003c7e:	2a09      	cmp	r2, #9
 8003c80:	d903      	bls.n	8003c8a <_svfiprintf_r+0x1a6>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0c6      	beq.n	8003c14 <_svfiprintf_r+0x130>
 8003c86:	9105      	str	r1, [sp, #20]
 8003c88:	e7c4      	b.n	8003c14 <_svfiprintf_r+0x130>
 8003c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c8e:	4604      	mov	r4, r0
 8003c90:	2301      	movs	r3, #1
 8003c92:	e7f0      	b.n	8003c76 <_svfiprintf_r+0x192>
 8003c94:	ab03      	add	r3, sp, #12
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	462a      	mov	r2, r5
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <_svfiprintf_r+0x1f4>)
 8003c9c:	a904      	add	r1, sp, #16
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f3af 8000 	nop.w
 8003ca4:	1c42      	adds	r2, r0, #1
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	d1d6      	bne.n	8003c58 <_svfiprintf_r+0x174>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	065b      	lsls	r3, r3, #25
 8003cae:	f53f af2d 	bmi.w	8003b0c <_svfiprintf_r+0x28>
 8003cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb4:	b01d      	add	sp, #116	; 0x74
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	ab03      	add	r3, sp, #12
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	462a      	mov	r2, r5
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <_svfiprintf_r+0x1f4>)
 8003cc2:	a904      	add	r1, sp, #16
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f000 f879 	bl	8003dbc <_printf_i>
 8003cca:	e7eb      	b.n	8003ca4 <_svfiprintf_r+0x1c0>
 8003ccc:	08004214 	.word	0x08004214
 8003cd0:	0800421e 	.word	0x0800421e
 8003cd4:	00000000 	.word	0x00000000
 8003cd8:	08003a31 	.word	0x08003a31
 8003cdc:	0800421a 	.word	0x0800421a

08003ce0 <_printf_common>:
 8003ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	688a      	ldr	r2, [r1, #8]
 8003cea:	690b      	ldr	r3, [r1, #16]
 8003cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	bfb8      	it	lt
 8003cf4:	4613      	movlt	r3, r2
 8003cf6:	6033      	str	r3, [r6, #0]
 8003cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	b10a      	cbz	r2, 8003d06 <_printf_common+0x26>
 8003d02:	3301      	adds	r3, #1
 8003d04:	6033      	str	r3, [r6, #0]
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	0699      	lsls	r1, r3, #26
 8003d0a:	bf42      	ittt	mi
 8003d0c:	6833      	ldrmi	r3, [r6, #0]
 8003d0e:	3302      	addmi	r3, #2
 8003d10:	6033      	strmi	r3, [r6, #0]
 8003d12:	6825      	ldr	r5, [r4, #0]
 8003d14:	f015 0506 	ands.w	r5, r5, #6
 8003d18:	d106      	bne.n	8003d28 <_printf_common+0x48>
 8003d1a:	f104 0a19 	add.w	sl, r4, #25
 8003d1e:	68e3      	ldr	r3, [r4, #12]
 8003d20:	6832      	ldr	r2, [r6, #0]
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	42ab      	cmp	r3, r5
 8003d26:	dc26      	bgt.n	8003d76 <_printf_common+0x96>
 8003d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d2c:	1e13      	subs	r3, r2, #0
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	bf18      	it	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	0692      	lsls	r2, r2, #26
 8003d36:	d42b      	bmi.n	8003d90 <_printf_common+0xb0>
 8003d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	4638      	mov	r0, r7
 8003d40:	47c0      	blx	r8
 8003d42:	3001      	adds	r0, #1
 8003d44:	d01e      	beq.n	8003d84 <_printf_common+0xa4>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	f003 0306 	and.w	r3, r3, #6
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	bf02      	ittt	eq
 8003d52:	68e5      	ldreq	r5, [r4, #12]
 8003d54:	6833      	ldreq	r3, [r6, #0]
 8003d56:	1aed      	subeq	r5, r5, r3
 8003d58:	68a3      	ldr	r3, [r4, #8]
 8003d5a:	bf0c      	ite	eq
 8003d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d60:	2500      	movne	r5, #0
 8003d62:	4293      	cmp	r3, r2
 8003d64:	bfc4      	itt	gt
 8003d66:	1a9b      	subgt	r3, r3, r2
 8003d68:	18ed      	addgt	r5, r5, r3
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	341a      	adds	r4, #26
 8003d6e:	42b5      	cmp	r5, r6
 8003d70:	d11a      	bne.n	8003da8 <_printf_common+0xc8>
 8003d72:	2000      	movs	r0, #0
 8003d74:	e008      	b.n	8003d88 <_printf_common+0xa8>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4652      	mov	r2, sl
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	47c0      	blx	r8
 8003d80:	3001      	adds	r0, #1
 8003d82:	d103      	bne.n	8003d8c <_printf_common+0xac>
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8c:	3501      	adds	r5, #1
 8003d8e:	e7c6      	b.n	8003d1e <_printf_common+0x3e>
 8003d90:	18e1      	adds	r1, r4, r3
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	2030      	movs	r0, #48	; 0x30
 8003d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d9a:	4422      	add	r2, r4
 8003d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da4:	3302      	adds	r3, #2
 8003da6:	e7c7      	b.n	8003d38 <_printf_common+0x58>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4622      	mov	r2, r4
 8003dac:	4649      	mov	r1, r9
 8003dae:	4638      	mov	r0, r7
 8003db0:	47c0      	blx	r8
 8003db2:	3001      	adds	r0, #1
 8003db4:	d0e6      	beq.n	8003d84 <_printf_common+0xa4>
 8003db6:	3601      	adds	r6, #1
 8003db8:	e7d9      	b.n	8003d6e <_printf_common+0x8e>
	...

08003dbc <_printf_i>:
 8003dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	7e0f      	ldrb	r7, [r1, #24]
 8003dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dc4:	2f78      	cmp	r7, #120	; 0x78
 8003dc6:	4691      	mov	r9, r2
 8003dc8:	4680      	mov	r8, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	469a      	mov	sl, r3
 8003dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dd2:	d807      	bhi.n	8003de4 <_printf_i+0x28>
 8003dd4:	2f62      	cmp	r7, #98	; 0x62
 8003dd6:	d80a      	bhi.n	8003dee <_printf_i+0x32>
 8003dd8:	2f00      	cmp	r7, #0
 8003dda:	f000 80d4 	beq.w	8003f86 <_printf_i+0x1ca>
 8003dde:	2f58      	cmp	r7, #88	; 0x58
 8003de0:	f000 80c0 	beq.w	8003f64 <_printf_i+0x1a8>
 8003de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dec:	e03a      	b.n	8003e64 <_printf_i+0xa8>
 8003dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003df2:	2b15      	cmp	r3, #21
 8003df4:	d8f6      	bhi.n	8003de4 <_printf_i+0x28>
 8003df6:	a101      	add	r1, pc, #4	; (adr r1, 8003dfc <_printf_i+0x40>)
 8003df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e69 	.word	0x08003e69
 8003e04:	08003de5 	.word	0x08003de5
 8003e08:	08003de5 	.word	0x08003de5
 8003e0c:	08003de5 	.word	0x08003de5
 8003e10:	08003de5 	.word	0x08003de5
 8003e14:	08003e69 	.word	0x08003e69
 8003e18:	08003de5 	.word	0x08003de5
 8003e1c:	08003de5 	.word	0x08003de5
 8003e20:	08003de5 	.word	0x08003de5
 8003e24:	08003de5 	.word	0x08003de5
 8003e28:	08003f6d 	.word	0x08003f6d
 8003e2c:	08003e95 	.word	0x08003e95
 8003e30:	08003f27 	.word	0x08003f27
 8003e34:	08003de5 	.word	0x08003de5
 8003e38:	08003de5 	.word	0x08003de5
 8003e3c:	08003f8f 	.word	0x08003f8f
 8003e40:	08003de5 	.word	0x08003de5
 8003e44:	08003e95 	.word	0x08003e95
 8003e48:	08003de5 	.word	0x08003de5
 8003e4c:	08003de5 	.word	0x08003de5
 8003e50:	08003f2f 	.word	0x08003f2f
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	1d1a      	adds	r2, r3, #4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	602a      	str	r2, [r5, #0]
 8003e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e64:	2301      	movs	r3, #1
 8003e66:	e09f      	b.n	8003fa8 <_printf_i+0x1ec>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	0607      	lsls	r7, r0, #24
 8003e6e:	f103 0104 	add.w	r1, r3, #4
 8003e72:	6029      	str	r1, [r5, #0]
 8003e74:	d501      	bpl.n	8003e7a <_printf_i+0xbe>
 8003e76:	681e      	ldr	r6, [r3, #0]
 8003e78:	e003      	b.n	8003e82 <_printf_i+0xc6>
 8003e7a:	0646      	lsls	r6, r0, #25
 8003e7c:	d5fb      	bpl.n	8003e76 <_printf_i+0xba>
 8003e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	da03      	bge.n	8003e8e <_printf_i+0xd2>
 8003e86:	232d      	movs	r3, #45	; 0x2d
 8003e88:	4276      	negs	r6, r6
 8003e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8e:	485a      	ldr	r0, [pc, #360]	; (8003ff8 <_printf_i+0x23c>)
 8003e90:	230a      	movs	r3, #10
 8003e92:	e012      	b.n	8003eba <_printf_i+0xfe>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	1d19      	adds	r1, r3, #4
 8003e9a:	6029      	str	r1, [r5, #0]
 8003e9c:	0605      	lsls	r5, r0, #24
 8003e9e:	d501      	bpl.n	8003ea4 <_printf_i+0xe8>
 8003ea0:	681e      	ldr	r6, [r3, #0]
 8003ea2:	e002      	b.n	8003eaa <_printf_i+0xee>
 8003ea4:	0641      	lsls	r1, r0, #25
 8003ea6:	d5fb      	bpl.n	8003ea0 <_printf_i+0xe4>
 8003ea8:	881e      	ldrh	r6, [r3, #0]
 8003eaa:	4853      	ldr	r0, [pc, #332]	; (8003ff8 <_printf_i+0x23c>)
 8003eac:	2f6f      	cmp	r7, #111	; 0x6f
 8003eae:	bf0c      	ite	eq
 8003eb0:	2308      	moveq	r3, #8
 8003eb2:	230a      	movne	r3, #10
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eba:	6865      	ldr	r5, [r4, #4]
 8003ebc:	60a5      	str	r5, [r4, #8]
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	bfa2      	ittt	ge
 8003ec2:	6821      	ldrge	r1, [r4, #0]
 8003ec4:	f021 0104 	bicge.w	r1, r1, #4
 8003ec8:	6021      	strge	r1, [r4, #0]
 8003eca:	b90e      	cbnz	r6, 8003ed0 <_printf_i+0x114>
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	d04b      	beq.n	8003f68 <_printf_i+0x1ac>
 8003ed0:	4615      	mov	r5, r2
 8003ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8003eda:	5dc7      	ldrb	r7, [r0, r7]
 8003edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ee0:	4637      	mov	r7, r6
 8003ee2:	42bb      	cmp	r3, r7
 8003ee4:	460e      	mov	r6, r1
 8003ee6:	d9f4      	bls.n	8003ed2 <_printf_i+0x116>
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d10b      	bne.n	8003f04 <_printf_i+0x148>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	07de      	lsls	r6, r3, #31
 8003ef0:	d508      	bpl.n	8003f04 <_printf_i+0x148>
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	6861      	ldr	r1, [r4, #4]
 8003ef6:	4299      	cmp	r1, r3
 8003ef8:	bfde      	ittt	le
 8003efa:	2330      	movle	r3, #48	; 0x30
 8003efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f04:	1b52      	subs	r2, r2, r5
 8003f06:	6122      	str	r2, [r4, #16]
 8003f08:	f8cd a000 	str.w	sl, [sp]
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	aa03      	add	r2, sp, #12
 8003f10:	4621      	mov	r1, r4
 8003f12:	4640      	mov	r0, r8
 8003f14:	f7ff fee4 	bl	8003ce0 <_printf_common>
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d14a      	bne.n	8003fb2 <_printf_i+0x1f6>
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	b004      	add	sp, #16
 8003f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	4833      	ldr	r0, [pc, #204]	; (8003ffc <_printf_i+0x240>)
 8003f30:	2778      	movs	r7, #120	; 0x78
 8003f32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	6829      	ldr	r1, [r5, #0]
 8003f3a:	061f      	lsls	r7, r3, #24
 8003f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f40:	d402      	bmi.n	8003f48 <_printf_i+0x18c>
 8003f42:	065f      	lsls	r7, r3, #25
 8003f44:	bf48      	it	mi
 8003f46:	b2b6      	uxthmi	r6, r6
 8003f48:	07df      	lsls	r7, r3, #31
 8003f4a:	bf48      	it	mi
 8003f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f50:	6029      	str	r1, [r5, #0]
 8003f52:	bf48      	it	mi
 8003f54:	6023      	strmi	r3, [r4, #0]
 8003f56:	b91e      	cbnz	r6, 8003f60 <_printf_i+0x1a4>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	2310      	movs	r3, #16
 8003f62:	e7a7      	b.n	8003eb4 <_printf_i+0xf8>
 8003f64:	4824      	ldr	r0, [pc, #144]	; (8003ff8 <_printf_i+0x23c>)
 8003f66:	e7e4      	b.n	8003f32 <_printf_i+0x176>
 8003f68:	4615      	mov	r5, r2
 8003f6a:	e7bd      	b.n	8003ee8 <_printf_i+0x12c>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	6826      	ldr	r6, [r4, #0]
 8003f70:	6961      	ldr	r1, [r4, #20]
 8003f72:	1d18      	adds	r0, r3, #4
 8003f74:	6028      	str	r0, [r5, #0]
 8003f76:	0635      	lsls	r5, r6, #24
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	d501      	bpl.n	8003f80 <_printf_i+0x1c4>
 8003f7c:	6019      	str	r1, [r3, #0]
 8003f7e:	e002      	b.n	8003f86 <_printf_i+0x1ca>
 8003f80:	0670      	lsls	r0, r6, #25
 8003f82:	d5fb      	bpl.n	8003f7c <_printf_i+0x1c0>
 8003f84:	8019      	strh	r1, [r3, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	6123      	str	r3, [r4, #16]
 8003f8a:	4615      	mov	r5, r2
 8003f8c:	e7bc      	b.n	8003f08 <_printf_i+0x14c>
 8003f8e:	682b      	ldr	r3, [r5, #0]
 8003f90:	1d1a      	adds	r2, r3, #4
 8003f92:	602a      	str	r2, [r5, #0]
 8003f94:	681d      	ldr	r5, [r3, #0]
 8003f96:	6862      	ldr	r2, [r4, #4]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7fc f920 	bl	80001e0 <memchr>
 8003fa0:	b108      	cbz	r0, 8003fa6 <_printf_i+0x1ea>
 8003fa2:	1b40      	subs	r0, r0, r5
 8003fa4:	6060      	str	r0, [r4, #4]
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	2300      	movs	r3, #0
 8003fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb0:	e7aa      	b.n	8003f08 <_printf_i+0x14c>
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	462a      	mov	r2, r5
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	4640      	mov	r0, r8
 8003fba:	47d0      	blx	sl
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d0ad      	beq.n	8003f1c <_printf_i+0x160>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	079b      	lsls	r3, r3, #30
 8003fc4:	d413      	bmi.n	8003fee <_printf_i+0x232>
 8003fc6:	68e0      	ldr	r0, [r4, #12]
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	4298      	cmp	r0, r3
 8003fcc:	bfb8      	it	lt
 8003fce:	4618      	movlt	r0, r3
 8003fd0:	e7a6      	b.n	8003f20 <_printf_i+0x164>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	4640      	mov	r0, r8
 8003fda:	47d0      	blx	sl
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d09d      	beq.n	8003f1c <_printf_i+0x160>
 8003fe0:	3501      	adds	r5, #1
 8003fe2:	68e3      	ldr	r3, [r4, #12]
 8003fe4:	9903      	ldr	r1, [sp, #12]
 8003fe6:	1a5b      	subs	r3, r3, r1
 8003fe8:	42ab      	cmp	r3, r5
 8003fea:	dcf2      	bgt.n	8003fd2 <_printf_i+0x216>
 8003fec:	e7eb      	b.n	8003fc6 <_printf_i+0x20a>
 8003fee:	2500      	movs	r5, #0
 8003ff0:	f104 0619 	add.w	r6, r4, #25
 8003ff4:	e7f5      	b.n	8003fe2 <_printf_i+0x226>
 8003ff6:	bf00      	nop
 8003ff8:	08004225 	.word	0x08004225
 8003ffc:	08004236 	.word	0x08004236

08004000 <memmove>:
 8004000:	4288      	cmp	r0, r1
 8004002:	b510      	push	{r4, lr}
 8004004:	eb01 0402 	add.w	r4, r1, r2
 8004008:	d902      	bls.n	8004010 <memmove+0x10>
 800400a:	4284      	cmp	r4, r0
 800400c:	4623      	mov	r3, r4
 800400e:	d807      	bhi.n	8004020 <memmove+0x20>
 8004010:	1e43      	subs	r3, r0, #1
 8004012:	42a1      	cmp	r1, r4
 8004014:	d008      	beq.n	8004028 <memmove+0x28>
 8004016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800401a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800401e:	e7f8      	b.n	8004012 <memmove+0x12>
 8004020:	4402      	add	r2, r0
 8004022:	4601      	mov	r1, r0
 8004024:	428a      	cmp	r2, r1
 8004026:	d100      	bne.n	800402a <memmove+0x2a>
 8004028:	bd10      	pop	{r4, pc}
 800402a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800402e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004032:	e7f7      	b.n	8004024 <memmove+0x24>

08004034 <_sbrk_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4d06      	ldr	r5, [pc, #24]	; (8004050 <_sbrk_r+0x1c>)
 8004038:	2300      	movs	r3, #0
 800403a:	4604      	mov	r4, r0
 800403c:	4608      	mov	r0, r1
 800403e:	602b      	str	r3, [r5, #0]
 8004040:	f7fc fe4c 	bl	8000cdc <_sbrk>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_sbrk_r+0x1a>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_sbrk_r+0x1a>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	200006e4 	.word	0x200006e4

08004054 <memcpy>:
 8004054:	440a      	add	r2, r1
 8004056:	4291      	cmp	r1, r2
 8004058:	f100 33ff 	add.w	r3, r0, #4294967295
 800405c:	d100      	bne.n	8004060 <memcpy+0xc>
 800405e:	4770      	bx	lr
 8004060:	b510      	push	{r4, lr}
 8004062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800406a:	4291      	cmp	r1, r2
 800406c:	d1f9      	bne.n	8004062 <memcpy+0xe>
 800406e:	bd10      	pop	{r4, pc}

08004070 <_realloc_r>:
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	4680      	mov	r8, r0
 8004076:	4614      	mov	r4, r2
 8004078:	460e      	mov	r6, r1
 800407a:	b921      	cbnz	r1, 8004086 <_realloc_r+0x16>
 800407c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004080:	4611      	mov	r1, r2
 8004082:	f7ff bc49 	b.w	8003918 <_malloc_r>
 8004086:	b92a      	cbnz	r2, 8004094 <_realloc_r+0x24>
 8004088:	f7ff fbda 	bl	8003840 <_free_r>
 800408c:	4625      	mov	r5, r4
 800408e:	4628      	mov	r0, r5
 8004090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004094:	f000 f81b 	bl	80040ce <_malloc_usable_size_r>
 8004098:	4284      	cmp	r4, r0
 800409a:	4607      	mov	r7, r0
 800409c:	d802      	bhi.n	80040a4 <_realloc_r+0x34>
 800409e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040a2:	d812      	bhi.n	80040ca <_realloc_r+0x5a>
 80040a4:	4621      	mov	r1, r4
 80040a6:	4640      	mov	r0, r8
 80040a8:	f7ff fc36 	bl	8003918 <_malloc_r>
 80040ac:	4605      	mov	r5, r0
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d0ed      	beq.n	800408e <_realloc_r+0x1e>
 80040b2:	42bc      	cmp	r4, r7
 80040b4:	4622      	mov	r2, r4
 80040b6:	4631      	mov	r1, r6
 80040b8:	bf28      	it	cs
 80040ba:	463a      	movcs	r2, r7
 80040bc:	f7ff ffca 	bl	8004054 <memcpy>
 80040c0:	4631      	mov	r1, r6
 80040c2:	4640      	mov	r0, r8
 80040c4:	f7ff fbbc 	bl	8003840 <_free_r>
 80040c8:	e7e1      	b.n	800408e <_realloc_r+0x1e>
 80040ca:	4635      	mov	r5, r6
 80040cc:	e7df      	b.n	800408e <_realloc_r+0x1e>

080040ce <_malloc_usable_size_r>:
 80040ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d2:	1f18      	subs	r0, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bfbc      	itt	lt
 80040d8:	580b      	ldrlt	r3, [r1, r0]
 80040da:	18c0      	addlt	r0, r0, r3
 80040dc:	4770      	bx	lr
	...

080040e0 <_init>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr

080040ec <_fini>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr
