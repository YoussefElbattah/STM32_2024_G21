
IKS01A3_LoraTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08012c70  08012c70  00022c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013300  08013300  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  08013300  08013300  00023300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013308  08013308  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013308  08013308  00023308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801330c  0801330c  0002330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08013310  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000380  08013690  00030380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  08013690  000309e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 13 .debug_line   000268af  00000000  00000000  000303f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a8  00000000  00000000  00056ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00034d17  00000000  00000000  00056d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004a99  00000000  00000000  0008ba61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c80  00000000  00000000  00090500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100107  00000000  00000000  00093180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002230  00000000  00000000  00193287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ab5d  00000000  00000000  001954b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d77c  00000000  00000000  001c0014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012c58 	.word	0x08012c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	08012c58 	.word	0x08012c58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f008 fd86 	bl	8009b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f00d fac5 	bl	800e5ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f000 fc09 	bl	8001838 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001028:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8001034:	08013310 	.word	0x08013310
  ldr r2, =_sbss
 8001038:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 800103c:	200009e4 	.word	0x200009e4

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>

08001042 <MX_MEMS_Init>:
static void Press_Sensor_Handler_G21(data_send *dataSend);
static void Hum_Sensor_Handler_G21(data_send *dataSend);
static void lora_init(void);
static void lora_send(char *dataSend);
void MX_MEMS_Init(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
	MX_IKS01A3_DataLogTerminal_Init_G21();
 8001046:	f000 f80b 	bl	8001060 <MX_IKS01A3_DataLogTerminal_Init_G21>
	lora_init();
 800104a:	f000 fb4b 	bl	80016e4 <lora_init>
  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

	MX_IKS01A3_DataLogTerminal_Process_G21();
 8001056:	f000 f8ab 	bl	80011b0 <MX_IKS01A3_DataLogTerminal_Process_G21>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_IKS01A3_DataLogTerminal_Init_G21>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init_G21(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af04      	add	r7, sp, #16

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8001066:	2000      	movs	r0, #0
 8001068:	f008 fb5e 	bl	8009728 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800106c:	2101      	movs	r1, #1
 800106e:	2000      	movs	r0, #0
 8001070:	f008 fbaa 	bl	80097c8 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8001074:	2000      	movs	r0, #0
 8001076:	f008 fbfb 	bl	8009870 <BSP_PB_GetState>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_IKS01A3_DataLogTerminal_Init_G21+0x10c>)
 800108a:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800108c:	2000      	movs	r0, #0
 800108e:	f008 fc4d 	bl	800992c <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8001092:	2103      	movs	r1, #3
 8001094:	2000      	movs	r0, #0
 8001096:	f007 ffcd 	bl	8009034 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_GetCapabilities(0, &MotionCapabilities[0]);
 800109a:	4935      	ldr	r1, [pc, #212]	; (8001170 <MX_IKS01A3_DataLogTerminal_Init_G21+0x110>)
 800109c:	2000      	movs	r0, #0
 800109e:	f008 f8c5 	bl	800922c <IKS01A3_MOTION_SENSOR_GetCapabilities>
  snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             0, MotionCapabilities[0].Acc, MotionCapabilities[0].Gyro, MotionCapabilities[0].Magneto, MotionCapabilities[0].LowPower);
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <MX_IKS01A3_DataLogTerminal_Init_G21+0x110>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
  snprintf(dataOut, MAX_BUF_SIZE,
 80010a6:	461a      	mov	r2, r3
             0, MotionCapabilities[0].Acc, MotionCapabilities[0].Gyro, MotionCapabilities[0].Magneto, MotionCapabilities[0].LowPower);
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MX_IKS01A3_DataLogTerminal_Init_G21+0x110>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
  snprintf(dataOut, MAX_BUF_SIZE,
 80010ac:	4619      	mov	r1, r3
             0, MotionCapabilities[0].Acc, MotionCapabilities[0].Gyro, MotionCapabilities[0].Magneto, MotionCapabilities[0].LowPower);
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <MX_IKS01A3_DataLogTerminal_Init_G21+0x110>)
 80010b0:	789b      	ldrb	r3, [r3, #2]
  snprintf(dataOut, MAX_BUF_SIZE,
 80010b2:	4618      	mov	r0, r3
             0, MotionCapabilities[0].Acc, MotionCapabilities[0].Gyro, MotionCapabilities[0].Magneto, MotionCapabilities[0].LowPower);
 80010b4:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <MX_IKS01A3_DataLogTerminal_Init_G21+0x110>)
 80010b6:	78db      	ldrb	r3, [r3, #3]
  snprintf(dataOut, MAX_BUF_SIZE,
 80010b8:	9303      	str	r3, [sp, #12]
 80010ba:	9002      	str	r0, [sp, #8]
 80010bc:	9101      	str	r1, [sp, #4]
 80010be:	9200      	str	r2, [sp, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <MX_IKS01A3_DataLogTerminal_Init_G21+0x114>)
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	482b      	ldr	r0, [pc, #172]	; (8001178 <MX_IKS01A3_DataLogTerminal_Init_G21+0x118>)
 80010ca:	f00d f97f 	bl	800e3cc <sniprintf>
  printf("%s", dataOut);
 80010ce:	492a      	ldr	r1, [pc, #168]	; (8001178 <MX_IKS01A3_DataLogTerminal_Init_G21+0x118>)
 80010d0:	482a      	ldr	r0, [pc, #168]	; (800117c <MX_IKS01A3_DataLogTerminal_Init_G21+0x11c>)
 80010d2:	f00d f969 	bl	800e3a8 <iprintf>
  printf("hi");
 80010d6:	482a      	ldr	r0, [pc, #168]	; (8001180 <MX_IKS01A3_DataLogTerminal_Init_G21+0x120>)
 80010d8:	f00d f966 	bl	800e3a8 <iprintf>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 80010dc:	2105      	movs	r1, #5
 80010de:	2000      	movs	r0, #0
 80010e0:	f007 fbe6 	bl	80088b0 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 80010e4:	2103      	movs	r1, #3
 80010e6:	2001      	movs	r0, #1
 80010e8:	f007 fbe2 	bl	80088b0 <IKS01A3_ENV_SENSOR_Init>


  IKS01A3_ENV_SENSOR_GetCapabilities(0, &EnvCapabilities[0]);
 80010ec:	4925      	ldr	r1, [pc, #148]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f007 fcec 	bl	8008acc <IKS01A3_ENV_SENSOR_GetCapabilities>
  snprintf(dataOut, MAX_BUF_SIZE,
			 "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
			 0, EnvCapabilities[0].Temperature, EnvCapabilities[0].Pressure, EnvCapabilities[0].Humidity, EnvCapabilities[0].LowPower);
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
  snprintf(dataOut, MAX_BUF_SIZE,
 80010f8:	461a      	mov	r2, r3
			 0, EnvCapabilities[0].Temperature, EnvCapabilities[0].Pressure, EnvCapabilities[0].Humidity, EnvCapabilities[0].LowPower);
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
  snprintf(dataOut, MAX_BUF_SIZE,
 80010fe:	4619      	mov	r1, r3
			 0, EnvCapabilities[0].Temperature, EnvCapabilities[0].Pressure, EnvCapabilities[0].Humidity, EnvCapabilities[0].LowPower);
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 8001102:	789b      	ldrb	r3, [r3, #2]
  snprintf(dataOut, MAX_BUF_SIZE,
 8001104:	4618      	mov	r0, r3
			 0, EnvCapabilities[0].Temperature, EnvCapabilities[0].Pressure, EnvCapabilities[0].Humidity, EnvCapabilities[0].LowPower);
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 8001108:	791b      	ldrb	r3, [r3, #4]
  snprintf(dataOut, MAX_BUF_SIZE,
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9002      	str	r0, [sp, #8]
 800110e:	9101      	str	r1, [sp, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <MX_IKS01A3_DataLogTerminal_Init_G21+0x128>)
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	4817      	ldr	r0, [pc, #92]	; (8001178 <MX_IKS01A3_DataLogTerminal_Init_G21+0x118>)
 800111c:	f00d f956 	bl	800e3cc <sniprintf>
  printf("%s", dataOut);
 8001120:	4915      	ldr	r1, [pc, #84]	; (8001178 <MX_IKS01A3_DataLogTerminal_Init_G21+0x118>)
 8001122:	4816      	ldr	r0, [pc, #88]	; (800117c <MX_IKS01A3_DataLogTerminal_Init_G21+0x11c>)
 8001124:	f00d f940 	bl	800e3a8 <iprintf>
  IKS01A3_ENV_SENSOR_GetCapabilities(1, &EnvCapabilities[1]);
 8001128:	4918      	ldr	r1, [pc, #96]	; (800118c <MX_IKS01A3_DataLogTerminal_Init_G21+0x12c>)
 800112a:	2001      	movs	r0, #1
 800112c:	f007 fcce 	bl	8008acc <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
  			 "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
  			 1, EnvCapabilities[1].Temperature, EnvCapabilities[1].Pressure, EnvCapabilities[1].Humidity, EnvCapabilities[1].LowPower);
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 8001132:	7e1b      	ldrb	r3, [r3, #24]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001134:	461a      	mov	r2, r3
  			 1, EnvCapabilities[1].Temperature, EnvCapabilities[1].Pressure, EnvCapabilities[1].Humidity, EnvCapabilities[1].LowPower);
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 8001138:	7e5b      	ldrb	r3, [r3, #25]
    snprintf(dataOut, MAX_BUF_SIZE,
 800113a:	4619      	mov	r1, r3
  			 1, EnvCapabilities[1].Temperature, EnvCapabilities[1].Pressure, EnvCapabilities[1].Humidity, EnvCapabilities[1].LowPower);
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 800113e:	7e9b      	ldrb	r3, [r3, #26]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001140:	4618      	mov	r0, r3
  			 1, EnvCapabilities[1].Temperature, EnvCapabilities[1].Pressure, EnvCapabilities[1].Humidity, EnvCapabilities[1].LowPower);
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_IKS01A3_DataLogTerminal_Init_G21+0x124>)
 8001144:	7f1b      	ldrb	r3, [r3, #28]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	9002      	str	r0, [sp, #8]
 800114a:	9101      	str	r1, [sp, #4]
 800114c:	9200      	str	r2, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <MX_IKS01A3_DataLogTerminal_Init_G21+0x128>)
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_IKS01A3_DataLogTerminal_Init_G21+0x118>)
 8001158:	f00d f938 	bl	800e3cc <sniprintf>
    printf("%s", dataOut);
 800115c:	4906      	ldr	r1, [pc, #24]	; (8001178 <MX_IKS01A3_DataLogTerminal_Init_G21+0x118>)
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_IKS01A3_DataLogTerminal_Init_G21+0x11c>)
 8001160:	f00d f922 	bl	800e3a8 <iprintf>

}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000053c 	.word	0x2000053c
 8001170:	200003a0 	.word	0x200003a0
 8001174:	08012c70 	.word	0x08012c70
 8001178:	2000043c 	.word	0x2000043c
 800117c:	08012ce4 	.word	0x08012ce4
 8001180:	08012ce8 	.word	0x08012ce8
 8001184:	200003f4 	.word	0x200003f4
 8001188:	08012cec 	.word	0x08012cec
 800118c:	2000040c 	.word	0x2000040c

08001190 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <BSP_PB_Callback+0x1c>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	2000039c 	.word	0x2000039c

080011b0 <MX_IKS01A3_DataLogTerminal_Process_G21>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process_G21(void)
{
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b091      	sub	sp, #68	; 0x44
 80011b4:	af0a      	add	r7, sp, #40	; 0x28
  data_send data;
  if (PushButtonDetected != 0U)
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <MX_IKS01A3_DataLogTerminal_Process_G21+0xf8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d011      	beq.n	80011e4 <MX_IKS01A3_DataLogTerminal_Process_G21+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f008 fd2d 	bl	8009c20 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 80011c6:	bf00      	nop
 80011c8:	2000      	movs	r0, #0
 80011ca:	f008 fb51 	bl	8009870 <BSP_PB_GetState>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <MX_IKS01A3_DataLogTerminal_Process_G21+0xfc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d0f7      	beq.n	80011c8 <MX_IKS01A3_DataLogTerminal_Process_G21+0x18>

    /* Debouncing */
    HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f008 fd21 	bl	8009c20 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <MX_IKS01A3_DataLogTerminal_Process_G21+0xf8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  Accelero_Sensor_Handler_G21(&data);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f8ef 	bl	80013cc <Accelero_Sensor_Handler_G21>
  Temp_Sensor_Handler_G21(&data);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f992 	bl	800151c <Temp_Sensor_Handler_G21>
  Hum_Sensor_Handler_G21(&data);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fa25 	bl	800164c <Hum_Sensor_Handler_G21>
  Press_Sensor_Handler_G21(&data);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9d4 	bl	80015b4 <Press_Sensor_Handler_G21>
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
      				(data.acc_x >= 0) ? 2: 3, abs(data.acc_x)
 800120c:	f997 300c 	ldrsb.w	r3, [r7, #12]
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 8001210:	2b00      	cmp	r3, #0
 8001212:	db01      	blt.n	8001218 <MX_IKS01A3_DataLogTerminal_Process_G21+0x68>
 8001214:	2002      	movs	r0, #2
 8001216:	e000      	b.n	800121a <MX_IKS01A3_DataLogTerminal_Process_G21+0x6a>
 8001218:	2003      	movs	r0, #3
      				(data.acc_x >= 0) ? 2: 3, abs(data.acc_x)
 800121a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	bfb8      	it	lt
 8001222:	425b      	neglt	r3, r3
 8001224:	b2db      	uxtb	r3, r3
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 8001226:	461c      	mov	r4, r3
      				,(data.acc_y >= 0) ? 2: 3,abs(data.acc_y)
 8001228:	f997 300d 	ldrsb.w	r3, [r7, #13]
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	db01      	blt.n	8001234 <MX_IKS01A3_DataLogTerminal_Process_G21+0x84>
 8001230:	2302      	movs	r3, #2
 8001232:	e000      	b.n	8001236 <MX_IKS01A3_DataLogTerminal_Process_G21+0x86>
 8001234:	2303      	movs	r3, #3
      				,(data.acc_y >= 0) ? 2: 3,abs(data.acc_y)
 8001236:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800123a:	2a00      	cmp	r2, #0
 800123c:	bfb8      	it	lt
 800123e:	4252      	neglt	r2, r2
 8001240:	b2d2      	uxtb	r2, r2
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 8001242:	4615      	mov	r5, r2
      				,(data.acc_z >= 0) ? 2: 3, abs(data.acc_z)
 8001244:	f997 200e 	ldrsb.w	r2, [r7, #14]
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 8001248:	2a00      	cmp	r2, #0
 800124a:	db01      	blt.n	8001250 <MX_IKS01A3_DataLogTerminal_Process_G21+0xa0>
 800124c:	2202      	movs	r2, #2
 800124e:	e000      	b.n	8001252 <MX_IKS01A3_DataLogTerminal_Process_G21+0xa2>
 8001250:	2203      	movs	r2, #3
      				,(data.acc_z >= 0) ? 2: 3, abs(data.acc_z)
 8001252:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001256:	2900      	cmp	r1, #0
 8001258:	bfb8      	it	lt
 800125a:	4249      	neglt	r1, r1
 800125c:	b2c9      	uxtb	r1, r1
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 800125e:	460e      	mov	r6, r1
      				,(data.temp >= 0)? 2 : 3 ,data.temp,
 8001260:	8af9      	ldrh	r1, [r7, #22]
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 8001262:	6079      	str	r1, [r7, #4]
					data.hum,
 8001264:	8ab9      	ldrh	r1, [r7, #20]
  snprintf(dataOut, MAX_BUF_SIZE, "%x%d%d%d%d%d%d%d%d%ld\n",
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	9108      	str	r1, [sp, #32]
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	9107      	str	r1, [sp, #28]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	9106      	str	r1, [sp, #24]
 8001274:	2102      	movs	r1, #2
 8001276:	9105      	str	r1, [sp, #20]
 8001278:	9604      	str	r6, [sp, #16]
 800127a:	9203      	str	r2, [sp, #12]
 800127c:	9502      	str	r5, [sp, #8]
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	9400      	str	r4, [sp, #0]
 8001282:	4603      	mov	r3, r0
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <MX_IKS01A3_DataLogTerminal_Process_G21+0x100>)
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <MX_IKS01A3_DataLogTerminal_Process_G21+0x104>)
 800128c:	f00d f89e 	bl	800e3cc <sniprintf>
					data.press);
  lora_send(dataOut);
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MX_IKS01A3_DataLogTerminal_Process_G21+0x104>)
 8001292:	f000 fa6f 	bl	8001774 <lora_send>
  HAL_Delay( 1000 );
 8001296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129a:	f008 fcc1 	bl	8009c20 <HAL_Delay>
}
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000039c 	.word	0x2000039c
 80012ac:	2000053c 	.word	0x2000053c
 80012b0:	08012d60 	.word	0x08012d60
 80012b4:	2000043c 	.word	0x2000043c

080012b8 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	ed87 0a03 	vstr	s0, [r7, #12]
 80012c2:	60b8      	str	r0, [r7, #8]
 80012c4:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 80012c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	db03      	blt.n	80012dc <floatToInt+0x24>
  {
    out_value->sign = 0;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e008      	b.n	80012ee <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
    in = -in;
 80012e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e6:	eef1 7a67 	vneg.f32	s15, s15
 80012ea:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff f92a 	bl	8000548 <__aeabi_f2d>
 80012f4:	4604      	mov	r4, r0
 80012f6:	460d      	mov	r5, r1
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f913 	bl	8000524 <__aeabi_i2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ec43 2b11 	vmov	d1, r2, r3
 8001306:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80013c0 <floatToInt+0x108>
 800130a:	f010 fd31 	bl	8011d70 <pow>
 800130e:	ec53 2b10 	vmov	r2, r3, d0
 8001312:	f04f 0000 	mov.w	r0, #0
 8001316:	492c      	ldr	r1, [pc, #176]	; (80013c8 <floatToInt+0x110>)
 8001318:	f7ff fa98 	bl	800084c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7fe ffb2 	bl	800028c <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc5a 	bl	8000be8 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8001338:	edd7 7a03 	vldr	s15, [r7, #12]
 800133c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001340:	ee17 2a90 	vmov	r2, s15
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001354:	ed97 7a03 	vldr	s14, [r7, #12]
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff f8f1 	bl	8000548 <__aeabi_f2d>
 8001366:	4604      	mov	r4, r0
 8001368:	460d      	mov	r5, r1
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff f8da 	bl	8000524 <__aeabi_i2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ec43 2b11 	vmov	d1, r2, r3
 8001378:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80013c0 <floatToInt+0x108>
 800137c:	f010 fcf8 	bl	8011d70 <pow>
 8001380:	ec53 2b10 	vmov	r2, r3, d0
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7ff f936 	bl	80005f8 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	ec43 2b17 	vmov	d7, r2, r3
 8001394:	eeb0 0a47 	vmov.f32	s0, s14
 8001398:	eef0 0a67 	vmov.f32	s1, s15
 800139c:	f010 fd64 	bl	8011e68 <trunc>
 80013a0:	ec53 2b10 	vmov	r2, r3, d0
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fbd6 	bl	8000b58 <__aeabi_d2iz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	609a      	str	r2, [r3, #8]
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40240000 	.word	0x40240000
 80013c8:	3fe00000 	.word	0x3fe00000

080013cc <Accelero_Sensor_Handler_G21>:
  * @retval None
  */


static void Accelero_Sensor_Handler_G21(data_send *dataSend)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	6078      	str	r0, [r7, #4]

  IKS01A3_MOTION_SENSOR_Axes_t acceleration;

  if (IKS01A3_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &acceleration))
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	461a      	mov	r2, r3
 80013da:	2102      	movs	r1, #2
 80013dc:	2000      	movs	r0, #0
 80013de:	f007 ff4f 	bl	8009280 <IKS01A3_MOTION_SENSOR_GetAxes>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <Accelero_Sensor_Handler_G21+0x2a>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC: Error\r\n");
 80013e8:	4a47      	ldr	r2, [pc, #284]	; (8001508 <Accelero_Sensor_Handler_G21+0x13c>)
 80013ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ee:	4847      	ldr	r0, [pc, #284]	; (800150c <Accelero_Sensor_Handler_G21+0x140>)
 80013f0:	f00c ffec 	bl	800e3cc <sniprintf>
 80013f4:	e07f      	b.n	80014f6 <Accelero_Sensor_Handler_G21+0x12a>
  }
  else
  {

	dataSend->acc_x = (int)(acceleration.x/100);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4a45      	ldr	r2, [pc, #276]	; (8001510 <Accelero_Sensor_Handler_G21+0x144>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	1152      	asrs	r2, r2, #5
 8001400:	17db      	asrs	r3, r3, #31
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b25a      	sxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
	if(dataSend->acc_x < 0){
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f993 3000 	ldrsb.w	r3, [r3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da0b      	bge.n	800142c <Accelero_Sensor_Handler_G21+0x60>
		dataSend->acc_x = (dataSend->acc_x < -9) ? -9 :dataSend->acc_x;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f993 3000 	ldrsb.w	r3, [r3]
 800141a:	f06f 0208 	mvn.w	r2, #8
 800141e:	4293      	cmp	r3, r2
 8001420:	bfb8      	it	lt
 8001422:	4613      	movlt	r3, r2
 8001424:	b25a      	sxtb	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e008      	b.n	800143e <Accelero_Sensor_Handler_G21+0x72>
	}else{
		dataSend->acc_x = (dataSend->acc_x > 9) ? 9 :dataSend->acc_x;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f993 3000 	ldrsb.w	r3, [r3]
 8001432:	2b09      	cmp	r3, #9
 8001434:	bfa8      	it	ge
 8001436:	2309      	movge	r3, #9
 8001438:	b25a      	sxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	701a      	strb	r2, [r3, #0]
	}
	dataSend->acc_y = (int)(acceleration.y/100);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4a33      	ldr	r2, [pc, #204]	; (8001510 <Accelero_Sensor_Handler_G21+0x144>)
 8001442:	fb82 1203 	smull	r1, r2, r2, r3
 8001446:	1152      	asrs	r2, r2, #5
 8001448:	17db      	asrs	r3, r3, #31
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b25a      	sxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	705a      	strb	r2, [r3, #1]
	if(dataSend->acc_y < 0){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0b      	bge.n	8001474 <Accelero_Sensor_Handler_G21+0xa8>
		dataSend->acc_y = (dataSend->acc_y < -9) ? -9 :dataSend->acc_y;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001462:	f06f 0208 	mvn.w	r2, #8
 8001466:	4293      	cmp	r3, r2
 8001468:	bfb8      	it	lt
 800146a:	4613      	movlt	r3, r2
 800146c:	b25a      	sxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	705a      	strb	r2, [r3, #1]
 8001472:	e008      	b.n	8001486 <Accelero_Sensor_Handler_G21+0xba>
	}else{
		dataSend->acc_y = (dataSend->acc_y > 9) ? 9 :dataSend->acc_y;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800147a:	2b09      	cmp	r3, #9
 800147c:	bfa8      	it	ge
 800147e:	2309      	movge	r3, #9
 8001480:	b25a      	sxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	705a      	strb	r2, [r3, #1]
	}
	dataSend->acc_z = (int)(acceleration.z/100);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <Accelero_Sensor_Handler_G21+0x144>)
 800148a:	fb82 1203 	smull	r1, r2, r2, r3
 800148e:	1152      	asrs	r2, r2, #5
 8001490:	17db      	asrs	r3, r3, #31
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	b25a      	sxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	709a      	strb	r2, [r3, #2]
	if(dataSend->acc_z < 0){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da0b      	bge.n	80014bc <Accelero_Sensor_Handler_G21+0xf0>
		dataSend->acc_z = (dataSend->acc_z < -9) ? -9 :dataSend->acc_z;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014aa:	f06f 0208 	mvn.w	r2, #8
 80014ae:	4293      	cmp	r3, r2
 80014b0:	bfb8      	it	lt
 80014b2:	4613      	movlt	r3, r2
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	709a      	strb	r2, [r3, #2]
 80014ba:	e008      	b.n	80014ce <Accelero_Sensor_Handler_G21+0x102>
	}else{
		dataSend->acc_z = (dataSend->acc_z > 9) ? 9 :dataSend->acc_z;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014c2:	2b09      	cmp	r3, #9
 80014c4:	bfa8      	it	ge
 80014c6:	2309      	movge	r3, #9
 80014c8:	b25a      	sxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	709a      	strb	r2, [r3, #2]
	}
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X : %d, ACC_Y: %d, ACC_Z: %d\r\n",
    		dataSend->acc_x, dataSend->acc_y, dataSend->acc_z);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f993 3000 	ldrsb.w	r3, [r3]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X : %d, ACC_Y: %d, ACC_Z: %d\r\n",
 80014d4:	4619      	mov	r1, r3
    		dataSend->acc_x, dataSend->acc_y, dataSend->acc_z);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X : %d, ACC_Y: %d, ACC_Z: %d\r\n",
 80014dc:	461a      	mov	r2, r3
    		dataSend->acc_x, dataSend->acc_y, dataSend->acc_z);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X : %d, ACC_Y: %d, ACC_Z: %d\r\n",
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	460b      	mov	r3, r1
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <Accelero_Sensor_Handler_G21+0x148>)
 80014ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <Accelero_Sensor_Handler_G21+0x140>)
 80014f2:	f00c ff6b 	bl	800e3cc <sniprintf>
  }
  printf("%s", dataOut);
 80014f6:	4905      	ldr	r1, [pc, #20]	; (800150c <Accelero_Sensor_Handler_G21+0x140>)
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <Accelero_Sensor_Handler_G21+0x14c>)
 80014fa:	f00c ff55 	bl	800e3a8 <iprintf>


}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08012d78 	.word	0x08012d78
 800150c:	2000043c 	.word	0x2000043c
 8001510:	51eb851f 	.word	0x51eb851f
 8001514:	08012d88 	.word	0x08012d88
 8001518:	08012ce4 	.word	0x08012ce4

0800151c <Temp_Sensor_Handler_G21>:
  * @param  None
  * @retval None
  */

static void Temp_Sensor_Handler_G21(data_send *dataSend)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	6078      	str	r0, [r7, #4]

  float temperature;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(0, ENV_TEMPERATURE, &temperature))
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	461a      	mov	r2, r3
 800152a:	2101      	movs	r1, #1
 800152c:	2000      	movs	r0, #0
 800152e:	f007 faf7 	bl	8008b20 <IKS01A3_ENV_SENSOR_GetValue>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <Temp_Sensor_Handler_G21+0x2a>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp: Error\r\n");
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <Temp_Sensor_Handler_G21+0x84>)
 800153a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153e:	4819      	ldr	r0, [pc, #100]	; (80015a4 <Temp_Sensor_Handler_G21+0x88>)
 8001540:	f00c ff44 	bl	800e3cc <sniprintf>
 8001544:	e024      	b.n	8001590 <Temp_Sensor_Handler_G21+0x74>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 8001546:	edd7 7a05 	vldr	s15, [r7, #20]
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2102      	movs	r1, #2
 8001550:	4618      	mov	r0, r3
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f7ff feaf 	bl	80012b8 <floatToInt>
    dataSend->temp = temperature*100;
 800155a:	edd7 7a05 	vldr	s15, [r7, #20]
 800155e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015a8 <Temp_Sensor_Handler_G21+0x8c>
 8001562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156a:	ee17 3a90 	vmov	r3, s15
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	815a      	strh	r2, [r3, #10]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp: %0.2f degC\r\n",temperature);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffe6 	bl	8000548 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	e9cd 2300 	strd	r2, r3, [sp]
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <Temp_Sensor_Handler_G21+0x90>)
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <Temp_Sensor_Handler_G21+0x88>)
 800158c:	f00c ff1e 	bl	800e3cc <sniprintf>
  }

  printf("%s", dataOut);
 8001590:	4904      	ldr	r1, [pc, #16]	; (80015a4 <Temp_Sensor_Handler_G21+0x88>)
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <Temp_Sensor_Handler_G21+0x94>)
 8001594:	f00c ff08 	bl	800e3a8 <iprintf>

}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	08012db0 	.word	0x08012db0
 80015a4:	2000043c 	.word	0x2000043c
 80015a8:	42c80000 	.word	0x42c80000
 80015ac:	08012dc0 	.word	0x08012dc0
 80015b0:	08012ce4 	.word	0x08012ce4

080015b4 <Press_Sensor_Handler_G21>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler_G21(data_send *dataSend)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]
  float pressure;
  displayFloatToInt_t out_value;

  if (IKS01A3_ENV_SENSOR_GetValue(1, ENV_PRESSURE, &pressure))
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	461a      	mov	r2, r3
 80015c2:	2102      	movs	r1, #2
 80015c4:	2001      	movs	r0, #1
 80015c6:	f007 faab 	bl	8008b20 <IKS01A3_ENV_SENSOR_GetValue>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <Press_Sensor_Handler_G21+0x2a>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress: Error\r\n");
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <Press_Sensor_Handler_G21+0x84>)
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	4819      	ldr	r0, [pc, #100]	; (800163c <Press_Sensor_Handler_G21+0x88>)
 80015d8:	f00c fef8 	bl	800e3cc <sniprintf>
 80015dc:	e023      	b.n	8001626 <Press_Sensor_Handler_G21+0x72>
  }
  else
  {

    floatToInt(pressure, &out_value, 2);
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2102      	movs	r1, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	f7ff fe63 	bl	80012b8 <floatToInt>
    dataSend->press = pressure*100;
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001640 <Press_Sensor_Handler_G21+0x8c>
 80015fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001602:	ee17 2a90 	vmov	r2, s15
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	605a      	str	r2, [r3, #4]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress: %0.2f hPa\r\n",pressure);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9cd 2300 	strd	r2, r3, [sp]
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <Press_Sensor_Handler_G21+0x90>)
 800161c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <Press_Sensor_Handler_G21+0x88>)
 8001622:	f00c fed3 	bl	800e3cc <sniprintf>
  }

  printf("%s", dataOut);
 8001626:	4905      	ldr	r1, [pc, #20]	; (800163c <Press_Sensor_Handler_G21+0x88>)
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <Press_Sensor_Handler_G21+0x94>)
 800162a:	f00c febd 	bl	800e3a8 <iprintf>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	08012dd8 	.word	0x08012dd8
 800163c:	2000043c 	.word	0x2000043c
 8001640:	42c80000 	.word	0x42c80000
 8001644:	08012dec 	.word	0x08012dec
 8001648:	08012ce4 	.word	0x08012ce4

0800164c <Hum_Sensor_Handler_G21>:
  * @retval None
  */


static void Hum_Sensor_Handler_G21(data_send *dataSend)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
  float humidity;
  displayFloatToInt_t out_value;


  if (IKS01A3_ENV_SENSOR_GetValue(0, ENV_HUMIDITY, &humidity))
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	461a      	mov	r2, r3
 800165a:	2104      	movs	r1, #4
 800165c:	2000      	movs	r0, #0
 800165e:	f007 fa5f 	bl	8008b20 <IKS01A3_ENV_SENSOR_GetValue>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <Hum_Sensor_Handler_G21+0x2a>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum: Error\r\n");
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <Hum_Sensor_Handler_G21+0x84>)
 800166a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <Hum_Sensor_Handler_G21+0x88>)
 8001670:	f00c feac 	bl	800e3cc <sniprintf>
 8001674:	e024      	b.n	80016c0 <Hum_Sensor_Handler_G21+0x74>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 8001676:	edd7 7a05 	vldr	s15, [r7, #20]
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2102      	movs	r1, #2
 8001680:	4618      	mov	r0, r3
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f7ff fe17 	bl	80012b8 <floatToInt>
    dataSend->hum = humidity * 100;
 800168a:	edd7 7a05 	vldr	s15, [r7, #20]
 800168e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80016d8 <Hum_Sensor_Handler_G21+0x8c>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169a:	ee17 3a90 	vmov	r3, s15
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	811a      	strh	r2, [r3, #8]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum : %0.2f %%\r\n",humidity);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff4e 	bl	8000548 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9cd 2300 	strd	r2, r3, [sp]
 80016b4:	4a09      	ldr	r2, [pc, #36]	; (80016dc <Hum_Sensor_Handler_G21+0x90>)
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <Hum_Sensor_Handler_G21+0x88>)
 80016bc:	f00c fe86 	bl	800e3cc <sniprintf>
  }

  printf("%s", dataOut);
 80016c0:	4904      	ldr	r1, [pc, #16]	; (80016d4 <Hum_Sensor_Handler_G21+0x88>)
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <Hum_Sensor_Handler_G21+0x94>)
 80016c4:	f00c fe70 	bl	800e3a8 <iprintf>

}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08012e04 	.word	0x08012e04
 80016d4:	2000043c 	.word	0x2000043c
 80016d8:	42c80000 	.word	0x42c80000
 80016dc:	08012e14 	.word	0x08012e14
 80016e0:	08012ce4 	.word	0x08012ce4

080016e4 <lora_init>:

static void lora_init(void){
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 80016ea:	af00      	add	r7, sp, #0
	char command1[] = "AT+MODE=TEST\r\n" ;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <lora_init+0x84>)
 80016ee:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 80016f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f4:	c407      	stmia	r4!, {r0, r1, r2}
 80016f6:	8023      	strh	r3, [r4, #0]
 80016f8:	3402      	adds	r4, #2
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	7023      	strb	r3, [r4, #0]
	char response[1000] = "";
 80016fe:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001702:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	3304      	adds	r3, #4
 800170c:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00c fef1 	bl	800e4fa <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*)command1, strlen(command1), 1000);
 8001718:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fda7 	bl	8000270 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	f507 717a 	add.w	r1, r7, #1000	; 0x3e8
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	480f      	ldr	r0, [pc, #60]	; (800176c <lora_init+0x88>)
 8001730:	f00b f8e0 	bl	800c8f4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)response, sizeof(response), 1000);
 8001734:	4639      	mov	r1, r7
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <lora_init+0x88>)
 8001740:	f00b f962 	bl	800ca08 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), 1000);
 8001744:	463b      	mov	r3, r7
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd92 	bl	8000270 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	4639      	mov	r1, r7
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <lora_init+0x8c>)
 8001758:	f00b f8cc 	bl	800c8f4 <HAL_UART_Transmit>
}
 800175c:	bf00      	nop
 800175e:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	08012e28 	.word	0x08012e28
 800176c:	20000540 	.word	0x20000540
 8001770:	20000808 	.word	0x20000808

08001774 <lora_send>:

static void lora_send(char *dataSend){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800177a:	af00      	add	r7, sp, #0
 800177c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001780:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001784:	6018      	str	r0, [r3, #0]
	char command2[] = "AT+TEST=TXLRPKT," ;
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <lora_send+0xb8>)
 8001788:	f507 747d 	add.w	r4, r7, #1012	; 0x3f4
 800178c:	461d      	mov	r5, r3
 800178e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	7023      	strb	r3, [r4, #0]
	char response[1000] = "";
 8001796:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800179a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00c fea5 	bl	800e4fa <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*)command2, strlen(command2), 1000);
 80017b0:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fd5b 	bl	8000270 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	481a      	ldr	r0, [pc, #104]	; (8001830 <lora_send+0xbc>)
 80017c8:	f00b f894 	bl	800c8f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)dataSend, strlen(dataSend), 1000);
 80017cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80017d0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f7fe fd4b 	bl	8000270 <strlen>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80017e2:	f2a3 4104 	subw	r1, r3, #1028	; 0x404
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	6809      	ldr	r1, [r1, #0]
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <lora_send+0xbc>)
 80017ee:	f00b f881 	bl	800c8f4 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, (uint8_t*)response, sizeof(response), 1000);
 80017f2:	f107 010c 	add.w	r1, r7, #12
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <lora_send+0xbc>)
 8001800:	f00b f902 	bl	800ca08 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), 1000);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fd31 	bl	8000270 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	b29a      	uxth	r2, r3
 8001812:	f107 010c 	add.w	r1, r7, #12
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <lora_send+0xc0>)
 800181c:	f00b f86a 	bl	800c8f4 <HAL_UART_Transmit>
}
 8001820:	bf00      	nop
 8001822:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001826:	46bd      	mov	sp, r7
 8001828:	bdb0      	pop	{r4, r5, r7, pc}
 800182a:	bf00      	nop
 800182c:	08012e38 	.word	0x08012e38
 8001830:	20000540 	.word	0x20000540
 8001834:	20000808 	.word	0x20000808

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183c:	f008 f974 	bl	8009b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001840:	f000 f809 	bl	8001856 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001844:	f000 f888 	bl	8001958 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001848:	f000 f856 	bl	80018f8 <MX_USART1_UART_Init>
  MX_MEMS_Init();
 800184c:	f7ff fbf9 	bl	8001042 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001850:	f7ff fbff 	bl	8001052 <MX_MEMS_Process>
 8001854:	e7fc      	b.n	8001850 <main+0x18>

08001856 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b096      	sub	sp, #88	; 0x58
 800185a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2244      	movs	r2, #68	; 0x44
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f00c fe48 	bl	800e4fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800187c:	f009 fcda 	bl	800b234 <HAL_PWREx_ControlVoltageScaling>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001886:	f000 f8e7 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800188a:	2302      	movs	r3, #2
 800188c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001894:	2310      	movs	r3, #16
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001898:	2302      	movs	r3, #2
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800189c:	2302      	movs	r3, #2
 800189e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018a4:	230a      	movs	r3, #10
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018a8:	2307      	movs	r3, #7
 80018aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4618      	mov	r0, r3
 80018ba:	f009 fd11 	bl	800b2e0 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018c4:	f000 f8c8 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2303      	movs	r3, #3
 80018ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2104      	movs	r1, #4
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00a f8d9 	bl	800ba98 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018ec:	f000 f8b4 	bl	8001a58 <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3758      	adds	r7, #88	; 0x58
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART1_UART_Init+0x58>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_USART1_UART_Init+0x5c>)
 8001900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800193c:	f00a ff8c 	bl	800c858 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001946:	f000 f887 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000540 	.word	0x20000540
 8001954:	40013800 	.word	0x40013800

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <MX_GPIO_Init+0xf4>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a36      	ldr	r2, [pc, #216]	; (8001a4c <MX_GPIO_Init+0xf4>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <MX_GPIO_Init+0xf4>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <MX_GPIO_Init+0xf4>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <MX_GPIO_Init+0xf4>)
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <MX_GPIO_Init+0xf4>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <MX_GPIO_Init+0xf4>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a2a      	ldr	r2, [pc, #168]	; (8001a4c <MX_GPIO_Init+0xf4>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <MX_GPIO_Init+0xf4>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <MX_GPIO_Init+0xf4>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <MX_GPIO_Init+0xf4>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <MX_GPIO_Init+0xf4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019ce:	2302      	movs	r3, #2
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_GPIO_Init+0xf8>)
 80019e4:	f008 fab0 	bl	8009f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80019e8:	f240 4331 	movw	r3, #1073	; 0x431
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4815      	ldr	r0, [pc, #84]	; (8001a54 <MX_GPIO_Init+0xfc>)
 8001a00:	f008 faa2 	bl	8009f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2006      	movs	r0, #6
 8001a0a:	f008 fa08 	bl	8009e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a0e:	2006      	movs	r0, #6
 8001a10:	f008 fa21 	bl	8009e56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2007      	movs	r0, #7
 8001a1a:	f008 fa00 	bl	8009e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f008 fa19 	bl	8009e56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f008 f9f8 	bl	8009e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f008 fa11 	bl	8009e56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2028      	movs	r0, #40	; 0x28
 8001a3a:	f008 f9f0 	bl	8009e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a3e:	2028      	movs	r0, #40	; 0x28
 8001a40:	f008 fa09 	bl	8009e56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000400 	.word	0x48000400

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6613      	str	r3, [r2, #96]	; 0x60
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0ac      	sub	sp, #176	; 0xb0
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2288      	movs	r2, #136	; 0x88
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00c fd14 	bl	800e4fa <memset>
  if(huart->Instance==USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_UART_MspInit+0xb4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d13c      	bne.n	8001b56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00a f9f9 	bl	800bee0 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001af4:	f7ff ffb0 	bl	8001a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_UART_MspInit+0xb8>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_UART_MspInit+0xb8>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b02:	6613      	str	r3, [r2, #96]	; 0x60
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_UART_MspInit+0xb8>)
 8001b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0xb8>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_UART_MspInit+0xb8>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_UART_MspInit+0xb8>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b42:	2307      	movs	r3, #7
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f008 f9f9 	bl	8009f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	37b0      	adds	r7, #176	; 0xb0
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40021000 	.word	0x40021000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f008 f814 	bl	8009be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f008 fc8f 	bl	800a4e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bce:	2002      	movs	r0, #2
 8001bd0:	f008 fc88 	bl	800a4e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001bdc:	2010      	movs	r0, #16
 8001bde:	f008 fc81 	bl	800a4e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001bec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bf0:	f008 fc78 	bl	800a4e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <EXTI15_10_IRQHandler+0x18>)
 8001bf6:	f008 f977 	bl	8009ee8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000190 	.word	0x20000190

08001c04 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <BSP_I2C1_Init+0x70>)
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <BSP_I2C1_Init+0x74>)
 8001c12:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <BSP_I2C1_Init+0x78>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	4918      	ldr	r1, [pc, #96]	; (8001c7c <BSP_I2C1_Init+0x78>)
 8001c1c:	600a      	str	r2, [r1, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d122      	bne.n	8001c68 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <BSP_I2C1_Init+0x70>)
 8001c24:	f008 ff8e 	bl	800ab44 <HAL_I2C_GetState>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11c      	bne.n	8001c68 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <BSP_I2C1_Init+0x70>)
 8001c30:	f000 f8fe 	bl	8001e30 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001c3a:	480e      	ldr	r0, [pc, #56]	; (8001c74 <BSP_I2C1_Init+0x70>)
 8001c3c:	f000 f8b4 	bl	8001da8 <MX_I2C1_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001c46:	f06f 0307 	mvn.w	r3, #7
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	e00c      	b.n	8001c68 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <BSP_I2C1_Init+0x70>)
 8001c52:	f009 fa49 	bl	800b0e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001c5c:	f06f 0307 	mvn.w	r3, #7
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	e001      	b.n	8001c68 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200005c8 	.word	0x200005c8
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	2000061c 	.word	0x2000061c

08001c80 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <BSP_I2C1_DeInit+0x48>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d014      	beq.n	8001cbc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <BSP_I2C1_DeInit+0x48>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <BSP_I2C1_DeInit+0x48>)
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <BSP_I2C1_DeInit+0x48>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001ca4:	4809      	ldr	r0, [pc, #36]	; (8001ccc <BSP_I2C1_DeInit+0x4c>)
 8001ca6:	f000 f923 	bl	8001ef0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001caa:	4808      	ldr	r0, [pc, #32]	; (8001ccc <BSP_I2C1_DeInit+0x4c>)
 8001cac:	f008 fcd8 	bl	800a660 <HAL_I2C_DeInit>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001cb6:	f06f 0307 	mvn.w	r3, #7
 8001cba:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000061c 	.word	0x2000061c
 8001ccc:	200005c8 	.word	0x200005c8

08001cd0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	81fb      	strh	r3, [r7, #14]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	81bb      	strh	r3, [r7, #12]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001cea:	89ba      	ldrh	r2, [r7, #12]
 8001cec:	89f9      	ldrh	r1, [r7, #14]
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <BSP_I2C1_WriteReg+0x60>)
 8001d00:	f008 fcf2 	bl	800a6e8 <HAL_I2C_Mem_Write>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <BSP_I2C1_WriteReg+0x60>)
 8001d0c:	f008 ff28 	bl	800ab60 <HAL_I2C_GetError>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d103      	bne.n	8001d1e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d16:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e002      	b.n	8001d24 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001d1e:	f06f 0303 	mvn.w	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001d24:	697b      	ldr	r3, [r7, #20]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200005c8 	.word	0x200005c8

08001d34 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	81fb      	strh	r3, [r7, #14]
 8001d42:	460b      	mov	r3, r1
 8001d44:	81bb      	strh	r3, [r7, #12]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001d4e:	89ba      	ldrh	r2, [r7, #12]
 8001d50:	89f9      	ldrh	r1, [r7, #14]
 8001d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <BSP_I2C1_ReadReg+0x60>)
 8001d64:	f008 fdd4 	bl	800a910 <HAL_I2C_Mem_Read>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <BSP_I2C1_ReadReg+0x60>)
 8001d70:	f008 fef6 	bl	800ab60 <HAL_I2C_GetError>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d103      	bne.n	8001d82 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d7a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e002      	b.n	8001d88 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d82:	f06f 0303 	mvn.w	r3, #3
 8001d86:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001d88:	697b      	ldr	r3, [r7, #20]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200005c8 	.word	0x200005c8

08001d98 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d9c:	f007 ff34 	bl	8009c08 <HAL_GetTick>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <MX_I2C1_Init+0x80>)
 8001db8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <MX_I2C1_Init+0x84>)
 8001dbe:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f008 fb9d 	bl	800a52a <HAL_I2C_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f009 f973 	bl	800b0e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f009 f9b5 	bl	800b17e <HAL_I2CEx_ConfigDigitalFilter>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	00702991 	.word	0x00702991

08001e30 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0ac      	sub	sp, #176	; 0xb0
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2288      	movs	r2, #136	; 0x88
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00c fb5a 	bl	800e4fa <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00a f844 	bl	800bee0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <I2C1_MspInit+0xb8>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <I2C1_MspInit+0xb8>)
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <I2C1_MspInit+0xb8>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e78:	2312      	movs	r3, #18
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001e90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e94:	4619      	mov	r1, r3
 8001e96:	4815      	ldr	r0, [pc, #84]	; (8001eec <I2C1_MspInit+0xbc>)
 8001e98:	f008 f856 	bl	8009f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480a      	ldr	r0, [pc, #40]	; (8001eec <I2C1_MspInit+0xbc>)
 8001ec4:	f008 f840 	bl	8009f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <I2C1_MspInit+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <I2C1_MspInit+0xb8>)
 8001ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <I2C1_MspInit+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	37b0      	adds	r7, #176	; 0xb0
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48000400 	.word	0x48000400

08001ef0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <I2C1_MspDeInit+0x30>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <I2C1_MspDeInit+0x30>)
 8001efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f02:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f08:	4806      	ldr	r0, [pc, #24]	; (8001f24 <I2C1_MspDeInit+0x34>)
 8001f0a:	f008 f9c7 	bl	800a29c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <I2C1_MspDeInit+0x34>)
 8001f14:	f008 f9c2 	bl	800a29c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_kill>:

int _kill(int pid, int sig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f42:	f00c fb2d 	bl	800e5a0 <__errno>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2216      	movs	r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_exit>:

void _exit (int status)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffe7 	bl	8001f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f6a:	e7fe      	b.n	8001f6a <_exit+0x12>

08001f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7e:	f3af 8000 	nop.w
 8001f82:	4601      	mov	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
  }

  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fd25 	bl	8009a10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf1      	blt.n	8001fb8 <_write+0x12>
  }
  return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_close>:

int _close(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002006:	605a      	str	r2, [r3, #4]
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_isatty>:

int _isatty(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f00c fa92 	bl	800e5a0 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20018000 	.word	0x20018000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	20000620 	.word	0x20000620
 80020b0:	200009e8 	.word	0x200009e8

080020b4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e034      	b.n	8002136 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	7b1a      	ldrb	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HTS221_RegisterBusIO+0x8c>)
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HTS221_RegisterBusIO+0x90>)
 800210e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4798      	blx	r3
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	e002      	b.n	8002136 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	08002783 	.word	0x08002783
 8002144:	080027e5 	.word	0x080027e5

08002148 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 faac 	bl	80026b8 <HTS221_Initialize>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e004      	b.n	8002176 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800218c:	2b01      	cmp	r3, #1
 800218e:	d111      	bne.n	80021b4 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f880 	bl	8002296 <HTS221_HUM_Disable>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	e00d      	b.n	80021be <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f967 	bl	8002476 <HTS221_TEMP_Disable>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e004      	b.n	80021be <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3320      	adds	r3, #32
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fc30 	bl	8002a3c <hts221_device_id_get>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e000      	b.n	80021ea <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HTS221_GetCapabilities+0x54>)
 8002220:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HTS221_GetCapabilities+0x54>)
 8002226:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	41480000 	.word	0x41480000

0800224c <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e015      	b.n	800228e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3320      	adds	r3, #32
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fbf3 	bl	8002a5e <hts221_power_on_set>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e004      	b.n	800228e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e015      	b.n	80022d8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3320      	adds	r3, #32
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fbce 	bl	8002a5e <hts221_power_on_set>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
 80022cc:	e004      	b.n	80022d8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f96f 	bl	80025d0 <HTS221_GetOutputDataRate>
 80022f2:	4603      	mov	r3, r0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002308:	ed97 0a00 	vldr	s0, [r7]
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f9a3 	bl	8002658 <HTS221_SetOutputDataRate>
 8002312:	4603      	mov	r3, r0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3320      	adds	r3, #32
 800232a:	f107 020c 	add.w	r2, r7, #12
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fc58 	bl	8002be6 <hts221_hum_adc_point_0_get>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
 8002340:	e06b      	b.n	800241a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 0220 	add.w	r2, r3, #32
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	3304      	adds	r3, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f000 fbaa 	bl	8002aaa <hts221_hum_rh_point_0_get>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	e05b      	b.n	800241a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f103 0220 	add.w	r2, r3, #32
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	3308      	adds	r3, #8
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f000 fc5c 	bl	8002c2e <hts221_hum_adc_point_1_get>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	e04b      	b.n	800241a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f103 0220 	add.w	r2, r3, #32
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	330c      	adds	r3, #12
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f000 fba8 	bl	8002ae6 <hts221_hum_rh_point_1_get>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	e03b      	b.n	800241a <HTS221_HUM_GetHumidity+0xfe>
 80023a2:	2300      	movs	r3, #0
 80023a4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3320      	adds	r3, #32
 80023aa:	f107 021c 	add.w	r2, r7, #28
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fafd 	bl	80029b0 <hts221_humidity_raw_get>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
 80023c0:	e02b      	b.n	800241a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80023c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f99a 	bl	8002710 <Linear_Interpolation>
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d503      	bpl.n	80023fe <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002424 <HTS221_HUM_GetHumidity+0x108>
 8002408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	dd02      	ble.n	8002418 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HTS221_HUM_GetHumidity+0x10c>)
 8002416:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	42c80000 	.word	0x42c80000
 8002428:	42c80000 	.word	0x42c80000

0800242c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e015      	b.n	800246e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3320      	adds	r3, #32
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fb03 	bl	8002a5e <hts221_power_on_set>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	e004      	b.n	800246e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	e015      	b.n	80024b8 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3320      	adds	r3, #32
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fade 	bl	8002a5e <hts221_power_on_set>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	e004      	b.n	80024b8 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f87f 	bl	80025d0 <HTS221_GetOutputDataRate>
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80024e8:	ed97 0a00 	vldr	s0, [r7]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8b3 	bl	8002658 <HTS221_SetOutputDataRate>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3320      	adds	r3, #32
 800250a:	f107 020c 	add.w	r2, r7, #12
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fbb0 	bl	8002c76 <hts221_temp_adc_point_0_get>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
 8002520:	e052      	b.n	80025c8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0220 	add.w	r2, r3, #32
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	3304      	adds	r3, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f000 faf6 	bl	8002b22 <hts221_temp_deg_point_0_get>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	e042      	b.n	80025c8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f103 0220 	add.w	r2, r3, #32
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	3308      	adds	r3, #8
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f000 fbb4 	bl	8002cbe <hts221_temp_adc_point_1_get>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	e032      	b.n	80025c8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f103 0220 	add.w	r2, r3, #32
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	330c      	adds	r3, #12
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 fb07 	bl	8002b84 <hts221_temp_deg_point_1_get>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	e022      	b.n	80025c8 <HTS221_TEMP_GetTemperature+0xcc>
 8002582:	2300      	movs	r3, #0
 8002584:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3320      	adds	r3, #32
 800258a:	f107 021c 	add.w	r2, r7, #28
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fa30 	bl	80029f6 <hts221_temperature_raw_get>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	e012      	b.n	80025c8 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80025a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	eeb0 0a67 	vmov.f32	s0, s15
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f8aa 	bl	8002710 <Linear_Interpolation>
 80025bc:	eef0 7a40 	vmov.f32	s15, s0
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3320      	adds	r3, #32
 80025e2:	f107 020b 	add.w	r2, r7, #11
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f983 	bl	80028f4 <hts221_data_rate_get>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	e025      	b.n	8002646 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d81d      	bhi.n	800263c <HTS221_GetOutputDataRate+0x6c>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HTS221_GetOutputDataRate+0x38>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	08002623 	.word	0x08002623
 8002610:	0800262d 	.word	0x0800262d
 8002614:	08002635 	.word	0x08002635
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
      break;
 8002620:	e010      	b.n	8002644 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002628:	601a      	str	r2, [r3, #0]
      break;
 800262a:	e00b      	b.n	8002644 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HTS221_GetOutputDataRate+0x80>)
 8002630:	601a      	str	r2, [r3, #0]
      break;
 8002632:	e007      	b.n	8002644 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HTS221_GetOutputDataRate+0x84>)
 8002638:	601a      	str	r2, [r3, #0]
      break;
 800263a:	e003      	b.n	8002644 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	60fb      	str	r3, [r7, #12]
      break;
 8002642:	bf00      	nop
  }

  return ret;
 8002644:	68fb      	ldr	r3, [r7, #12]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40e00000 	.word	0x40e00000
 8002654:	41480000 	.word	0x41480000

08002658 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002664:	edd7 7a00 	vldr	s15, [r7]
 8002668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800266c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d801      	bhi.n	800267a <HTS221_SetOutputDataRate+0x22>
 8002676:	2301      	movs	r3, #1
 8002678:	e00b      	b.n	8002692 <HTS221_SetOutputDataRate+0x3a>
 800267a:	edd7 7a00 	vldr	s15, [r7]
 800267e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268a:	d801      	bhi.n	8002690 <HTS221_SetOutputDataRate+0x38>
 800268c:	2302      	movs	r3, #2
 800268e:	e000      	b.n	8002692 <HTS221_SetOutputDataRate+0x3a>
 8002690:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002692:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3320      	adds	r3, #32
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f902 	bl	80028a6 <hts221_data_rate_set>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	e000      	b.n	80026b0 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3320      	adds	r3, #32
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f9c9 	bl	8002a5e <hts221_power_on_set>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e017      	b.n	8002708 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3320      	adds	r3, #32
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f940 	bl	8002964 <hts221_block_data_update_set>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e00b      	b.n	8002708 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80026f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffaf 	bl	8002658 <HTS221_SetOutputDataRate>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
 8002704:	e000      	b.n	8002708 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	edd3 7a01 	vldr	s15, [r3, #4]
 8002728:	ee37 7a67 	vsub.f32	s14, s14, s15
 800272c:	edd7 7a00 	vldr	s15, [r7]
 8002730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	edd3 6a02 	vldr	s13, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002740:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	ed93 6a00 	vldr	s12, [r3]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002750:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002754:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800276c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002770:	eef0 7a66 	vmov.f32	s15, s13
}
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002782:	b590      	push	{r4, r7, lr}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	461a      	mov	r2, r3
 800278e:	460b      	mov	r3, r1
 8002790:	72fb      	strb	r3, [r7, #11]
 8002792:	4613      	mov	r3, r2
 8002794:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10e      	bne.n	80027c0 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	695c      	ldr	r4, [r3, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	7b1b      	ldrb	r3, [r3, #12]
 80027aa:	b298      	uxth	r0, r3
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	b299      	uxth	r1, r3
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	47a0      	blx	r4
 80027bc:	4603      	mov	r3, r0
 80027be:	e00d      	b.n	80027dc <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	695c      	ldr	r4, [r3, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	7b1b      	ldrb	r3, [r3, #12]
 80027c8:	b298      	uxth	r0, r3
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	b299      	uxth	r1, r3
 80027d4:	893b      	ldrh	r3, [r7, #8]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	47a0      	blx	r4
 80027da:	4603      	mov	r3, r0
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd90      	pop	{r4, r7, pc}

080027e4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	461a      	mov	r2, r3
 80027f0:	460b      	mov	r3, r1
 80027f2:	72fb      	strb	r3, [r7, #11]
 80027f4:	4613      	mov	r3, r2
 80027f6:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10e      	bne.n	8002822 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	691c      	ldr	r4, [r3, #16]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	7b1b      	ldrb	r3, [r3, #12]
 800280c:	b298      	uxth	r0, r3
 800280e:	7afb      	ldrb	r3, [r7, #11]
 8002810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002814:	b2db      	uxtb	r3, r3
 8002816:	b299      	uxth	r1, r3
 8002818:	893b      	ldrh	r3, [r7, #8]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	47a0      	blx	r4
 800281e:	4603      	mov	r3, r0
 8002820:	e00d      	b.n	800283e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	691c      	ldr	r4, [r3, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	7b1b      	ldrb	r3, [r3, #12]
 800282a:	b298      	uxth	r0, r3
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002832:	b2db      	uxtb	r3, r3
 8002834:	b299      	uxth	r1, r3
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	47a0      	blx	r4
 800283c:	4603      	mov	r3, r0
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd90      	pop	{r4, r7, pc}

08002846 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8002846:	b590      	push	{r4, r7, lr}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	461a      	mov	r2, r3
 8002852:	460b      	mov	r3, r1
 8002854:	72fb      	strb	r3, [r7, #11]
 8002856:	4613      	mov	r3, r2
 8002858:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685c      	ldr	r4, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68d8      	ldr	r0, [r3, #12]
 8002862:	893b      	ldrh	r3, [r7, #8]
 8002864:	7af9      	ldrb	r1, [r7, #11]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	47a0      	blx	r4
 800286a:	6178      	str	r0, [r7, #20]

  return ret;
 800286c:	697b      	ldr	r3, [r7, #20]
}
 800286e:	4618      	mov	r0, r3
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}

08002876 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002876:	b590      	push	{r4, r7, lr}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	461a      	mov	r2, r3
 8002882:	460b      	mov	r3, r1
 8002884:	72fb      	strb	r3, [r7, #11]
 8002886:	4613      	mov	r3, r2
 8002888:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681c      	ldr	r4, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68d8      	ldr	r0, [r3, #12]
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	7af9      	ldrb	r1, [r7, #11]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	47a0      	blx	r4
 800289a:	6178      	str	r0, [r7, #20]

  return ret;
 800289c:	697b      	ldr	r3, [r7, #20]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028b2:	f107 0208 	add.w	r2, r7, #8
 80028b6:	2301      	movs	r3, #1
 80028b8:	2120      	movs	r1, #32
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffc3 	bl	8002846 <hts221_read_reg>
 80028c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10f      	bne.n	80028e8 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	7a3b      	ldrb	r3, [r7, #8]
 80028d2:	f362 0301 	bfi	r3, r2, #0, #2
 80028d6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028d8:	f107 0208 	add.w	r2, r7, #8
 80028dc:	2301      	movs	r3, #1
 80028de:	2120      	movs	r1, #32
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ffc8 	bl	8002876 <hts221_write_reg>
 80028e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028e8:	68fb      	ldr	r3, [r7, #12]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028fe:	f107 0208 	add.w	r2, r7, #8
 8002902:	2301      	movs	r3, #1
 8002904:	2120      	movs	r1, #32
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff9d 	bl	8002846 <hts221_read_reg>
 800290c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800290e:	7a3b      	ldrb	r3, [r7, #8]
 8002910:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b03      	cmp	r3, #3
 8002918:	d81a      	bhi.n	8002950 <hts221_data_rate_get+0x5c>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <hts221_data_rate_get+0x2c>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002931 	.word	0x08002931
 8002924:	08002939 	.word	0x08002939
 8002928:	08002941 	.word	0x08002941
 800292c:	08002949 	.word	0x08002949
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
      break;
 8002936:	e00f      	b.n	8002958 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
      break;
 800293e:	e00b      	b.n	8002958 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2202      	movs	r2, #2
 8002944:	701a      	strb	r2, [r3, #0]
      break;
 8002946:	e007      	b.n	8002958 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2203      	movs	r2, #3
 800294c:	701a      	strb	r2, [r3, #0]
      break;
 800294e:	e003      	b.n	8002958 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2204      	movs	r2, #4
 8002954:	701a      	strb	r2, [r3, #0]
      break;
 8002956:	bf00      	nop
  }

  return ret;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop

08002964 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002970:	f107 0208 	add.w	r2, r7, #8
 8002974:	2301      	movs	r3, #1
 8002976:	2120      	movs	r1, #32
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff64 	bl	8002846 <hts221_read_reg>
 800297e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7a3b      	ldrb	r3, [r7, #8]
 8002990:	f362 0382 	bfi	r3, r2, #2, #1
 8002994:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002996:	f107 0208 	add.w	r2, r7, #8
 800299a:	2301      	movs	r3, #1
 800299c:	2120      	movs	r1, #32
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ff69 	bl	8002876 <hts221_write_reg>
 80029a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80029ba:	f107 0208 	add.w	r2, r7, #8
 80029be:	2302      	movs	r3, #2
 80029c0:	2128      	movs	r1, #40	; 0x28
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff3f 	bl	8002846 <hts221_read_reg>
 80029c8:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80029ca:	7a7b      	ldrb	r3, [r7, #9]
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	b29a      	uxth	r2, r3
 80029de:	7a3b      	ldrb	r3, [r7, #8]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	801a      	strh	r2, [r3, #0]

  return ret;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002a00:	f107 0208 	add.w	r2, r7, #8
 8002a04:	2302      	movs	r3, #2
 8002a06:	212a      	movs	r1, #42	; 0x2a
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff1c 	bl	8002846 <hts221_read_reg>
 8002a0e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002a10:	7a7b      	ldrb	r3, [r7, #9]
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	7a3b      	ldrb	r3, [r7, #8]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	801a      	strh	r2, [r3, #0]

  return ret;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002a46:	2301      	movs	r3, #1
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fefa 	bl	8002846 <hts221_read_reg>
 8002a52:	60f8      	str	r0, [r7, #12]

  return ret;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a6a:	f107 0208 	add.w	r2, r7, #8
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2120      	movs	r1, #32
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fee7 	bl	8002846 <hts221_read_reg>
 8002a78:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	7a3b      	ldrb	r3, [r7, #8]
 8002a8a:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a8e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002a90:	f107 0208 	add.w	r2, r7, #8
 8002a94:	2301      	movs	r3, #1
 8002a96:	2120      	movs	r1, #32
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feec 	bl	8002876 <hts221_write_reg>
 8002a9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002ab4:	f107 020b 	add.w	r2, r7, #11
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2130      	movs	r1, #48	; 0x30
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fec2 	bl	8002846 <hts221_read_reg>
 8002ac2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ace:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002af0:	f107 020b 	add.w	r2, r7, #11
 8002af4:	2301      	movs	r3, #1
 8002af6:	2131      	movs	r1, #49	; 0x31
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fea4 	bl	8002846 <hts221_read_reg>
 8002afe:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002b2c:	f107 020f 	add.w	r2, r7, #15
 8002b30:	2301      	movs	r3, #1
 8002b32:	2132      	movs	r1, #50	; 0x32
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff fe86 	bl	8002846 <hts221_read_reg>
 8002b3a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11b      	bne.n	8002b7a <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002b42:	f107 0210 	add.w	r2, r7, #16
 8002b46:	2301      	movs	r3, #1
 8002b48:	2135      	movs	r1, #53	; 0x35
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fe7b 	bl	8002846 <hts221_read_reg>
 8002b50:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002b52:	7c3b      	ldrb	r3, [r7, #16]
 8002b54:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	4413      	add	r3, r2
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b6c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002b8e:	f107 020f 	add.w	r2, r7, #15
 8002b92:	2301      	movs	r3, #1
 8002b94:	2133      	movs	r1, #51	; 0x33
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fe55 	bl	8002846 <hts221_read_reg>
 8002b9c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d11b      	bne.n	8002bdc <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002ba4:	f107 0210 	add.w	r2, r7, #16
 8002ba8:	2301      	movs	r3, #1
 8002baa:	2135      	movs	r1, #53	; 0x35
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fe4a 	bl	8002846 <hts221_read_reg>
 8002bb2:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002bb4:	7c3b      	ldrb	r3, [r7, #16]
 8002bb6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bce:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002bdc:	697b      	ldr	r3, [r7, #20]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002bf0:	f107 0208 	add.w	r2, r7, #8
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	2136      	movs	r1, #54	; 0x36
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fe24 	bl	8002846 <hts221_read_reg>
 8002bfe:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002c00:	7a7b      	ldrb	r3, [r7, #9]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	7a3b      	ldrb	r3, [r7, #8]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002c12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002c24:	68fb      	ldr	r3, [r7, #12]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002c38:	f107 0208 	add.w	r2, r7, #8
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	213a      	movs	r1, #58	; 0x3a
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fe00 	bl	8002846 <hts221_read_reg>
 8002c46:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002c48:	7a7b      	ldrb	r3, [r7, #9]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	7a3b      	ldrb	r3, [r7, #8]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002c5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002c80:	f107 0208 	add.w	r2, r7, #8
 8002c84:	2302      	movs	r3, #2
 8002c86:	213c      	movs	r1, #60	; 0x3c
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fddc 	bl	8002846 <hts221_read_reg>
 8002c8e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002c90:	7a7b      	ldrb	r3, [r7, #9]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	7a3b      	ldrb	r3, [r7, #8]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002ca2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002cc8:	f107 0208 	add.w	r2, r7, #8
 8002ccc:	2302      	movs	r3, #2
 8002cce:	213e      	movs	r1, #62	; 0x3e
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fdb8 	bl	8002846 <hts221_read_reg>
 8002cd6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002cd8:	7a7b      	ldrb	r3, [r7, #9]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	7a3b      	ldrb	r3, [r7, #8]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002cea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e051      	b.n	8002dc8 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	7b1a      	ldrb	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <LIS2DW12_RegisterBusIO+0xcc>)
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <LIS2DW12_RegisterBusIO+0xd0>)
 8002d66:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e020      	b.n	8002dc8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4798      	blx	r3
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e016      	b.n	8002dc8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d112      	bne.n	8002dc8 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002dac:	2305      	movs	r3, #5
 8002dae:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002db0:	7afb      	ldrb	r3, [r7, #11]
 8002db2:	461a      	mov	r2, r3
 8002db4:	2121      	movs	r1, #33	; 0x21
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fcc1 	bl	800373e <LIS2DW12_Write_Reg>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	08003ad1 	.word	0x08003ad1
 8002dd8:	08003b07 	.word	0x08003b07

08002ddc <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3320      	adds	r3, #32
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 f9ce 	bl	800418c <lis2dw12_auto_increment_set>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	e04b      	b.n	8002e94 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3320      	adds	r3, #32
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 f8e2 	bl	8003fcc <lis2dw12_block_data_update_set>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	e03f      	b.n	8002e94 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3320      	adds	r3, #32
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f9dc 	bl	80041d8 <lis2dw12_fifo_mode_set>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e033      	b.n	8002e94 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3320      	adds	r3, #32
 8002e30:	2104      	movs	r1, #4
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 feb2 	bl	8003b9c <lis2dw12_power_mode_set>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e027      	b.n	8002e94 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <LIS2DW12_Init+0xc0>)
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3320      	adds	r3, #32
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 ffa3 	bl	8003dac <lis2dw12_data_rate_set>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	e010      	b.n	8002e94 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3320      	adds	r3, #32
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f8cd 	bl	8004018 <lis2dw12_full_scale_set>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e004      	b.n	8002e94 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	42c80000 	.word	0x42c80000

08002ea0 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f888 	bl	8002fbe <LIS2DW12_ACC_Disable>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb8:	e010      	b.n	8002edc <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3320      	adds	r3, #32
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 f938 	bl	800416a <lis2dw12_device_id_get>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	e000      	b.n	8002f08 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <LIS2DW12_GetCapabilities+0x58>)
 8002f50:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	44c80000 	.word	0x44c80000

08002f6c <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e019      	b.n	8002fb6 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f94:	461a      	mov	r2, r3
 8002f96:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fbea 	bl	8003774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e004      	b.n	8002fb6 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e010      	b.n	8002ff6 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3320      	adds	r3, #32
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fee6 	bl	8003dac <lis2dw12_data_rate_set>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e004      	b.n	8002ff6 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3320      	adds	r3, #32
 8003012:	f107 020b 	add.w	r2, r7, #11
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f823 	bl	8004064 <lis2dw12_full_scale_get>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	e080      	b.n	800312c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3320      	adds	r3, #32
 800302e:	f107 020a 	add.w	r2, r7, #10
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fdff 	bl	8003c38 <lis2dw12_power_mode_get>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	e072      	b.n	800312c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003046:	7abb      	ldrb	r3, [r7, #10]
 8003048:	2b1b      	cmp	r3, #27
 800304a:	bf8c      	ite	hi
 800304c:	2201      	movhi	r2, #1
 800304e:	2200      	movls	r2, #0
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	2a00      	cmp	r2, #0
 8003054:	d162      	bne.n	800311c <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003056:	2201      	movs	r2, #1
 8003058:	409a      	lsls	r2, r3
 800305a:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 800305e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d12f      	bne.n	80030d0 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003070:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04c      	beq.n	800311c <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d81b      	bhi.n	80030c0 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <LIS2DW12_ACC_GetSensitivity+0x90>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030a9 	.word	0x080030a9
 8003098:	080030b1 	.word	0x080030b1
 800309c:	080030b9 	.word	0x080030b9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4a24      	ldr	r2, [pc, #144]	; (8003134 <LIS2DW12_ACC_GetSensitivity+0x134>)
 80030a4:	601a      	str	r2, [r3, #0]
          break;
 80030a6:	e012      	b.n	80030ce <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <LIS2DW12_ACC_GetSensitivity+0x138>)
 80030ac:	601a      	str	r2, [r3, #0]
          break;
 80030ae:	e00e      	b.n	80030ce <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4a22      	ldr	r2, [pc, #136]	; (800313c <LIS2DW12_ACC_GetSensitivity+0x13c>)
 80030b4:	601a      	str	r2, [r3, #0]
          break;
 80030b6:	e00a      	b.n	80030ce <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <LIS2DW12_ACC_GetSensitivity+0x140>)
 80030bc:	601a      	str	r2, [r3, #0]
          break;
 80030be:	e006      	b.n	80030ce <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4a20      	ldr	r2, [pc, #128]	; (8003144 <LIS2DW12_ACC_GetSensitivity+0x144>)
 80030c4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	60fb      	str	r3, [r7, #12]
          break;
 80030cc:	bf00      	nop
      }
      break;
 80030ce:	e02c      	b.n	800312a <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d81a      	bhi.n	800310c <LIS2DW12_ACC_GetSensitivity+0x10c>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <LIS2DW12_ACC_GetSensitivity+0xdc>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030f5 	.word	0x080030f5
 80030e4:	080030fd 	.word	0x080030fd
 80030e8:	08003105 	.word	0x08003105
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4a16      	ldr	r2, [pc, #88]	; (8003148 <LIS2DW12_ACC_GetSensitivity+0x148>)
 80030f0:	601a      	str	r2, [r3, #0]
          break;
 80030f2:	e012      	b.n	800311a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <LIS2DW12_ACC_GetSensitivity+0x14c>)
 80030f8:	601a      	str	r2, [r3, #0]
          break;
 80030fa:	e00e      	b.n	800311a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003100:	601a      	str	r2, [r3, #0]
          break;
 8003102:	e00a      	b.n	800311a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003108:	601a      	str	r2, [r3, #0]
          break;
 800310a:	e006      	b.n	800311a <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003110:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	60fb      	str	r3, [r7, #12]
          break;
 8003118:	bf00      	nop
      }
      break;
 800311a:	e006      	b.n	800312a <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003120:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	60fb      	str	r3, [r7, #12]
      break;
 8003128:	bf00      	nop
  }

  return ret;
 800312a:	68fb      	ldr	r3, [r7, #12]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	3f79db23 	.word	0x3f79db23
 8003138:	3ff9db23 	.word	0x3ff9db23
 800313c:	4079db23 	.word	0x4079db23
 8003140:	40f9db23 	.word	0x40f9db23
 8003144:	bf800000 	.word	0xbf800000
 8003148:	3e79db23 	.word	0x3e79db23
 800314c:	3ef9db23 	.word	0x3ef9db23

08003150 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3320      	adds	r3, #32
 8003162:	f107 020b 	add.w	r2, r7, #11
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fe65 	bl	8003e38 <lis2dw12_data_rate_get>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
 8003178:	e14f      	b.n	800341a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3320      	adds	r3, #32
 800317e:	f107 020a 	add.w	r2, r7, #10
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fd57 	bl	8003c38 <lis2dw12_power_mode_get>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	e141      	b.n	800341a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	2b32      	cmp	r3, #50	; 0x32
 800319a:	f200 8136 	bhi.w	800340a <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	08003271 	.word	0x08003271
 80031a8:	0800327b 	.word	0x0800327b
 80031ac:	080032d5 	.word	0x080032d5
 80031b0:	080032dd 	.word	0x080032dd
 80031b4:	080032e5 	.word	0x080032e5
 80031b8:	080032ed 	.word	0x080032ed
 80031bc:	080032f5 	.word	0x080032f5
 80031c0:	080032fd 	.word	0x080032fd
 80031c4:	08003357 	.word	0x08003357
 80031c8:	080033b1 	.word	0x080033b1
 80031cc:	0800340b 	.word	0x0800340b
 80031d0:	0800340b 	.word	0x0800340b
 80031d4:	0800340b 	.word	0x0800340b
 80031d8:	0800340b 	.word	0x0800340b
 80031dc:	0800340b 	.word	0x0800340b
 80031e0:	0800340b 	.word	0x0800340b
 80031e4:	0800340b 	.word	0x0800340b
 80031e8:	0800340b 	.word	0x0800340b
 80031ec:	08003271 	.word	0x08003271
 80031f0:	0800340b 	.word	0x0800340b
 80031f4:	0800340b 	.word	0x0800340b
 80031f8:	0800340b 	.word	0x0800340b
 80031fc:	0800340b 	.word	0x0800340b
 8003200:	0800340b 	.word	0x0800340b
 8003204:	0800340b 	.word	0x0800340b
 8003208:	0800340b 	.word	0x0800340b
 800320c:	0800340b 	.word	0x0800340b
 8003210:	0800340b 	.word	0x0800340b
 8003214:	0800340b 	.word	0x0800340b
 8003218:	0800340b 	.word	0x0800340b
 800321c:	0800340b 	.word	0x0800340b
 8003220:	0800340b 	.word	0x0800340b
 8003224:	0800340b 	.word	0x0800340b
 8003228:	0800340b 	.word	0x0800340b
 800322c:	0800340b 	.word	0x0800340b
 8003230:	0800340b 	.word	0x0800340b
 8003234:	0800340b 	.word	0x0800340b
 8003238:	0800340b 	.word	0x0800340b
 800323c:	0800340b 	.word	0x0800340b
 8003240:	0800340b 	.word	0x0800340b
 8003244:	0800340b 	.word	0x0800340b
 8003248:	0800340b 	.word	0x0800340b
 800324c:	0800340b 	.word	0x0800340b
 8003250:	0800340b 	.word	0x0800340b
 8003254:	0800340b 	.word	0x0800340b
 8003258:	0800340b 	.word	0x0800340b
 800325c:	0800340b 	.word	0x0800340b
 8003260:	0800340b 	.word	0x0800340b
 8003264:	0800340b 	.word	0x0800340b
 8003268:	0800340b 	.word	0x0800340b
 800326c:	08003271 	.word	0x08003271
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
      break;
 8003278:	e0ce      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800327a:	7abb      	ldrb	r3, [r7, #10]
 800327c:	2b1b      	cmp	r3, #27
 800327e:	bf8c      	ite	hi
 8003280:	2201      	movhi	r2, #1
 8003282:	2200      	movls	r2, #0
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	2a00      	cmp	r2, #0
 8003288:	d11c      	bne.n	80032c4 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 800328a:	2201      	movs	r2, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8003294:	2a00      	cmp	r2, #0
 8003296:	bf14      	ite	ne
 8003298:	2201      	movne	r2, #1
 800329a:	2200      	moveq	r2, #0
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d10c      	bne.n	80032bc <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 80032a2:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80032b8:	601a      	str	r2, [r3, #0]
          break;
 80032ba:	e00a      	b.n	80032d2 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4a5a      	ldr	r2, [pc, #360]	; (8003428 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80032c0:	601a      	str	r2, [r3, #0]
          break;
 80032c2:	e006      	b.n	80032d2 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4a59      	ldr	r2, [pc, #356]	; (800342c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80032c8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	60fb      	str	r3, [r7, #12]
          break;
 80032d0:	bf00      	nop
      }
      break;
 80032d2:	e0a1      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4a53      	ldr	r2, [pc, #332]	; (8003424 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80032d8:	601a      	str	r2, [r3, #0]
      break;
 80032da:	e09d      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4a54      	ldr	r2, [pc, #336]	; (8003430 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 80032e0:	601a      	str	r2, [r3, #0]
      break;
 80032e2:	e099      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4a53      	ldr	r2, [pc, #332]	; (8003434 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 80032e8:	601a      	str	r2, [r3, #0]
      break;
 80032ea:	e095      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4a52      	ldr	r2, [pc, #328]	; (8003438 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 80032f0:	601a      	str	r2, [r3, #0]
      break;
 80032f2:	e091      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4a51      	ldr	r2, [pc, #324]	; (800343c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80032f8:	601a      	str	r2, [r3, #0]
      break;
 80032fa:	e08d      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80032fc:	7abb      	ldrb	r3, [r7, #10]
 80032fe:	2b1b      	cmp	r3, #27
 8003300:	bf8c      	ite	hi
 8003302:	2201      	movhi	r2, #1
 8003304:	2200      	movls	r2, #0
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	2a00      	cmp	r2, #0
 800330a:	d11c      	bne.n	8003346 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 800330c:	2201      	movs	r2, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8003316:	2a00      	cmp	r2, #0
 8003318:	bf14      	ite	ne
 800331a:	2201      	movne	r2, #1
 800331c:	2200      	moveq	r2, #0
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	2a00      	cmp	r2, #0
 8003322:	d10c      	bne.n	800333e <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003324:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	4a41      	ldr	r2, [pc, #260]	; (8003440 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 800333a:	601a      	str	r2, [r3, #0]
          break;
 800333c:	e00a      	b.n	8003354 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4a3e      	ldr	r2, [pc, #248]	; (800343c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003342:	601a      	str	r2, [r3, #0]
          break;
 8003344:	e006      	b.n	8003354 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4a38      	ldr	r2, [pc, #224]	; (800342c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800334a:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	60fb      	str	r3, [r7, #12]
          break;
 8003352:	bf00      	nop
      }
      break;
 8003354:	e060      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003356:	7abb      	ldrb	r3, [r7, #10]
 8003358:	2b1b      	cmp	r3, #27
 800335a:	bf8c      	ite	hi
 800335c:	2201      	movhi	r2, #1
 800335e:	2200      	movls	r2, #0
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	2a00      	cmp	r2, #0
 8003364:	d11c      	bne.n	80033a0 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003366:	2201      	movs	r2, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8003370:	2a00      	cmp	r2, #0
 8003372:	bf14      	ite	ne
 8003374:	2201      	movne	r2, #1
 8003376:	2200      	moveq	r2, #0
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	2a00      	cmp	r2, #0
 800337c:	d10c      	bne.n	8003398 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 800337e:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003394:	601a      	str	r2, [r3, #0]
          break;
 8003396:	e00a      	b.n	80033ae <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800339c:	601a      	str	r2, [r3, #0]
          break;
 800339e:	e006      	b.n	80033ae <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80033a4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	60fb      	str	r3, [r7, #12]
          break;
 80033ac:	bf00      	nop
      }
      break;
 80033ae:	e033      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80033b0:	7abb      	ldrb	r3, [r7, #10]
 80033b2:	2b1b      	cmp	r3, #27
 80033b4:	bf8c      	ite	hi
 80033b6:	2201      	movhi	r2, #1
 80033b8:	2200      	movls	r2, #0
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	2a00      	cmp	r2, #0
 80033be:	d11c      	bne.n	80033fa <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80033c0:	2201      	movs	r2, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80033ca:	2a00      	cmp	r2, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2201      	movne	r2, #1
 80033d0:	2200      	moveq	r2, #0
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	2a00      	cmp	r2, #0
 80033d6:	d10c      	bne.n	80033f2 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80033d8:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4a16      	ldr	r2, [pc, #88]	; (8003448 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80033ee:	601a      	str	r2, [r3, #0]
          break;
 80033f0:	e00a      	b.n	8003408 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80033f6:	601a      	str	r2, [r3, #0]
          break;
 80033f8:	e006      	b.n	8003408 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	4a0b      	ldr	r2, [pc, #44]	; (800342c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80033fe:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	60fb      	str	r3, [r7, #12]
          break;
 8003406:	bf00      	nop
      }
      break;
 8003408:	e006      	b.n	8003418 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	4a07      	ldr	r2, [pc, #28]	; (800342c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800340e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
      break;
 8003416:	bf00      	nop
  }

  return ret;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	41480000 	.word	0x41480000
 8003428:	3fcccccd 	.word	0x3fcccccd
 800342c:	bf800000 	.word	0xbf800000
 8003430:	41c80000 	.word	0x41c80000
 8003434:	42480000 	.word	0x42480000
 8003438:	42c80000 	.word	0x42c80000
 800343c:	43480000 	.word	0x43480000
 8003440:	43c80000 	.word	0x43c80000
 8003444:	44480000 	.word	0x44480000
 8003448:	44c80000 	.word	0x44c80000

0800344c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	ed97 0a00 	vldr	s0, [r7]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f805 	bl	8003470 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	ed87 0a02 	vstr	s0, [r7, #8]
 800347c:	460b      	mov	r3, r1
 800347e:	71fb      	strb	r3, [r7, #7]
 8003480:	4613      	mov	r3, r2
 8003482:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800348a:	2b01      	cmp	r3, #1
 800348c:	d109      	bne.n	80034a2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800348e:	79ba      	ldrb	r2, [r7, #6]
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4619      	mov	r1, r3
 8003494:	ed97 0a02 	vldr	s0, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f96b 	bl	8003774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800349e:	4603      	mov	r3, r0
 80034a0:	e008      	b.n	80034b4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80034a2:	79ba      	ldrb	r2, [r7, #6]
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	4619      	mov	r1, r3
 80034a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fa7d 	bl	80039ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80034b2:	4603      	mov	r3, r0
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3320      	adds	r3, #32
 80034ce:	f107 020b 	add.w	r2, r7, #11
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fdc5 	bl	8004064 <lis2dw12_full_scale_get>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
 80034e4:	e027      	b.n	8003536 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d81b      	bhi.n	8003524 <LIS2DW12_ACC_GetFullScale+0x68>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <LIS2DW12_ACC_GetFullScale+0x38>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	08003515 	.word	0x08003515
 8003500:	0800351d 	.word	0x0800351d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2202      	movs	r2, #2
 8003508:	601a      	str	r2, [r3, #0]
      break;
 800350a:	e013      	b.n	8003534 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	601a      	str	r2, [r3, #0]
      break;
 8003512:	e00f      	b.n	8003534 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2208      	movs	r2, #8
 8003518:	601a      	str	r2, [r3, #0]
      break;
 800351a:	e00b      	b.n	8003534 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	601a      	str	r2, [r3, #0]
      break;
 8003522:	e007      	b.n	8003534 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f04f 32ff 	mov.w	r2, #4294967295
 800352a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	60fb      	str	r3, [r7, #12]
      break;
 8003532:	bf00      	nop
  }

  return ret;
 8003534:	68fb      	ldr	r3, [r7, #12]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop

08003540 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	dd0b      	ble.n	8003568 <LIS2DW12_ACC_SetFullScale+0x28>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	dd06      	ble.n	8003564 <LIS2DW12_ACC_SetFullScale+0x24>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b08      	cmp	r3, #8
 800355a:	dc01      	bgt.n	8003560 <LIS2DW12_ACC_SetFullScale+0x20>
 800355c:	2302      	movs	r3, #2
 800355e:	e004      	b.n	800356a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003560:	2303      	movs	r3, #3
 8003562:	e002      	b.n	800356a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003568:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800356a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3320      	adds	r3, #32
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fd4f 	bl	8004018 <lis2dw12_full_scale_set>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003580:	f04f 33ff 	mov.w	r3, #4294967295
 8003584:	e000      	b.n	8003588 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3320      	adds	r3, #32
 80035a2:	f107 020b 	add.w	r2, r7, #11
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fb45 	bl	8003c38 <lis2dw12_power_mode_get>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	e068      	b.n	800368c <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3320      	adds	r3, #32
 80035be:	f107 020c 	add.w	r2, r7, #12
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fd85 	bl	80040d4 <lis2dw12_acceleration_raw_get>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
 80035d4:	e05a      	b.n	800368c <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80035d6:	7afb      	ldrb	r3, [r7, #11]
 80035d8:	2b1b      	cmp	r3, #27
 80035da:	bf8c      	ite	hi
 80035dc:	2201      	movhi	r2, #1
 80035de:	2200      	movls	r2, #0
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d14d      	bne.n	8003682 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80035e6:	2201      	movs	r2, #1
 80035e8:	409a      	lsls	r2, r3
 80035ea:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 80035ee:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d124      	bne.n	800364a <LIS2DW12_ACC_GetAxesRaw+0xba>
 8003600:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d037      	beq.n	8003682 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003612:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <LIS2DW12_ACC_GetAxesRaw+0x8c>
 800361a:	330f      	adds	r3, #15
 800361c:	111b      	asrs	r3, r3, #4
 800361e:	b21a      	sxth	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da00      	bge.n	800362e <LIS2DW12_ACC_GetAxesRaw+0x9e>
 800362c:	330f      	adds	r3, #15
 800362e:	111b      	asrs	r3, r3, #4
 8003630:	b21a      	sxth	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003636:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	da00      	bge.n	8003640 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 800363e:	330f      	adds	r3, #15
 8003640:	111b      	asrs	r3, r3, #4
 8003642:	b21a      	sxth	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	809a      	strh	r2, [r3, #4]
      break;
 8003648:	e01f      	b.n	800368a <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800364a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	da00      	bge.n	8003654 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8003652:	3303      	adds	r3, #3
 8003654:	109b      	asrs	r3, r3, #2
 8003656:	b21a      	sxth	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800365c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da00      	bge.n	8003666 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8003664:	3303      	adds	r3, #3
 8003666:	109b      	asrs	r3, r3, #2
 8003668:	b21a      	sxth	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800366e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	da00      	bge.n	8003678 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 8003676:	3303      	adds	r3, #3
 8003678:	109b      	asrs	r3, r3, #2
 800367a:	b21a      	sxth	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	809a      	strh	r2, [r3, #4]
      break;
 8003680:	e003      	b.n	800368a <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	617b      	str	r3, [r7, #20]
      break;
 8003688:	bf00      	nop
  }

  return ret;
 800368a:	697b      	ldr	r3, [r7, #20]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ff70 	bl	8003590 <LIS2DW12_ACC_GetAxesRaw>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e03c      	b.n	8003736 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fc9c 	bl	8003000 <LIS2DW12_ACC_GetSensitivity>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	e030      	b.n	8003736 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80036d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ec:	ee17 2a90 	vmov	r2, s15
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80036f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003700:	edd7 7a03 	vldr	s15, [r7, #12]
 8003704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800370c:	ee17 2a90 	vmov	r2, s15
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003714:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003720:	edd7 7a03 	vldr	s15, [r7, #12]
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800372c:	ee17 2a90 	vmov	r2, s15
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	70fb      	strb	r3, [r7, #3]
 800374a:	4613      	mov	r3, r2
 800374c:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f103 0020 	add.w	r0, r3, #32
 8003754:	1cba      	adds	r2, r7, #2
 8003756:	78f9      	ldrb	r1, [r7, #3]
 8003758:	2301      	movs	r3, #1
 800375a:	f000 fa07 	bl	8003b6c <lis2dw12_write_reg>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	e000      	b.n	800376c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003780:	460b      	mov	r3, r1
 8003782:	71fb      	strb	r3, [r7, #7]
 8003784:	4613      	mov	r3, r2
 8003786:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	3b01      	subs	r3, #1
 800378c:	2b03      	cmp	r3, #3
 800378e:	d80b      	bhi.n	80037a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037d5 	.word	0x080037d5
 800379c:	08003801 	.word	0x08003801
 80037a0:	0800382d 	.word	0x0800382d
 80037a4:	08003859 	.word	0x08003859
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80037a8:	79bb      	ldrb	r3, [r7, #6]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80037ae:	2304      	movs	r3, #4
 80037b0:	75fb      	strb	r3, [r7, #23]
          break;
 80037b2:	e002      	b.n	80037ba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80037b4:	2314      	movs	r3, #20
 80037b6:	75fb      	strb	r3, [r7, #23]
          break;
 80037b8:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80037ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80037be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80037c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d400      	bmi.n	80037ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80037cc:	e05a      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80037ce:	4b6f      	ldr	r3, [pc, #444]	; (800398c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80037d0:	60bb      	str	r3, [r7, #8]
      break;
 80037d2:	e057      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80037d4:	79bb      	ldrb	r3, [r7, #6]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d002      	beq.n	80037e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80037da:	2303      	movs	r3, #3
 80037dc:	75fb      	strb	r3, [r7, #23]
          break;
 80037de:	e002      	b.n	80037e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80037e0:	2313      	movs	r3, #19
 80037e2:	75fb      	strb	r3, [r7, #23]
          break;
 80037e4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80037e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ea:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003990 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80037ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	dc00      	bgt.n	80037fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80037f8:	e044      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80037fa:	4b66      	ldr	r3, [pc, #408]	; (8003994 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80037fc:	60bb      	str	r3, [r7, #8]
      break;
 80037fe:	e041      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003800:	79bb      	ldrb	r3, [r7, #6]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d002      	beq.n	800380c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8003806:	2302      	movs	r3, #2
 8003808:	75fb      	strb	r3, [r7, #23]
          break;
 800380a:	e002      	b.n	8003812 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800380c:	2312      	movs	r3, #18
 800380e:	75fb      	strb	r3, [r7, #23]
          break;
 8003810:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003812:	edd7 7a02 	vldr	s15, [r7, #8]
 8003816:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003990 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	dc00      	bgt.n	8003826 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8003824:	e02e      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003828:	60bb      	str	r3, [r7, #8]
      break;
 800382a:	e02b      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 800382c:	79bb      	ldrb	r3, [r7, #6]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d002      	beq.n	8003838 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
          break;
 8003836:	e002      	b.n	800383e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003838:	2311      	movs	r3, #17
 800383a:	75fb      	strb	r3, [r7, #23]
          break;
 800383c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800383e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003842:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003990 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	dc00      	bgt.n	8003852 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8003850:	e018      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003852:	4b50      	ldr	r3, [pc, #320]	; (8003994 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003854:	60bb      	str	r3, [r7, #8]
      break;
 8003856:	e015      	b.n	8003884 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003858:	79bb      	ldrb	r3, [r7, #6]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d002      	beq.n	8003864 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
          break;
 8003862:	e002      	b.n	800386a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003864:	2310      	movs	r3, #16
 8003866:	75fb      	strb	r3, [r7, #23]
          break;
 8003868:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800386a:	edd7 7a02 	vldr	s15, [r7, #8]
 800386e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003990 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387a:	dc00      	bgt.n	800387e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 800387c:	e001      	b.n	8003882 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 800387e:	4b45      	ldr	r3, [pc, #276]	; (8003994 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003880:	60bb      	str	r3, [r7, #8]
      break;
 8003882:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8003884:	edd7 7a02 	vldr	s15, [r7, #8]
 8003888:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003998 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 800388c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	d801      	bhi.n	800389a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003896:	2301      	movs	r3, #1
 8003898:	e04d      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800389a:	edd7 7a02 	vldr	s15, [r7, #8]
 800389e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80038a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d801      	bhi.n	80038b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e042      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80038b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80038b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d801      	bhi.n	80038c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e037      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80038c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ca:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800399c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80038ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	d801      	bhi.n	80038dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80038d8:	2304      	movs	r3, #4
 80038da:	e02c      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80038dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80039a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80038e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ec:	d801      	bhi.n	80038f2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80038ee:	2305      	movs	r3, #5
 80038f0:	e021      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80038f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038f6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003990 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80038fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	d801      	bhi.n	8003908 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003904:	2306      	movs	r3, #6
 8003906:	e016      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003908:	edd7 7a02 	vldr	s15, [r7, #8]
 800390c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80039a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d801      	bhi.n	800391e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800391a:	2307      	movs	r3, #7
 800391c:	e00b      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800391e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003922:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80039a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8003926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	d801      	bhi.n	8003934 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8003930:	2308      	movs	r3, #8
 8003932:	e000      	b.n	8003936 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003934:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8003936:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3320      	adds	r3, #32
 800393c:	7dba      	ldrb	r2, [r7, #22]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fa33 	bl	8003dac <lis2dw12_data_rate_set>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	e018      	b.n	8003984 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3320      	adds	r3, #32
 8003956:	7dfa      	ldrb	r2, [r7, #23]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f91e 	bl	8003b9c <lis2dw12_power_mode_set>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e00b      	b.n	8003984 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	79fa      	ldrb	r2, [r7, #7]
 8003976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	79ba      	ldrb	r2, [r7, #6]
 800397e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	41480000 	.word	0x41480000
 8003990:	43480000 	.word	0x43480000
 8003994:	43480000 	.word	0x43480000
 8003998:	3fcccccd 	.word	0x3fcccccd
 800399c:	42480000 	.word	0x42480000
 80039a0:	42c80000 	.word	0x42c80000
 80039a4:	43c80000 	.word	0x43c80000
 80039a8:	44480000 	.word	0x44480000

080039ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80039b8:	460b      	mov	r3, r1
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	4613      	mov	r3, r2
 80039be:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	79fa      	ldrb	r2, [r7, #7]
 80039c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	79ba      	ldrb	r2, [r7, #6]
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80039d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003a94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80039d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	d801      	bhi.n	80039e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80039e2:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80039e4:	e04d      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80039e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ea:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80039ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f6:	d801      	bhi.n	80039fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80039fa:	e042      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80039fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a00:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	d801      	bhi.n	8003a12 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003a10:	e037      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8003a12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a16:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003aa4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	d801      	bhi.n	8003a28 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8003a24:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8003a26:	e02c      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8003a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a2c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003aac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	d801      	bhi.n	8003a3e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8003a3c:	e021      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8003a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a42:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ab4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8003a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4e:	d801      	bhi.n	8003a54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8003a52:	e016      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8003a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a58:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003abc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8003a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a64:	d801      	bhi.n	8003a6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003a68:	e00b      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8003a6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a6e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003ac4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8003a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	d801      	bhi.n	8003a80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003a7e:	e000      	b.n	8003a82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	3fcccccd 	.word	0x3fcccccd
 8003a98:	3fcccccd 	.word	0x3fcccccd
 8003a9c:	41480000 	.word	0x41480000
 8003aa0:	41c80000 	.word	0x41c80000
 8003aa4:	42480000 	.word	0x42480000
 8003aa8:	42480000 	.word	0x42480000
 8003aac:	42c80000 	.word	0x42c80000
 8003ab0:	42c80000 	.word	0x42c80000
 8003ab4:	43480000 	.word	0x43480000
 8003ab8:	43480000 	.word	0x43480000
 8003abc:	43c80000 	.word	0x43c80000
 8003ac0:	43c80000 	.word	0x43c80000
 8003ac4:	44480000 	.word	0x44480000
 8003ac8:	44480000 	.word	0x44480000
 8003acc:	44c80000 	.word	0x44c80000

08003ad0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	461a      	mov	r2, r3
 8003adc:	460b      	mov	r3, r1
 8003ade:	72fb      	strb	r3, [r7, #11]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	695c      	ldr	r4, [r3, #20]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	7b1b      	ldrb	r3, [r3, #12]
 8003af0:	b298      	uxth	r0, r3
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	b299      	uxth	r1, r3
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	47a0      	blx	r4
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd90      	pop	{r4, r7, pc}

08003b06 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b06:	b590      	push	{r4, r7, lr}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	461a      	mov	r2, r3
 8003b12:	460b      	mov	r3, r1
 8003b14:	72fb      	strb	r3, [r7, #11]
 8003b16:	4613      	mov	r3, r2
 8003b18:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	691c      	ldr	r4, [r3, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	7b1b      	ldrb	r3, [r3, #12]
 8003b26:	b298      	uxth	r0, r3
 8003b28:	7afb      	ldrb	r3, [r7, #11]
 8003b2a:	b299      	uxth	r1, r3
 8003b2c:	893b      	ldrh	r3, [r7, #8]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	47a0      	blx	r4
 8003b32:	4603      	mov	r3, r0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd90      	pop	{r4, r7, pc}

08003b3c <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	461a      	mov	r2, r3
 8003b48:	460b      	mov	r3, r1
 8003b4a:	72fb      	strb	r3, [r7, #11]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685c      	ldr	r4, [r3, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68d8      	ldr	r0, [r3, #12]
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	7af9      	ldrb	r1, [r7, #11]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	47a0      	blx	r4
 8003b60:	6178      	str	r0, [r7, #20]

  return ret;
 8003b62:	697b      	ldr	r3, [r7, #20]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd90      	pop	{r4, r7, pc}

08003b6c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	72fb      	strb	r3, [r7, #11]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681c      	ldr	r4, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68d8      	ldr	r0, [r3, #12]
 8003b88:	893b      	ldrh	r3, [r7, #8]
 8003b8a:	7af9      	ldrb	r1, [r7, #11]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	47a0      	blx	r4
 8003b90:	6178      	str	r0, [r7, #20]

  return ret;
 8003b92:	697b      	ldr	r3, [r7, #20]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}

08003b9c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003ba8:	f107 0210 	add.w	r2, r7, #16
 8003bac:	2301      	movs	r3, #1
 8003bae:	2120      	movs	r1, #32
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ffc3 	bl	8003b3c <lis2dw12_read_reg>
 8003bb6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	089b      	lsrs	r3, r3, #2
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	7c3b      	ldrb	r3, [r7, #16]
 8003bca:	f362 0383 	bfi	r3, r2, #2, #2
 8003bce:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	7c3b      	ldrb	r3, [r7, #16]
 8003bda:	f362 0301 	bfi	r3, r2, #0, #2
 8003bde:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003be0:	f107 0210 	add.w	r2, r7, #16
 8003be4:	2301      	movs	r3, #1
 8003be6:	2120      	movs	r1, #32
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ffbf 	bl	8003b6c <lis2dw12_write_reg>
 8003bee:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003bf6:	f107 020c 	add.w	r2, r7, #12
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2125      	movs	r1, #37	; 0x25
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff9c 	bl	8003b3c <lis2dw12_read_reg>
 8003c04:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d110      	bne.n	8003c2e <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	7b3b      	ldrb	r3, [r7, #12]
 8003c18:	f362 0382 	bfi	r3, r2, #2, #1
 8003c1c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003c1e:	f107 020c 	add.w	r2, r7, #12
 8003c22:	2301      	movs	r3, #1
 8003c24:	2125      	movs	r1, #37	; 0x25
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa0 	bl	8003b6c <lis2dw12_write_reg>
 8003c2c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003c2e:	697b      	ldr	r3, [r7, #20]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003c42:	f107 0210 	add.w	r2, r7, #16
 8003c46:	2301      	movs	r3, #1
 8003c48:	2120      	movs	r1, #32
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ff76 	bl	8003b3c <lis2dw12_read_reg>
 8003c50:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 80a3 	bne.w	8003da0 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003c5a:	f107 020c 	add.w	r2, r7, #12
 8003c5e:	2301      	movs	r3, #1
 8003c60:	2125      	movs	r1, #37	; 0x25
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ff6a 	bl	8003b3c <lis2dw12_read_reg>
 8003c68:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003c6a:	7b3b      	ldrb	r3, [r7, #12]
 8003c6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	011a      	lsls	r2, r3, #4
 8003c74:	7c3b      	ldrb	r3, [r7, #16]
 8003c76:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8003c80:	7c3a      	ldrb	r2, [r7, #16]
 8003c82:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8003c86:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003c88:	4413      	add	r3, r2
 8003c8a:	2b1b      	cmp	r3, #27
 8003c8c:	f200 8084 	bhi.w	8003d98 <lis2dw12_power_mode_get+0x160>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <lis2dw12_power_mode_get+0x60>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003d29 	.word	0x08003d29
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003d19 	.word	0x08003d19
 8003ca4:	08003d11 	.word	0x08003d11
 8003ca8:	08003d09 	.word	0x08003d09
 8003cac:	08003d99 	.word	0x08003d99
 8003cb0:	08003d99 	.word	0x08003d99
 8003cb4:	08003d99 	.word	0x08003d99
 8003cb8:	08003d49 	.word	0x08003d49
 8003cbc:	08003d41 	.word	0x08003d41
 8003cc0:	08003d39 	.word	0x08003d39
 8003cc4:	08003d31 	.word	0x08003d31
 8003cc8:	08003d99 	.word	0x08003d99
 8003ccc:	08003d99 	.word	0x08003d99
 8003cd0:	08003d99 	.word	0x08003d99
 8003cd4:	08003d99 	.word	0x08003d99
 8003cd8:	08003d71 	.word	0x08003d71
 8003cdc:	08003d69 	.word	0x08003d69
 8003ce0:	08003d61 	.word	0x08003d61
 8003ce4:	08003d59 	.word	0x08003d59
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003d99 	.word	0x08003d99
 8003cf0:	08003d99 	.word	0x08003d99
 8003cf4:	08003d99 	.word	0x08003d99
 8003cf8:	08003d91 	.word	0x08003d91
 8003cfc:	08003d89 	.word	0x08003d89
 8003d00:	08003d81 	.word	0x08003d81
 8003d04:	08003d79 	.word	0x08003d79
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
        break;
 8003d0e:	e047      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2203      	movs	r2, #3
 8003d14:	701a      	strb	r2, [r3, #0]
        break;
 8003d16:	e043      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	701a      	strb	r2, [r3, #0]
        break;
 8003d1e:	e03f      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2201      	movs	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
        break;
 8003d26:	e03b      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
        break;
 8003d2e:	e037      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	220b      	movs	r2, #11
 8003d34:	701a      	strb	r2, [r3, #0]
        break;
 8003d36:	e033      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	701a      	strb	r2, [r3, #0]
        break;
 8003d3e:	e02f      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2209      	movs	r2, #9
 8003d44:	701a      	strb	r2, [r3, #0]
        break;
 8003d46:	e02b      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	701a      	strb	r2, [r3, #0]
        break;
 8003d4e:	e027      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2214      	movs	r2, #20
 8003d54:	701a      	strb	r2, [r3, #0]
        break;
 8003d56:	e023      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2213      	movs	r2, #19
 8003d5c:	701a      	strb	r2, [r3, #0]
        break;
 8003d5e:	e01f      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2212      	movs	r2, #18
 8003d64:	701a      	strb	r2, [r3, #0]
        break;
 8003d66:	e01b      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2211      	movs	r2, #17
 8003d6c:	701a      	strb	r2, [r3, #0]
        break;
 8003d6e:	e017      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2210      	movs	r2, #16
 8003d74:	701a      	strb	r2, [r3, #0]
        break;
 8003d76:	e013      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	221b      	movs	r2, #27
 8003d7c:	701a      	strb	r2, [r3, #0]
        break;
 8003d7e:	e00f      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	221a      	movs	r2, #26
 8003d84:	701a      	strb	r2, [r3, #0]
        break;
 8003d86:	e00b      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2219      	movs	r2, #25
 8003d8c:	701a      	strb	r2, [r3, #0]
        break;
 8003d8e:	e007      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2218      	movs	r2, #24
 8003d94:	701a      	strb	r2, [r3, #0]
        break;
 8003d96:	e003      	b.n	8003da0 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	701a      	strb	r2, [r3, #0]
        break;
 8003d9e:	bf00      	nop
    }
  }

  return ret;
 8003da0:	697b      	ldr	r3, [r7, #20]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003db8:	f107 0210 	add.w	r2, r7, #16
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff febb 	bl	8003b3c <lis2dw12_read_reg>
 8003dc6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	7c3b      	ldrb	r3, [r7, #16]
 8003dd8:	f362 1307 	bfi	r3, r2, #4, #4
 8003ddc:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003dde:	f107 0210 	add.w	r2, r7, #16
 8003de2:	2301      	movs	r3, #1
 8003de4:	2120      	movs	r1, #32
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fec0 	bl	8003b6c <lis2dw12_write_reg>
 8003dec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003df4:	f107 020c 	add.w	r2, r7, #12
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2122      	movs	r1, #34	; 0x22
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fe9d 	bl	8003b3c <lis2dw12_read_reg>
 8003e02:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d110      	bne.n	8003e2c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	7b3b      	ldrb	r3, [r7, #12]
 8003e16:	f362 0301 	bfi	r3, r2, #0, #2
 8003e1a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003e1c:	f107 020c 	add.w	r2, r7, #12
 8003e20:	2301      	movs	r3, #1
 8003e22:	2122      	movs	r1, #34	; 0x22
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fea1 	bl	8003b6c <lis2dw12_write_reg>
 8003e2a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003e2c:	697b      	ldr	r3, [r7, #20]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003e42:	f107 0210 	add.w	r2, r7, #16
 8003e46:	2301      	movs	r3, #1
 8003e48:	2120      	movs	r1, #32
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fe76 	bl	8003b3c <lis2dw12_read_reg>
 8003e50:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 80b3 	bne.w	8003fc0 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003e5a:	f107 020c 	add.w	r2, r7, #12
 8003e5e:	2301      	movs	r3, #1
 8003e60:	2122      	movs	r1, #34	; 0x22
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fe6a 	bl	8003b3c <lis2dw12_read_reg>
 8003e68:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003e6a:	7b3b      	ldrb	r3, [r7, #12]
 8003e6c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	7c3a      	ldrb	r2, [r7, #16]
 8003e76:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	2b32      	cmp	r3, #50	; 0x32
 8003e80:	f200 809a 	bhi.w	8003fb8 <lis2dw12_data_rate_get+0x180>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <lis2dw12_data_rate_get+0x54>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003f59 	.word	0x08003f59
 8003e90:	08003f61 	.word	0x08003f61
 8003e94:	08003f69 	.word	0x08003f69
 8003e98:	08003f71 	.word	0x08003f71
 8003e9c:	08003f79 	.word	0x08003f79
 8003ea0:	08003f81 	.word	0x08003f81
 8003ea4:	08003f89 	.word	0x08003f89
 8003ea8:	08003f91 	.word	0x08003f91
 8003eac:	08003f99 	.word	0x08003f99
 8003eb0:	08003fa1 	.word	0x08003fa1
 8003eb4:	08003fb9 	.word	0x08003fb9
 8003eb8:	08003fb9 	.word	0x08003fb9
 8003ebc:	08003fb9 	.word	0x08003fb9
 8003ec0:	08003fb9 	.word	0x08003fb9
 8003ec4:	08003fb9 	.word	0x08003fb9
 8003ec8:	08003fb9 	.word	0x08003fb9
 8003ecc:	08003fb9 	.word	0x08003fb9
 8003ed0:	08003fb9 	.word	0x08003fb9
 8003ed4:	08003fb1 	.word	0x08003fb1
 8003ed8:	08003fb9 	.word	0x08003fb9
 8003edc:	08003fb9 	.word	0x08003fb9
 8003ee0:	08003fb9 	.word	0x08003fb9
 8003ee4:	08003fb9 	.word	0x08003fb9
 8003ee8:	08003fb9 	.word	0x08003fb9
 8003eec:	08003fb9 	.word	0x08003fb9
 8003ef0:	08003fb9 	.word	0x08003fb9
 8003ef4:	08003fb9 	.word	0x08003fb9
 8003ef8:	08003fb9 	.word	0x08003fb9
 8003efc:	08003fb9 	.word	0x08003fb9
 8003f00:	08003fb9 	.word	0x08003fb9
 8003f04:	08003fb9 	.word	0x08003fb9
 8003f08:	08003fb9 	.word	0x08003fb9
 8003f0c:	08003fb9 	.word	0x08003fb9
 8003f10:	08003fb9 	.word	0x08003fb9
 8003f14:	08003fb9 	.word	0x08003fb9
 8003f18:	08003fb9 	.word	0x08003fb9
 8003f1c:	08003fb9 	.word	0x08003fb9
 8003f20:	08003fb9 	.word	0x08003fb9
 8003f24:	08003fb9 	.word	0x08003fb9
 8003f28:	08003fb9 	.word	0x08003fb9
 8003f2c:	08003fb9 	.word	0x08003fb9
 8003f30:	08003fb9 	.word	0x08003fb9
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	08003fb9 	.word	0x08003fb9
 8003f3c:	08003fb9 	.word	0x08003fb9
 8003f40:	08003fb9 	.word	0x08003fb9
 8003f44:	08003fb9 	.word	0x08003fb9
 8003f48:	08003fb9 	.word	0x08003fb9
 8003f4c:	08003fb9 	.word	0x08003fb9
 8003f50:	08003fb9 	.word	0x08003fb9
 8003f54:	08003fa9 	.word	0x08003fa9
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
        break;
 8003f5e:	e02f      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
        break;
 8003f66:	e02b      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]
        break;
 8003f6e:	e027      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2203      	movs	r2, #3
 8003f74:	701a      	strb	r2, [r3, #0]
        break;
 8003f76:	e023      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	701a      	strb	r2, [r3, #0]
        break;
 8003f7e:	e01f      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2205      	movs	r2, #5
 8003f84:	701a      	strb	r2, [r3, #0]
        break;
 8003f86:	e01b      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2206      	movs	r2, #6
 8003f8c:	701a      	strb	r2, [r3, #0]
        break;
 8003f8e:	e017      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2207      	movs	r2, #7
 8003f94:	701a      	strb	r2, [r3, #0]
        break;
 8003f96:	e013      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	701a      	strb	r2, [r3, #0]
        break;
 8003f9e:	e00f      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2209      	movs	r2, #9
 8003fa4:	701a      	strb	r2, [r3, #0]
        break;
 8003fa6:	e00b      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2232      	movs	r2, #50	; 0x32
 8003fac:	701a      	strb	r2, [r3, #0]
        break;
 8003fae:	e007      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2212      	movs	r2, #18
 8003fb4:	701a      	strb	r2, [r3, #0]
        break;
 8003fb6:	e003      	b.n	8003fc0 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
        break;
 8003fbe:	bf00      	nop
    }
  }

  return ret;
 8003fc0:	697b      	ldr	r3, [r7, #20]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop

08003fcc <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003fd8:	f107 0208 	add.w	r2, r7, #8
 8003fdc:	2301      	movs	r3, #1
 8003fde:	2121      	movs	r1, #33	; 0x21
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff fdab 	bl	8003b3c <lis2dw12_read_reg>
 8003fe6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	7a3b      	ldrb	r3, [r7, #8]
 8003ff8:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ffc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003ffe:	f107 0208 	add.w	r2, r7, #8
 8004002:	2301      	movs	r3, #1
 8004004:	2121      	movs	r1, #33	; 0x21
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fdb0 	bl	8003b6c <lis2dw12_write_reg>
 800400c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004024:	f107 0208 	add.w	r2, r7, #8
 8004028:	2301      	movs	r3, #1
 800402a:	2125      	movs	r1, #37	; 0x25
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fd85 	bl	8003b3c <lis2dw12_read_reg>
 8004032:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	b2da      	uxtb	r2, r3
 8004042:	7a3b      	ldrb	r3, [r7, #8]
 8004044:	f362 1305 	bfi	r3, r2, #4, #2
 8004048:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800404a:	f107 0208 	add.w	r2, r7, #8
 800404e:	2301      	movs	r3, #1
 8004050:	2125      	movs	r1, #37	; 0x25
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fd8a 	bl	8003b6c <lis2dw12_write_reg>
 8004058:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800406e:	f107 0208 	add.w	r2, r7, #8
 8004072:	2301      	movs	r3, #1
 8004074:	2125      	movs	r1, #37	; 0x25
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fd60 	bl	8003b3c <lis2dw12_read_reg>
 800407c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800407e:	7a3b      	ldrb	r3, [r7, #8]
 8004080:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b03      	cmp	r3, #3
 8004088:	d81a      	bhi.n	80040c0 <lis2dw12_full_scale_get+0x5c>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <lis2dw12_full_scale_get+0x2c>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040a9 	.word	0x080040a9
 8004098:	080040b1 	.word	0x080040b1
 800409c:	080040b9 	.word	0x080040b9
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e00f      	b.n	80040c8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
      break;
 80040ae:	e00b      	b.n	80040c8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2202      	movs	r2, #2
 80040b4:	701a      	strb	r2, [r3, #0]
      break;
 80040b6:	e007      	b.n	80040c8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2203      	movs	r2, #3
 80040bc:	701a      	strb	r2, [r3, #0]
      break;
 80040be:	e003      	b.n	80040c8 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
      break;
 80040c6:	bf00      	nop
  }

  return ret;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop

080040d4 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80040de:	f107 020c 	add.w	r2, r7, #12
 80040e2:	2306      	movs	r3, #6
 80040e4:	2128      	movs	r1, #40	; 0x28
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fd28 	bl	8003b3c <lis2dw12_read_reg>
 80040ec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80040ee:	7b7b      	ldrb	r3, [r7, #13]
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	b29a      	uxth	r2, r3
 8004102:	7b3b      	ldrb	r3, [r7, #12]
 8004104:	b29b      	uxth	r3, r3
 8004106:	4413      	add	r3, r2
 8004108:	b29b      	uxth	r3, r3
 800410a:	b21a      	sxth	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	3302      	adds	r3, #2
 8004116:	b212      	sxth	r2, r2
 8004118:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	3302      	adds	r3, #2
 800411e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004122:	b29b      	uxth	r3, r3
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	b29a      	uxth	r2, r3
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	b29b      	uxth	r3, r3
 800412c:	4413      	add	r3, r2
 800412e:	b29a      	uxth	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	3302      	adds	r3, #2
 8004134:	b212      	sxth	r2, r2
 8004136:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004138:	7c7a      	ldrb	r2, [r7, #17]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	3304      	adds	r3, #4
 800413e:	b212      	sxth	r2, r2
 8004140:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800414a:	b29b      	uxth	r3, r3
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	b29a      	uxth	r2, r3
 8004150:	7c3b      	ldrb	r3, [r7, #16]
 8004152:	b29b      	uxth	r3, r3
 8004154:	4413      	add	r3, r2
 8004156:	b29a      	uxth	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3304      	adds	r3, #4
 800415c:	b212      	sxth	r2, r2
 800415e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004160:	697b      	ldr	r3, [r7, #20]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004174:	2301      	movs	r3, #1
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	210f      	movs	r1, #15
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fcde 	bl	8003b3c <lis2dw12_read_reg>
 8004180:	60f8      	str	r0, [r7, #12]

  return ret;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004198:	f107 0208 	add.w	r2, r7, #8
 800419c:	2301      	movs	r3, #1
 800419e:	2121      	movs	r1, #33	; 0x21
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fccb 	bl	8003b3c <lis2dw12_read_reg>
 80041a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	7a3b      	ldrb	r3, [r7, #8]
 80041b8:	f362 0382 	bfi	r3, r2, #2, #1
 80041bc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80041be:	f107 0208 	add.w	r2, r7, #8
 80041c2:	2301      	movs	r3, #1
 80041c4:	2121      	movs	r1, #33	; 0x21
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fcd0 	bl	8003b6c <lis2dw12_write_reg>
 80041cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80041e4:	f107 0208 	add.w	r2, r7, #8
 80041e8:	2301      	movs	r3, #1
 80041ea:	212e      	movs	r1, #46	; 0x2e
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fca5 	bl	8003b3c <lis2dw12_read_reg>
 80041f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b2da      	uxtb	r2, r3
 8004202:	7a3b      	ldrb	r3, [r7, #8]
 8004204:	f362 1347 	bfi	r3, r2, #5, #3
 8004208:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800420a:	f107 0208 	add.w	r2, r7, #8
 800420e:	2301      	movs	r3, #1
 8004210:	212e      	movs	r1, #46	; 0x2e
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fcaa 	bl	8003b6c <lis2dw12_write_reg>
 8004218:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004238:	f04f 33ff 	mov.w	r3, #4294967295
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e067      	b.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	7b1a      	ldrb	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a28      	ldr	r2, [pc, #160]	; (800431c <LIS2MDL_RegisterBusIO+0xf8>)
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a27      	ldr	r2, [pc, #156]	; (8004320 <LIS2MDL_RegisterBusIO+0xfc>)
 8004282:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e036      	b.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4798      	blx	r3
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e02c      	b.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d123      	bne.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10d      	bne.n	80042ec <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80042d0:	2334      	movs	r3, #52	; 0x34
 80042d2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	461a      	mov	r2, r3
 80042d8:	2162      	movs	r1, #98	; 0x62
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fb1b 	bl	8004916 <LIS2MDL_Write_Reg>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d014      	beq.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e012      	b.n	8004312 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d101      	bne.n	80042f8 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	e00c      	b.n	8004312 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3320      	adds	r3, #32
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 ff70 	bl	80051e4 <lis2mdl_i2c_interface_set>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e000      	b.n	8004312 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004310:	68fb      	ldr	r3, [r7, #12]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	0800496d 	.word	0x0800496d
 8004320:	080049ef 	.word	0x080049ef

08004324 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d144      	bne.n	80043be <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004334:	f107 0208 	add.w	r2, r7, #8
 8004338:	2301      	movs	r3, #1
 800433a:	2162      	movs	r1, #98	; 0x62
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fb97 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	e06c      	b.n	8004428 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800434e:	f107 020c 	add.w	r2, r7, #12
 8004352:	2301      	movs	r3, #1
 8004354:	2160      	movs	r1, #96	; 0x60
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fb8a 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e05f      	b.n	8004428 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004368:	7a3b      	ldrb	r3, [r7, #8]
 800436a:	f043 0310 	orr.w	r3, r3, #16
 800436e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004370:	7a3b      	ldrb	r3, [r7, #8]
 8004372:	f36f 0341 	bfc	r3, #1, #1
 8004376:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004378:	7b3b      	ldrb	r3, [r7, #12]
 800437a:	2202      	movs	r2, #2
 800437c:	f362 0301 	bfi	r3, r2, #0, #2
 8004380:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004382:	7b3b      	ldrb	r3, [r7, #12]
 8004384:	f043 030c 	orr.w	r3, r3, #12
 8004388:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800438a:	f107 0208 	add.w	r2, r7, #8
 800438e:	2301      	movs	r3, #1
 8004390:	2162      	movs	r1, #98	; 0x62
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fcab 	bl	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e041      	b.n	8004428 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80043a4:	f107 020c 	add.w	r2, r7, #12
 80043a8:	2301      	movs	r3, #1
 80043aa:	2160      	movs	r1, #96	; 0x60
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fc9e 	bl	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d032      	beq.n	800441e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	e034      	b.n	8004428 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3320      	adds	r3, #32
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe65 	bl	8005094 <lis2mdl_block_data_update_set>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80043d0:	f04f 33ff 	mov.w	r3, #4294967295
 80043d4:	e028      	b.n	8004428 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3320      	adds	r3, #32
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fdd4 	bl	8004f8a <lis2mdl_operating_mode_set>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	e01c      	b.n	8004428 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3320      	adds	r3, #32
 80043f2:	2103      	movs	r1, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fdee 	bl	8004fd6 <lis2mdl_data_rate_set>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	e010      	b.n	8004428 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3320      	adds	r3, #32
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fec3 	bl	8005198 <lis2mdl_self_test_set>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
 800441c:	e004      	b.n	8004428 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8a5 	bl	8004588 <LIS2MDL_MAG_Disable>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
 8004448:	e004      	b.n	8004454 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d10b      	bne.n	8004486 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800446e:	2301      	movs	r3, #1
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	214f      	movs	r1, #79	; 0x4f
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fafb 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
 8004484:	e00c      	b.n	80044a0 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3320      	adds	r3, #32
 800448a:	6839      	ldr	r1, [r7, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fe72 	bl	8005176 <lis2mdl_device_id_get>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	e000      	b.n	80044a0 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2201      	movs	r2, #1
 80044c2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2232      	movs	r2, #50	; 0x32
 80044da:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <LIS2MDL_GetCapabilities+0x58>)
 80044f0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	42c80000 	.word	0x42c80000

08004504 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e032      	b.n	8004580 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d11d      	bne.n	800455e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004522:	f107 020c 	add.w	r2, r7, #12
 8004526:	2301      	movs	r3, #1
 8004528:	2160      	movs	r1, #96	; 0x60
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 faa0 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	e021      	b.n	8004580 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 800453c:	7b3b      	ldrb	r3, [r7, #12]
 800453e:	f36f 0301 	bfc	r3, #0, #2
 8004542:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004544:	f107 020c 	add.w	r2, r7, #12
 8004548:	2301      	movs	r3, #1
 800454a:	2160      	movs	r1, #96	; 0x60
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fbce 	bl	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	e010      	b.n	8004580 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3320      	adds	r3, #32
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fd10 	bl	8004f8a <lis2mdl_operating_mode_set>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
 8004574:	e004      	b.n	8004580 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e033      	b.n	8004606 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d11e      	bne.n	80045e4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045a6:	f107 020c 	add.w	r2, r7, #12
 80045aa:	2301      	movs	r3, #1
 80045ac:	2160      	movs	r1, #96	; 0x60
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa5e 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	e022      	b.n	8004606 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80045c0:	7b3b      	ldrb	r3, [r7, #12]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f362 0301 	bfi	r3, r2, #0, #2
 80045c8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045ca:	f107 020c 	add.w	r2, r7, #12
 80045ce:	2301      	movs	r3, #1
 80045d0:	2160      	movs	r1, #96	; 0x60
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fb8b 	bl	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00e      	beq.n	80045fc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	e010      	b.n	8004606 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3320      	adds	r3, #32
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fccd 	bl	8004f8a <lis2mdl_operating_mode_set>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e004      	b.n	8004606 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800461e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3320      	adds	r3, #32
 8004642:	f107 020b 	add.w	r2, r7, #11
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fceb 	bl	8005024 <lis2mdl_data_rate_get>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	e023      	b.n	80046a2 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d81b      	bhi.n	8004698 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004679 	.word	0x08004679
 800466c:	08004681 	.word	0x08004681
 8004670:	08004689 	.word	0x08004689
 8004674:	08004691 	.word	0x08004691
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 800467c:	601a      	str	r2, [r3, #0]
      break;
 800467e:	e00f      	b.n	80046a0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4a0b      	ldr	r2, [pc, #44]	; (80046b0 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004684:	601a      	str	r2, [r3, #0]
      break;
 8004686:	e00b      	b.n	80046a0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 800468c:	601a      	str	r2, [r3, #0]
      break;
 800468e:	e007      	b.n	80046a0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004694:	601a      	str	r2, [r3, #0]
      break;
 8004696:	e003      	b.n	80046a0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	60fb      	str	r3, [r7, #12]
      break;
 800469e:	bf00      	nop
  }

  return ret;
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	41200000 	.word	0x41200000
 80046b0:	41a00000 	.word	0x41a00000
 80046b4:	42480000 	.word	0x42480000
 80046b8:	42c80000 	.word	0x42c80000

080046bc <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80046c8:	edd7 7a00 	vldr	s15, [r7]
 80046cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	d801      	bhi.n	80046de <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80046da:	2300      	movs	r3, #0
 80046dc:	e016      	b.n	800470c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80046de:	edd7 7a00 	vldr	s15, [r7]
 80046e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80046e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	d801      	bhi.n	80046f4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e00b      	b.n	800470c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80046f4:	edd7 7a00 	vldr	s15, [r7]
 80046f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004780 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80046fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	d801      	bhi.n	800470a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004706:	2302      	movs	r3, #2
 8004708:	e000      	b.n	800470c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800470a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800470c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d121      	bne.n	800475a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004716:	f107 020c 	add.w	r2, r7, #12
 800471a:	2301      	movs	r3, #1
 800471c:	2160      	movs	r1, #96	; 0x60
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f9a6 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e022      	b.n	8004776 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	b2da      	uxtb	r2, r3
 8004738:	7b3b      	ldrb	r3, [r7, #12]
 800473a:	f362 0383 	bfi	r3, r2, #2, #2
 800473e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004740:	f107 020c 	add.w	r2, r7, #12
 8004744:	2301      	movs	r3, #1
 8004746:	2160      	movs	r1, #96	; 0x60
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fad0 	bl	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004754:	f04f 33ff 	mov.w	r3, #4294967295
 8004758:	e00d      	b.n	8004776 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3320      	adds	r3, #32
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc37 	bl	8004fd6 <lis2mdl_data_rate_set>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	e000      	b.n	8004776 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	42480000 	.word	0x42480000

08004784 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2232      	movs	r2, #50	; 0x32
 8004792:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3320      	adds	r3, #32
 80047c8:	f107 0208 	add.w	r2, r7, #8
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fc86 	bl	80050e0 <lis2mdl_magnetic_raw_get>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e00c      	b.n	80047fa <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80047e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80047e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80047f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d137      	bne.n	8004884 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004814:	f107 0218 	add.w	r2, r7, #24
 8004818:	2306      	movs	r3, #6
 800481a:	2168      	movs	r1, #104	; 0x68
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f927 	bl	8004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	e06f      	b.n	800490e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800482e:	7e7b      	ldrb	r3, [r7, #25]
 8004830:	b21b      	sxth	r3, r3
 8004832:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004834:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004838:	b29b      	uxth	r3, r3
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	b29a      	uxth	r2, r3
 800483e:	7e3b      	ldrb	r3, [r7, #24]
 8004840:	b29b      	uxth	r3, r3
 8004842:	4413      	add	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	b21b      	sxth	r3, r3
 8004848:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800484a:	7efb      	ldrb	r3, [r7, #27]
 800484c:	b21b      	sxth	r3, r3
 800484e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004854:	b29b      	uxth	r3, r3
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	b29a      	uxth	r2, r3
 800485a:	7ebb      	ldrb	r3, [r7, #26]
 800485c:	b29b      	uxth	r3, r3
 800485e:	4413      	add	r3, r2
 8004860:	b29b      	uxth	r3, r3
 8004862:	b21b      	sxth	r3, r3
 8004864:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004866:	7f7b      	ldrb	r3, [r7, #29]
 8004868:	b21b      	sxth	r3, r3
 800486a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800486c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004870:	b29b      	uxth	r3, r3
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	b29a      	uxth	r2, r3
 8004876:	7f3b      	ldrb	r3, [r7, #28]
 8004878:	b29b      	uxth	r3, r3
 800487a:	4413      	add	r3, r2
 800487c:	b29b      	uxth	r3, r3
 800487e:	b21b      	sxth	r3, r3
 8004880:	82bb      	strh	r3, [r7, #20]
 8004882:	e00d      	b.n	80048a0 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3320      	adds	r3, #32
 8004888:	f107 0210 	add.w	r2, r7, #16
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fc26 	bl	80050e0 <lis2mdl_magnetic_raw_get>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	e036      	b.n	800490e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff feb1 	bl	800460e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80048ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c4:	ee17 2a90 	vmov	r2, s15
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80048cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e4:	ee17 2a90 	vmov	r2, s15
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80048ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004904:	ee17 2a90 	vmov	r2, s15
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	70fb      	strb	r3, [r7, #3]
 8004922:	4613      	mov	r3, r2
 8004924:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d10b      	bne.n	8004946 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800492e:	1cba      	adds	r2, r7, #2
 8004930:	78f9      	ldrb	r1, [r7, #3]
 8004932:	2301      	movs	r3, #1
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f9da 	bl	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004940:	f04f 33ff 	mov.w	r3, #4294967295
 8004944:	e00e      	b.n	8004964 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 0020 	add.w	r0, r3, #32
 800494c:	1cba      	adds	r2, r7, #2
 800494e:	78f9      	ldrb	r1, [r7, #3]
 8004950:	2301      	movs	r3, #1
 8004952:	f000 fb02 	bl	8004f5a <lis2mdl_write_reg>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	e000      	b.n	8004964 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	461a      	mov	r2, r3
 8004978:	460b      	mov	r3, r1
 800497a:	72fb      	strb	r3, [r7, #11]
 800497c:	4613      	mov	r3, r2
 800497e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10e      	bne.n	80049aa <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	695c      	ldr	r4, [r3, #20]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	7b1b      	ldrb	r3, [r3, #12]
 8004994:	b298      	uxth	r0, r3
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800499c:	b2db      	uxtb	r3, r3
 800499e:	b299      	uxth	r1, r3
 80049a0:	893b      	ldrh	r3, [r7, #8]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	47a0      	blx	r4
 80049a6:	4603      	mov	r3, r0
 80049a8:	e01d      	b.n	80049e6 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d10b      	bne.n	80049ca <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	695c      	ldr	r4, [r3, #20]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	7b1b      	ldrb	r3, [r3, #12]
 80049ba:	b298      	uxth	r0, r3
 80049bc:	7afb      	ldrb	r3, [r7, #11]
 80049be:	b299      	uxth	r1, r3
 80049c0:	893b      	ldrh	r3, [r7, #8]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	47a0      	blx	r4
 80049c6:	4603      	mov	r3, r0
 80049c8:	e00d      	b.n	80049e6 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	695c      	ldr	r4, [r3, #20]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	7b1b      	ldrb	r3, [r3, #12]
 80049d2:	b298      	uxth	r0, r3
 80049d4:	7afb      	ldrb	r3, [r7, #11]
 80049d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	b299      	uxth	r1, r3
 80049de:	893b      	ldrh	r3, [r7, #8]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	47a0      	blx	r4
 80049e4:	4603      	mov	r3, r0
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}

080049ee <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80049ee:	b590      	push	{r4, r7, lr}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	461a      	mov	r2, r3
 80049fa:	460b      	mov	r3, r1
 80049fc:	72fb      	strb	r3, [r7, #11]
 80049fe:	4613      	mov	r3, r2
 8004a00:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	691c      	ldr	r4, [r3, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	7b1b      	ldrb	r3, [r3, #12]
 8004a16:	b298      	uxth	r0, r3
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	b299      	uxth	r1, r3
 8004a22:	893b      	ldrh	r3, [r7, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	47a0      	blx	r4
 8004a28:	4603      	mov	r3, r0
 8004a2a:	e01d      	b.n	8004a68 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d10b      	bne.n	8004a4c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	691c      	ldr	r4, [r3, #16]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	7b1b      	ldrb	r3, [r3, #12]
 8004a3c:	b298      	uxth	r0, r3
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	b299      	uxth	r1, r3
 8004a42:	893b      	ldrh	r3, [r7, #8]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	47a0      	blx	r4
 8004a48:	4603      	mov	r3, r0
 8004a4a:	e00d      	b.n	8004a68 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	691c      	ldr	r4, [r3, #16]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	7b1b      	ldrb	r3, [r3, #12]
 8004a54:	b298      	uxth	r0, r3
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	b299      	uxth	r1, r3
 8004a60:	893b      	ldrh	r3, [r7, #8]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	47a0      	blx	r4
 8004a66:	4603      	mov	r3, r0
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}

08004a70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	; 0x30
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	72fb      	strb	r3, [r7, #11]
 8004a80:	4613      	mov	r3, r2
 8004a82:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004a96:	233d      	movs	r3, #61	; 0x3d
 8004a98:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004a9a:	2315      	movs	r3, #21
 8004a9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004aa0:	2316      	movs	r3, #22
 8004aa2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004aa6:	2317      	movs	r3, #23
 8004aa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8004aac:	2314      	movs	r3, #20
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004ab2:	2344      	movs	r3, #68	; 0x44
 8004ab4:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004abc:	2339      	movs	r3, #57	; 0x39
 8004abe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004ac8:	2329      	movs	r3, #41	; 0x29
 8004aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004ace:	231e      	movs	r3, #30
 8004ad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8004ada:	893b      	ldrh	r3, [r7, #8]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004aec:	2340      	movs	r3, #64	; 0x40
 8004aee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f103 0020 	add.w	r0, r3, #32
 8004af8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004afc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004b00:	2301      	movs	r3, #1
 8004b02:	f000 fa2a 	bl	8004f5a <lis2mdl_write_reg>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	e0e9      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f103 0020 	add.w	r0, r3, #32
 8004b18:	f107 021f 	add.w	r2, r7, #31
 8004b1c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004b20:	2301      	movs	r3, #1
 8004b22:	f000 fa1a 	bl	8004f5a <lis2mdl_write_reg>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b30:	e0d9      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f103 0020 	add.w	r0, r3, #32
 8004b38:	f107 020b 	add.w	r2, r7, #11
 8004b3c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004b40:	2301      	movs	r3, #1
 8004b42:	f000 fa0a 	bl	8004f5a <lis2mdl_write_reg>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b50:	e0c9      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f103 0020 	add.w	r0, r3, #32
 8004b58:	f107 021d 	add.w	r2, r7, #29
 8004b5c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004b60:	2301      	movs	r3, #1
 8004b62:	f000 f9fa 	bl	8004f5a <lis2mdl_write_reg>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b70:	e0b9      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f103 0020 	add.w	r0, r3, #32
 8004b78:	f107 021e 	add.w	r2, r7, #30
 8004b7c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004b80:	2301      	movs	r3, #1
 8004b82:	f000 f9ea 	bl	8004f5a <lis2mdl_write_reg>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	e0a9      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f103 0020 	add.w	r0, r3, #32
 8004b98:	f107 0220 	add.w	r2, r7, #32
 8004b9c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f000 f9da 	bl	8004f5a <lis2mdl_write_reg>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb0:	e099      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f103 0020 	add.w	r0, r3, #32
 8004bb8:	f107 021c 	add.w	r2, r7, #28
 8004bbc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f000 f9b2 	bl	8004f2a <lis2mdl_read_reg>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd0:	e089      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004bd2:	7f3b      	ldrb	r3, [r7, #28]
 8004bd4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d102      	bne.n	8004be2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004be0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f103 0020 	add.w	r0, r3, #32
 8004be8:	f107 021c 	add.w	r2, r7, #28
 8004bec:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f000 f9b2 	bl	8004f5a <lis2mdl_write_reg>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004c00:	e071      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f103 0020 	add.w	r0, r3, #32
 8004c08:	f107 0214 	add.w	r2, r7, #20
 8004c0c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004c10:	2306      	movs	r3, #6
 8004c12:	f000 f98a 	bl	8004f2a <lis2mdl_read_reg>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	e061      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f103 0020 	add.w	r0, r3, #32
 8004c28:	f107 021b 	add.w	r2, r7, #27
 8004c2c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8004c30:	2301      	movs	r3, #1
 8004c32:	f000 f97a 	bl	8004f2a <lis2mdl_read_reg>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	e051      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004c42:	7efa      	ldrb	r2, [r7, #27]
 8004c44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1e6      	bne.n	8004c22 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f103 0020 	add.w	r0, r3, #32
 8004c5a:	f107 021b 	add.w	r2, r7, #27
 8004c5e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8004c62:	2301      	movs	r3, #1
 8004c64:	f000 f961 	bl	8004f2a <lis2mdl_read_reg>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	e038      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004c74:	7efa      	ldrb	r2, [r7, #27]
 8004c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d1e6      	bne.n	8004c54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f103 0020 	add.w	r0, r3, #32
 8004c8c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004c90:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004c94:	2301      	movs	r3, #1
 8004c96:	f000 f960 	bl	8004f5a <lis2mdl_write_reg>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	e01f      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f103 0020 	add.w	r0, r3, #32
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	f000 f939 	bl	8004f2a <lis2mdl_read_reg>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	e010      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f103 0020 	add.w	r0, r3, #32
 8004cca:	f107 0220 	add.w	r2, r7, #32
 8004cce:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f000 f941 	bl	8004f5a <lis2mdl_write_reg>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	e000      	b.n	8004ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3730      	adds	r7, #48	; 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b08c      	sub	sp, #48	; 0x30
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	72fb      	strb	r3, [r7, #11]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004d08:	2340      	movs	r3, #64	; 0x40
 8004d0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004d14:	233c      	movs	r3, #60	; 0x3c
 8004d16:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004d18:	2315      	movs	r3, #21
 8004d1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004d1e:	2316      	movs	r3, #22
 8004d20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004d24:	2317      	movs	r3, #23
 8004d26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004d2e:	2314      	movs	r3, #20
 8004d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004d34:	2344      	movs	r3, #68	; 0x44
 8004d36:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004d38:	2339      	movs	r3, #57	; 0x39
 8004d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004d44:	2329      	movs	r3, #41	; 0x29
 8004d46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004d4a:	231e      	movs	r3, #30
 8004d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004d56:	2310      	movs	r3, #16
 8004d58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004d62:	2340      	movs	r3, #64	; 0x40
 8004d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004d68:	230e      	movs	r3, #14
 8004d6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f103 0020 	add.w	r0, r3, #32
 8004d74:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004d78:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f000 f8ec 	bl	8004f5a <lis2mdl_write_reg>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8c:	e0c9      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f103 0020 	add.w	r0, r3, #32
 8004d94:	f107 021f 	add.w	r2, r7, #31
 8004d98:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f000 f8dc 	bl	8004f5a <lis2mdl_write_reg>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	e0b9      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f103 0020 	add.w	r0, r3, #32
 8004db4:	f107 020b 	add.w	r2, r7, #11
 8004db8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f000 f8cc 	bl	8004f5a <lis2mdl_write_reg>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dcc:	e0a9      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f103 0020 	add.w	r0, r3, #32
 8004dd4:	f107 021e 	add.w	r2, r7, #30
 8004dd8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f000 f8bc 	bl	8004f5a <lis2mdl_write_reg>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dec:	e099      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f103 0020 	add.w	r0, r3, #32
 8004df4:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8004df8:	2301      	movs	r3, #1
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	f000 f8ad 	bl	8004f5a <lis2mdl_write_reg>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0a:	e08a      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f103 0020 	add.w	r0, r3, #32
 8004e12:	f107 021d 	add.w	r2, r7, #29
 8004e16:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f000 f89d 	bl	8004f5a <lis2mdl_write_reg>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2a:	e07a      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f103 0020 	add.w	r0, r3, #32
 8004e32:	f107 0220 	add.w	r2, r7, #32
 8004e36:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f000 f88d 	bl	8004f5a <lis2mdl_write_reg>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4a:	e06a      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f103 0020 	add.w	r0, r3, #32
 8004e52:	f107 021c 	add.w	r2, r7, #28
 8004e56:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f000 f865 	bl	8004f2a <lis2mdl_read_reg>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	e05a      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004e6c:	7f3b      	ldrb	r3, [r7, #28]
 8004e6e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d102      	bne.n	8004e7c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004e76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e7a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f103 0020 	add.w	r0, r3, #32
 8004e82:	f107 021c 	add.w	r2, r7, #28
 8004e86:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f000 f865 	bl	8004f5a <lis2mdl_write_reg>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	e042      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f103 0020 	add.w	r0, r3, #32
 8004ea2:	f107 0214 	add.w	r2, r7, #20
 8004ea6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004eaa:	2306      	movs	r3, #6
 8004eac:	f000 f83d 	bl	8004f2a <lis2mdl_read_reg>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	e032      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f103 0020 	add.w	r0, r3, #32
 8004ec2:	f107 021b 	add.w	r2, r7, #27
 8004ec6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f000 f82d 	bl	8004f2a <lis2mdl_read_reg>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	e022      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004edc:	7efa      	ldrb	r2, [r7, #27]
 8004ede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d1e6      	bne.n	8004ebc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f103 0020 	add.w	r0, r3, #32
 8004ef4:	f107 021b 	add.w	r2, r7, #27
 8004ef8:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004efc:	2301      	movs	r3, #1
 8004efe:	f000 f814 	bl	8004f2a <lis2mdl_read_reg>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004f08:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0c:	e009      	b.n	8004f22 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004f0e:	7efa      	ldrb	r2, [r7, #27]
 8004f10:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004f14:	4013      	ands	r3, r2
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1e6      	bne.n	8004eee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3730      	adds	r7, #48	; 0x30
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004f2a:	b590      	push	{r4, r7, lr}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	461a      	mov	r2, r3
 8004f36:	460b      	mov	r3, r1
 8004f38:	72fb      	strb	r3, [r7, #11]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685c      	ldr	r4, [r3, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68d8      	ldr	r0, [r3, #12]
 8004f46:	893b      	ldrh	r3, [r7, #8]
 8004f48:	7af9      	ldrb	r1, [r7, #11]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	47a0      	blx	r4
 8004f4e:	6178      	str	r0, [r7, #20]

  return ret;
 8004f50:	697b      	ldr	r3, [r7, #20]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}

08004f5a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004f5a:	b590      	push	{r4, r7, lr}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	72fb      	strb	r3, [r7, #11]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681c      	ldr	r4, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68d8      	ldr	r0, [r3, #12]
 8004f76:	893b      	ldrh	r3, [r7, #8]
 8004f78:	7af9      	ldrb	r1, [r7, #11]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	47a0      	blx	r4
 8004f7e:	6178      	str	r0, [r7, #20]

  return ret;
 8004f80:	697b      	ldr	r3, [r7, #20]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd90      	pop	{r4, r7, pc}

08004f8a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004f96:	f107 0208 	add.w	r2, r7, #8
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	2160      	movs	r1, #96	; 0x60
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ffc3 	bl	8004f2a <lis2mdl_read_reg>
 8004fa4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	7a3b      	ldrb	r3, [r7, #8]
 8004fb6:	f362 0301 	bfi	r3, r2, #0, #2
 8004fba:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004fbc:	f107 0208 	add.w	r2, r7, #8
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	2160      	movs	r1, #96	; 0x60
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ffc8 	bl	8004f5a <lis2mdl_write_reg>
 8004fca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004fe2:	f107 0208 	add.w	r2, r7, #8
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	2160      	movs	r1, #96	; 0x60
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff9d 	bl	8004f2a <lis2mdl_read_reg>
 8004ff0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10f      	bne.n	8005018 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	7a3b      	ldrb	r3, [r7, #8]
 8005002:	f362 0383 	bfi	r3, r2, #2, #2
 8005006:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005008:	f107 0208 	add.w	r2, r7, #8
 800500c:	2301      	movs	r3, #1
 800500e:	2160      	movs	r1, #96	; 0x60
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ffa2 	bl	8004f5a <lis2mdl_write_reg>
 8005016:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800502e:	f107 0208 	add.w	r2, r7, #8
 8005032:	2301      	movs	r3, #1
 8005034:	2160      	movs	r1, #96	; 0x60
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff77 	bl	8004f2a <lis2mdl_read_reg>
 800503c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800503e:	7a3b      	ldrb	r3, [r7, #8]
 8005040:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b03      	cmp	r3, #3
 8005048:	d81a      	bhi.n	8005080 <lis2mdl_data_rate_get+0x5c>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <lis2mdl_data_rate_get+0x2c>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005061 	.word	0x08005061
 8005054:	08005069 	.word	0x08005069
 8005058:	08005071 	.word	0x08005071
 800505c:	08005079 	.word	0x08005079
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
      break;
 8005066:	e00f      	b.n	8005088 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
      break;
 800506e:	e00b      	b.n	8005088 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2202      	movs	r2, #2
 8005074:	701a      	strb	r2, [r3, #0]
      break;
 8005076:	e007      	b.n	8005088 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2203      	movs	r2, #3
 800507c:	701a      	strb	r2, [r3, #0]
      break;
 800507e:	e003      	b.n	8005088 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
      break;
 8005086:	bf00      	nop
  }

  return ret;
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop

08005094 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80050a0:	f107 0208 	add.w	r2, r7, #8
 80050a4:	2301      	movs	r3, #1
 80050a6:	2162      	movs	r1, #98	; 0x62
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff ff3e 	bl	8004f2a <lis2mdl_read_reg>
 80050ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	7a3b      	ldrb	r3, [r7, #8]
 80050c0:	f362 1304 	bfi	r3, r2, #4, #1
 80050c4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80050c6:	f107 0208 	add.w	r2, r7, #8
 80050ca:	2301      	movs	r3, #1
 80050cc:	2162      	movs	r1, #98	; 0x62
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff ff43 	bl	8004f5a <lis2mdl_write_reg>
 80050d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050d6:	68fb      	ldr	r3, [r7, #12]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80050ea:	f107 020c 	add.w	r2, r7, #12
 80050ee:	2306      	movs	r3, #6
 80050f0:	2168      	movs	r1, #104	; 0x68
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff19 	bl	8004f2a <lis2mdl_read_reg>
 80050f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050fa:	7b7b      	ldrb	r3, [r7, #13]
 80050fc:	b21a      	sxth	r2, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005108:	b29b      	uxth	r3, r3
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	b29a      	uxth	r2, r3
 800510e:	7b3b      	ldrb	r3, [r7, #12]
 8005110:	b29b      	uxth	r3, r3
 8005112:	4413      	add	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	b21a      	sxth	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3302      	adds	r3, #2
 8005122:	b212      	sxth	r2, r2
 8005124:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	3302      	adds	r3, #2
 800512a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800512e:	b29b      	uxth	r3, r3
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	b29a      	uxth	r2, r3
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	b29b      	uxth	r3, r3
 8005138:	4413      	add	r3, r2
 800513a:	b29a      	uxth	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	3302      	adds	r3, #2
 8005140:	b212      	sxth	r2, r2
 8005142:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005144:	7c7a      	ldrb	r2, [r7, #17]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	3304      	adds	r3, #4
 800514a:	b212      	sxth	r2, r2
 800514c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	3304      	adds	r3, #4
 8005152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005156:	b29b      	uxth	r3, r3
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	b29a      	uxth	r2, r3
 800515c:	7c3b      	ldrb	r3, [r7, #16]
 800515e:	b29b      	uxth	r3, r3
 8005160:	4413      	add	r3, r2
 8005162:	b29a      	uxth	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	3304      	adds	r3, #4
 8005168:	b212      	sxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]

  return ret;
 800516c:	697b      	ldr	r3, [r7, #20]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005180:	2301      	movs	r3, #1
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	214f      	movs	r1, #79	; 0x4f
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fecf 	bl	8004f2a <lis2mdl_read_reg>
 800518c:	60f8      	str	r0, [r7, #12]

  return ret;
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80051a4:	f107 0208 	add.w	r2, r7, #8
 80051a8:	2301      	movs	r3, #1
 80051aa:	2162      	movs	r1, #98	; 0x62
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff febc 	bl	8004f2a <lis2mdl_read_reg>
 80051b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	7a3b      	ldrb	r3, [r7, #8]
 80051c4:	f362 0341 	bfi	r3, r2, #1, #1
 80051c8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80051ca:	f107 0208 	add.w	r2, r7, #8
 80051ce:	2301      	movs	r3, #1
 80051d0:	2162      	movs	r1, #98	; 0x62
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fec1 	bl	8004f5a <lis2mdl_write_reg>
 80051d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80051f0:	f107 0208 	add.w	r2, r7, #8
 80051f4:	2301      	movs	r3, #1
 80051f6:	2162      	movs	r1, #98	; 0x62
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fe96 	bl	8004f2a <lis2mdl_read_reg>
 80051fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	b2da      	uxtb	r2, r3
 800520e:	7a3b      	ldrb	r3, [r7, #8]
 8005210:	f362 1345 	bfi	r3, r2, #5, #1
 8005214:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005216:	f107 0208 	add.w	r2, r7, #8
 800521a:	2301      	movs	r3, #1
 800521c:	2162      	movs	r1, #98	; 0x62
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fe9b 	bl	8004f5a <lis2mdl_write_reg>
 8005224:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e051      	b.n	80052f0 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	7b1a      	ldrb	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <LPS22HH_RegisterBusIO+0xcc>)
 8005288:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <LPS22HH_RegisterBusIO+0xd0>)
 800528e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e020      	b.n	80052f0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4798      	blx	r3
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e016      	b.n	80052f0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d112      	bne.n	80052f0 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80052d4:	2301      	movs	r3, #1
 80052d6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	461a      	mov	r2, r3
 80052dc:	2110      	movs	r1, #16
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9e7 	bl	80056b2 <LPS22HH_Write_Reg>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	080059e3 	.word	0x080059e3
 8005300:	08005a19 	.word	0x08005a19

08005304 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb16 	bl	8005948 <LPS22HH_Initialize>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	e004      	b.n	8005332 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d111      	bne.n	8005370 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f87f 	bl	8005450 <LPS22HH_PRESS_Disable>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	e00d      	b.n	800537a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f920 	bl	80055a4 <LPS22HH_TEMP_Disable>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	e004      	b.n	800537a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3320      	adds	r3, #32
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fd26 	bl	8005de4 <lps22hh_device_id_get>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	e000      	b.n	80053a6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2200      	movs	r2, #0
 80053be:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2200      	movs	r2, #0
 80053d6:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4a08      	ldr	r2, [pc, #32]	; (8005404 <LPS22HH_GetCapabilities+0x54>)
 80053e4:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	4a06      	ldr	r2, [pc, #24]	; (8005404 <LPS22HH_GetCapabilities+0x54>)
 80053ea:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	43480000 	.word	0x43480000

08005408 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e014      	b.n	8005448 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f103 0220 	add.w	r2, r3, #32
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fb97 	bl	8005b60 <lps22hh_data_rate_set>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	e004      	b.n	8005448 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e024      	b.n	80054b0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11a      	bne.n	80054a6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f103 0220 	add.w	r2, r3, #32
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3333      	adds	r3, #51	; 0x33
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 fbbd 	bl	8005bfc <lps22hh_data_rate_get>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	e010      	b.n	80054b0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3320      	adds	r3, #32
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fb63 	bl	8005b60 <lps22hh_data_rate_set>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295
 80054a4:	e004      	b.n	80054b0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f90f 	bl	80056e8 <LPS22HH_GetOutputDataRate>
 80054ca:	4603      	mov	r3, r0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d106      	bne.n	80054f8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80054ea:	ed97 0a00 	vldr	s0, [r7]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f95e 	bl	80057b0 <LPS22HH_SetOutputDataRate_When_Enabled>
 80054f4:	4603      	mov	r3, r0
 80054f6:	e005      	b.n	8005504 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80054f8:	ed97 0a00 	vldr	s0, [r7]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f9c9 	bl	8005894 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005502:	4603      	mov	r3, r0
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005516:	f107 030c 	add.w	r3, r7, #12
 800551a:	2204      	movs	r2, #4
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f008 ffeb 	bl	800e4fa <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3320      	adds	r3, #32
 8005528:	f107 020c 	add.w	r2, r7, #12
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fc0c 	bl	8005d4c <lps22hh_pressure_raw_get>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	e009      	b.n	8005554 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fab4 	bl	8005ab0 <lps22hh_from_lsb_to_hpa>
 8005548:	eef0 7a40 	vmov.f32	s15, s0
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e014      	b.n	800559c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f103 0220 	add.w	r2, r3, #32
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 faed 	bl	8005b60 <lps22hh_data_rate_set>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
 8005590:	e004      	b.n	800559c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e024      	b.n	8005604 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11a      	bne.n	80055fa <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f103 0220 	add.w	r2, r3, #32
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3333      	adds	r3, #51	; 0x33
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f000 fb13 	bl	8005bfc <lps22hh_data_rate_get>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	e010      	b.n	8005604 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3320      	adds	r3, #32
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fab9 	bl	8005b60 <lps22hh_data_rate_set>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	e004      	b.n	8005604 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f865 	bl	80056e8 <LPS22HH_GetOutputDataRate>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800563a:	2b01      	cmp	r3, #1
 800563c:	d106      	bne.n	800564c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800563e:	ed97 0a00 	vldr	s0, [r7]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8b4 	bl	80057b0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005648:	4603      	mov	r3, r0
 800564a:	e005      	b.n	8005658 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800564c:	ed97 0a00 	vldr	s0, [r7]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f91f 	bl	8005894 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005656:	4603      	mov	r3, r0
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800566a:	f107 030c 	add.w	r3, r7, #12
 800566e:	2202      	movs	r2, #2
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f008 ff41 	bl	800e4fa <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3320      	adds	r3, #32
 800567c:	f107 020c 	add.w	r2, r7, #12
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb8b 	bl	8005d9e <lps22hh_temperature_raw_get>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295
 8005692:	e00a      	b.n	80056aa <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fa21 	bl	8005ae0 <lps22hh_from_lsb_to_celsius>
 800569e:	eef0 7a40 	vmov.f32	s15, s0
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
 80056be:	4613      	mov	r3, r2
 80056c0:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f103 0020 	add.w	r0, r3, #32
 80056c8:	1cba      	adds	r2, r7, #2
 80056ca:	78f9      	ldrb	r1, [r7, #3]
 80056cc:	2301      	movs	r3, #1
 80056ce:	f000 f9d6 	bl	8005a7e <lps22hh_write_reg>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	e000      	b.n	80056e0 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3320      	adds	r3, #32
 80056fa:	f107 020b 	add.w	r2, r7, #11
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fa7b 	bl	8005bfc <lps22hh_data_rate_get>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 800570c:	f04f 33ff 	mov.w	r3, #4294967295
 8005710:	e03d      	b.n	800578e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	2b07      	cmp	r3, #7
 8005716:	d835      	bhi.n	8005784 <LPS22HH_GetOutputDataRate+0x9c>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <LPS22HH_GetOutputDataRate+0x38>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005741 	.word	0x08005741
 8005724:	0800574b 	.word	0x0800574b
 8005728:	08005755 	.word	0x08005755
 800572c:	0800575d 	.word	0x0800575d
 8005730:	08005765 	.word	0x08005765
 8005734:	0800576d 	.word	0x0800576d
 8005738:	08005775 	.word	0x08005775
 800573c:	0800577d 	.word	0x0800577d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
      break;
 8005748:	e020      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005750:	601a      	str	r2, [r3, #0]
      break;
 8005752:	e01b      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <LPS22HH_GetOutputDataRate+0xb0>)
 8005758:	601a      	str	r2, [r3, #0]
      break;
 800575a:	e017      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4a0f      	ldr	r2, [pc, #60]	; (800579c <LPS22HH_GetOutputDataRate+0xb4>)
 8005760:	601a      	str	r2, [r3, #0]
      break;
 8005762:	e013      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	4a0e      	ldr	r2, [pc, #56]	; (80057a0 <LPS22HH_GetOutputDataRate+0xb8>)
 8005768:	601a      	str	r2, [r3, #0]
      break;
 800576a:	e00f      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	4a0d      	ldr	r2, [pc, #52]	; (80057a4 <LPS22HH_GetOutputDataRate+0xbc>)
 8005770:	601a      	str	r2, [r3, #0]
      break;
 8005772:	e00b      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <LPS22HH_GetOutputDataRate+0xc0>)
 8005778:	601a      	str	r2, [r3, #0]
      break;
 800577a:	e007      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <LPS22HH_GetOutputDataRate+0xc4>)
 8005780:	601a      	str	r2, [r3, #0]
      break;
 8005782:	e003      	b.n	800578c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
 8005788:	60fb      	str	r3, [r7, #12]
      break;
 800578a:	bf00      	nop
  }

  return ret;
 800578c:	68fb      	ldr	r3, [r7, #12]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	41200000 	.word	0x41200000
 800579c:	41c80000 	.word	0x41c80000
 80057a0:	42480000 	.word	0x42480000
 80057a4:	42960000 	.word	0x42960000
 80057a8:	42c80000 	.word	0x42c80000
 80057ac:	43480000 	.word	0x43480000

080057b0 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80057bc:	edd7 7a00 	vldr	s15, [r7]
 80057c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057cc:	d801      	bhi.n	80057d2 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e037      	b.n	8005842 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80057d2:	edd7 7a00 	vldr	s15, [r7]
 80057d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80057da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	d801      	bhi.n	80057e8 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e02c      	b.n	8005842 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80057e8:	edd7 7a00 	vldr	s15, [r7]
 80057ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80057f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f8:	d801      	bhi.n	80057fe <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 80057fa:	2303      	movs	r3, #3
 80057fc:	e021      	b.n	8005842 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80057fe:	edd7 7a00 	vldr	s15, [r7]
 8005802:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005888 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	d801      	bhi.n	8005814 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005810:	2304      	movs	r3, #4
 8005812:	e016      	b.n	8005842 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005814:	edd7 7a00 	vldr	s15, [r7]
 8005818:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800588c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 800581c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	d801      	bhi.n	800582a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005826:	2305      	movs	r3, #5
 8005828:	e00b      	b.n	8005842 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800582a:	edd7 7a00 	vldr	s15, [r7]
 800582e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005890 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	d801      	bhi.n	8005840 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 800583c:	2306      	movs	r3, #6
 800583e:	e000      	b.n	8005842 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005840:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005842:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3320      	adds	r3, #32
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f987 	bl	8005b60 <lps22hh_data_rate_set>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295
 800585c:	e00f      	b.n	800587e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 0220 	add.w	r2, r3, #32
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3333      	adds	r3, #51	; 0x33
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f000 f9c6 	bl	8005bfc <lps22hh_data_rate_get>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8005876:	f04f 33ff 	mov.w	r3, #4294967295
 800587a:	e000      	b.n	800587e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	42480000 	.word	0x42480000
 800588c:	42960000 	.word	0x42960000
 8005890:	42c80000 	.word	0x42c80000

08005894 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80058a0:	edd7 7a00 	vldr	s15, [r7]
 80058a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b0:	d801      	bhi.n	80058b6 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e037      	b.n	8005926 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80058b6:	edd7 7a00 	vldr	s15, [r7]
 80058ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80058be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	d801      	bhi.n	80058cc <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e02c      	b.n	8005926 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80058cc:	edd7 7a00 	vldr	s15, [r7]
 80058d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80058d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058dc:	d801      	bhi.n	80058e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 80058de:	2303      	movs	r3, #3
 80058e0:	e021      	b.n	8005926 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80058e2:	edd7 7a00 	vldr	s15, [r7]
 80058e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800593c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 80058ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	d801      	bhi.n	80058f8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 80058f4:	2304      	movs	r3, #4
 80058f6:	e016      	b.n	8005926 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80058f8:	edd7 7a00 	vldr	s15, [r7]
 80058fc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005940 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005908:	d801      	bhi.n	800590e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800590a:	2305      	movs	r3, #5
 800590c:	e00b      	b.n	8005926 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800590e:	edd7 7a00 	vldr	s15, [r7]
 8005912:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005944 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8005916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	d801      	bhi.n	8005924 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005920:	2306      	movs	r3, #6
 8005922:	e000      	b.n	8005926 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005924:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	42480000 	.word	0x42480000
 8005940:	42960000 	.word	0x42960000
 8005944:	42c80000 	.word	0x42c80000

08005948 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d00b      	beq.n	8005970 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3320      	adds	r3, #32
 800595c:	2111      	movs	r1, #17
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fa9d 	bl	8005e9e <lps22hh_i3c_interface_set>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	e034      	b.n	80059da <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3320      	adds	r3, #32
 8005974:	2110      	movs	r1, #16
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8f2 	bl	8005b60 <lps22hh_data_rate_set>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	e028      	b.n	80059da <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3320      	adds	r3, #32
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fa5f 	bl	8005e52 <lps22hh_lp_bandwidth_set>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	e01c      	b.n	80059da <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3320      	adds	r3, #32
 80059a4:	2101      	movs	r1, #1
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f8b4 	bl	8005b14 <lps22hh_block_data_update_set>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e010      	b.n	80059da <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3320      	adds	r3, #32
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fa21 	bl	8005e06 <lps22hh_auto_increment_set>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295
 80059ce:	e004      	b.n	80059da <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2203      	movs	r2, #3
 80059d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80059e2:	b590      	push	{r4, r7, lr}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	461a      	mov	r2, r3
 80059ee:	460b      	mov	r3, r1
 80059f0:	72fb      	strb	r3, [r7, #11]
 80059f2:	4613      	mov	r3, r2
 80059f4:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	695c      	ldr	r4, [r3, #20]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	7b1b      	ldrb	r3, [r3, #12]
 8005a02:	b298      	uxth	r0, r3
 8005a04:	7afb      	ldrb	r3, [r7, #11]
 8005a06:	b299      	uxth	r1, r3
 8005a08:	893b      	ldrh	r3, [r7, #8]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	47a0      	blx	r4
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd90      	pop	{r4, r7, pc}

08005a18 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	461a      	mov	r2, r3
 8005a24:	460b      	mov	r3, r1
 8005a26:	72fb      	strb	r3, [r7, #11]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	691c      	ldr	r4, [r3, #16]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	7b1b      	ldrb	r3, [r3, #12]
 8005a38:	b298      	uxth	r0, r3
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
 8005a3c:	b299      	uxth	r1, r3
 8005a3e:	893b      	ldrh	r3, [r7, #8]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	47a0      	blx	r4
 8005a44:	4603      	mov	r3, r0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}

08005a4e <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005a4e:	b590      	push	{r4, r7, lr}
 8005a50:	b087      	sub	sp, #28
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	72fb      	strb	r3, [r7, #11]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685c      	ldr	r4, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68d8      	ldr	r0, [r3, #12]
 8005a6a:	893b      	ldrh	r3, [r7, #8]
 8005a6c:	7af9      	ldrb	r1, [r7, #11]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	47a0      	blx	r4
 8005a72:	6178      	str	r0, [r7, #20]

  return ret;
 8005a74:	697b      	ldr	r3, [r7, #20]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}

08005a7e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005a7e:	b590      	push	{r4, r7, lr}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	72fb      	strb	r3, [r7, #11]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681c      	ldr	r4, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68d8      	ldr	r0, [r3, #12]
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	7af9      	ldrb	r1, [r7, #11]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	47a0      	blx	r4
 8005aa2:	6178      	str	r0, [r7, #20]

  return ret;
 8005aa4:	697b      	ldr	r3, [r7, #20]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd90      	pop	{r4, r7, pc}
	...

08005ab0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005adc <lps22hh_from_lsb_to_hpa+0x2c>
 8005ac6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005aca:	eef0 7a66 	vmov.f32	s15, s13
}
 8005ace:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	49800000 	.word	0x49800000

08005ae0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005b10 <lps22hh_from_lsb_to_celsius+0x30>
 8005afa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005afe:	eef0 7a66 	vmov.f32	s15, s13
}
 8005b02:	eeb0 0a67 	vmov.f32	s0, s15
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	42c80000 	.word	0x42c80000

08005b14 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005b20:	f107 0208 	add.w	r2, r7, #8
 8005b24:	2301      	movs	r3, #1
 8005b26:	2110      	movs	r1, #16
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ff90 	bl	8005a4e <lps22hh_read_reg>
 8005b2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	7a3b      	ldrb	r3, [r7, #8]
 8005b40:	f362 0341 	bfi	r3, r2, #1, #1
 8005b44:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005b46:	f107 0208 	add.w	r2, r7, #8
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	2110      	movs	r1, #16
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff ff95 	bl	8005a7e <lps22hh_write_reg>
 8005b54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b56:	68fb      	ldr	r3, [r7, #12]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005b6c:	f107 0210 	add.w	r2, r7, #16
 8005b70:	2301      	movs	r3, #1
 8005b72:	2110      	movs	r1, #16
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff6a 	bl	8005a4e <lps22hh_read_reg>
 8005b7a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d107      	bne.n	8005b92 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005b82:	f107 020c 	add.w	r2, r7, #12
 8005b86:	2301      	movs	r3, #1
 8005b88:	2111      	movs	r1, #17
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff5f 	bl	8005a4e <lps22hh_read_reg>
 8005b90:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10f      	bne.n	8005bb8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	7c3b      	ldrb	r3, [r7, #16]
 8005ba2:	f362 1306 	bfi	r3, r2, #4, #3
 8005ba6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005ba8:	f107 0210 	add.w	r2, r7, #16
 8005bac:	2301      	movs	r3, #1
 8005bae:	2110      	movs	r1, #16
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff64 	bl	8005a7e <lps22hh_write_reg>
 8005bb6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d119      	bne.n	8005bf2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	7b3b      	ldrb	r3, [r7, #12]
 8005bca:	f362 0341 	bfi	r3, r2, #1, #1
 8005bce:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	08db      	lsrs	r3, r3, #3
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	7b3b      	ldrb	r3, [r7, #12]
 8005bdc:	f362 0300 	bfi	r3, r2, #0, #1
 8005be0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005be2:	f107 020c 	add.w	r2, r7, #12
 8005be6:	2301      	movs	r3, #1
 8005be8:	2111      	movs	r1, #17
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ff47 	bl	8005a7e <lps22hh_write_reg>
 8005bf0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005bf2:	697b      	ldr	r3, [r7, #20]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005c06:	f107 0210 	add.w	r2, r7, #16
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff ff1d 	bl	8005a4e <lps22hh_read_reg>
 8005c14:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c1c:	f107 020c 	add.w	r2, r7, #12
 8005c20:	2301      	movs	r3, #1
 8005c22:	2111      	movs	r1, #17
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ff12 	bl	8005a4e <lps22hh_read_reg>
 8005c2a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 8086 	bne.w	8005d40 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005c34:	f107 020c 	add.w	r2, r7, #12
 8005c38:	2301      	movs	r3, #1
 8005c3a:	2111      	movs	r1, #17
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff06 	bl	8005a4e <lps22hh_read_reg>
 8005c42:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005c44:	7b3b      	ldrb	r3, [r7, #12]
 8005c46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	011a      	lsls	r2, r3, #4
 8005c4e:	7b3b      	ldrb	r3, [r7, #12]
 8005c50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8005c5a:	7c3a      	ldrb	r2, [r7, #16]
 8005c5c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005c60:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005c62:	4413      	add	r3, r2
 8005c64:	2b15      	cmp	r3, #21
 8005c66:	d867      	bhi.n	8005d38 <lps22hh_data_rate_get+0x13c>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <lps22hh_data_rate_get+0x74>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005cc9 	.word	0x08005cc9
 8005c74:	08005cd9 	.word	0x08005cd9
 8005c78:	08005ce1 	.word	0x08005ce1
 8005c7c:	08005ce9 	.word	0x08005ce9
 8005c80:	08005cf1 	.word	0x08005cf1
 8005c84:	08005cf9 	.word	0x08005cf9
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d31 	.word	0x08005d31
 8005c90:	08005cd1 	.word	0x08005cd1
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d39 	.word	0x08005d39
 8005c9c:	08005d39 	.word	0x08005d39
 8005ca0:	08005d39 	.word	0x08005d39
 8005ca4:	08005d39 	.word	0x08005d39
 8005ca8:	08005d39 	.word	0x08005d39
 8005cac:	08005d39 	.word	0x08005d39
 8005cb0:	08005d39 	.word	0x08005d39
 8005cb4:	08005d01 	.word	0x08005d01
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005d19 	.word	0x08005d19
 8005cc4:	08005d21 	.word	0x08005d21
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
        break;
 8005cce:	e037      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2208      	movs	r2, #8
 8005cd4:	701a      	strb	r2, [r3, #0]
        break;
 8005cd6:	e033      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
        break;
 8005cde:	e02f      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	701a      	strb	r2, [r3, #0]
        break;
 8005ce6:	e02b      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2203      	movs	r2, #3
 8005cec:	701a      	strb	r2, [r3, #0]
        break;
 8005cee:	e027      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	701a      	strb	r2, [r3, #0]
        break;
 8005cf6:	e023      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	701a      	strb	r2, [r3, #0]
        break;
 8005cfe:	e01f      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2211      	movs	r2, #17
 8005d04:	701a      	strb	r2, [r3, #0]
        break;
 8005d06:	e01b      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2212      	movs	r2, #18
 8005d0c:	701a      	strb	r2, [r3, #0]
        break;
 8005d0e:	e017      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2213      	movs	r2, #19
 8005d14:	701a      	strb	r2, [r3, #0]
        break;
 8005d16:	e013      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2214      	movs	r2, #20
 8005d1c:	701a      	strb	r2, [r3, #0]
        break;
 8005d1e:	e00f      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2215      	movs	r2, #21
 8005d24:	701a      	strb	r2, [r3, #0]
        break;
 8005d26:	e00b      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2206      	movs	r2, #6
 8005d2c:	701a      	strb	r2, [r3, #0]
        break;
 8005d2e:	e007      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2207      	movs	r2, #7
 8005d34:	701a      	strb	r2, [r3, #0]
        break;
 8005d36:	e003      	b.n	8005d40 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
        break;
 8005d3e:	bf00      	nop
    }
  }

  return ret;
 8005d40:	697b      	ldr	r3, [r7, #20]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005d56:	f107 0208 	add.w	r2, r7, #8
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	2128      	movs	r1, #40	; 0x28
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff fe75 	bl	8005a4e <lps22hh_read_reg>
 8005d64:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005d66:	7abb      	ldrb	r3, [r7, #10]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	7a7a      	ldrb	r2, [r7, #9]
 8005d76:	441a      	add	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	7a3a      	ldrb	r2, [r7, #8]
 8005d84:	441a      	add	r2, r3
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	021a      	lsls	r2, r3, #8
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	601a      	str	r2, [r3, #0]

  return ret;
 8005d94:	68fb      	ldr	r3, [r7, #12]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005da8:	f107 0208 	add.w	r2, r7, #8
 8005dac:	2302      	movs	r3, #2
 8005dae:	212b      	movs	r1, #43	; 0x2b
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff fe4c 	bl	8005a4e <lps22hh_read_reg>
 8005db6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005db8:	7a7b      	ldrb	r3, [r7, #9]
 8005dba:	b21a      	sxth	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	7a3b      	ldrb	r3, [r7, #8]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	b21a      	sxth	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	801a      	strh	r2, [r3, #0]

  return ret;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005dee:	2301      	movs	r3, #1
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	210f      	movs	r1, #15
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fe2a 	bl	8005a4e <lps22hh_read_reg>
 8005dfa:	60f8      	str	r0, [r7, #12]

  return ret;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e12:	f107 0208 	add.w	r2, r7, #8
 8005e16:	2301      	movs	r3, #1
 8005e18:	2111      	movs	r1, #17
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe17 	bl	8005a4e <lps22hh_read_reg>
 8005e20:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10f      	bne.n	8005e48 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	7a3b      	ldrb	r3, [r7, #8]
 8005e32:	f362 1304 	bfi	r3, r2, #4, #1
 8005e36:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005e38:	f107 0208 	add.w	r2, r7, #8
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	2111      	movs	r1, #17
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fe1c 	bl	8005a7e <lps22hh_write_reg>
 8005e46:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005e5e:	f107 0208 	add.w	r2, r7, #8
 8005e62:	2301      	movs	r3, #1
 8005e64:	2110      	movs	r1, #16
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fdf1 	bl	8005a4e <lps22hh_read_reg>
 8005e6c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10f      	bne.n	8005e94 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	7a3b      	ldrb	r3, [r7, #8]
 8005e7e:	f362 0383 	bfi	r3, r2, #2, #2
 8005e82:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005e84:	f107 0208 	add.w	r2, r7, #8
 8005e88:	2301      	movs	r3, #1
 8005e8a:	2110      	movs	r1, #16
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fdf6 	bl	8005a7e <lps22hh_write_reg>
 8005e92:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005eaa:	f107 0208 	add.w	r2, r7, #8
 8005eae:	2301      	movs	r3, #1
 8005eb0:	210e      	movs	r1, #14
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fdcb 	bl	8005a4e <lps22hh_read_reg>
 8005eb8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d118      	bne.n	8005ef2 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	7a3b      	ldrb	r3, [r7, #8]
 8005eca:	f362 0341 	bfi	r3, r2, #1, #1
 8005ece:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	091b      	lsrs	r3, r3, #4
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	7a3b      	ldrb	r3, [r7, #8]
 8005edc:	f362 13c7 	bfi	r3, r2, #7, #1
 8005ee0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005ee2:	f107 0208 	add.w	r2, r7, #8
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	210e      	movs	r1, #14
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fdc7 	bl	8005a7e <lps22hh_write_reg>
 8005ef0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d103      	bne.n	8005f18 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e051      	b.n	8005fbc <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	7b1a      	ldrb	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695a      	ldr	r2, [r3, #20]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <LSM6DSO_RegisterBusIO+0xcc>)
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <LSM6DSO_RegisterBusIO+0xd0>)
 8005f5a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e020      	b.n	8005fbc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4798      	blx	r3
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e016      	b.n	8005fbc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d112      	bne.n	8005fbc <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2112      	movs	r1, #18
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 ff5d 	bl	8006e6a <LSM6DSO_Write_Reg>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	0800730d 	.word	0x0800730d
 8005fcc:	08007343 	.word	0x08007343

08005fd0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d00b      	beq.n	8005ff8 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3320      	adds	r3, #32
 8005fe4:	2180      	movs	r1, #128	; 0x80
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fe8a 	bl	8007d00 <lsm6dso_i3c_disable_set>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff6:	e060      	b.n	80060ba <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3320      	adds	r3, #32
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fe58 	bl	8007cb4 <lsm6dso_auto_increment_set>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	e054      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3320      	adds	r3, #32
 8006014:	2101      	movs	r1, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fd62 	bl	8007ae0 <lsm6dso_block_data_update_set>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8006022:	f04f 33ff 	mov.w	r3, #4294967295
 8006026:	e048      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3320      	adds	r3, #32
 800602c:	2100      	movs	r1, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f001 feae 	bl	8007d90 <lsm6dso_fifo_mode_set>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 800603a:	f04f 33ff 	mov.w	r3, #4294967295
 800603e:	e03c      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2204      	movs	r2, #4
 8006044:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3320      	adds	r3, #32
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fa20 	bl	8007494 <lsm6dso_xl_data_rate_set>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	e02c      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3320      	adds	r3, #32
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f001 f9b6 	bl	80073d8 <lsm6dso_xl_full_scale_set>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	e020      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2204      	movs	r2, #4
 800607c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3320      	adds	r3, #32
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fbce 	bl	8007828 <lsm6dso_gy_data_rate_set>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	e010      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3320      	adds	r3, #32
 800609c:	2106      	movs	r1, #6
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fb5a 	bl	8007758 <lsm6dso_gy_full_scale_set>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 80060aa:	f04f 33ff 	mov.w	r3, #4294967295
 80060ae:	e004      	b.n	80060ba <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f888 	bl	80061e0 <LSM6DSO_ACC_Disable>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	e015      	b.n	8006108 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fc2e 	bl	800693e <LSM6DSO_GYRO_Disable>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ec:	e00c      	b.n	8006108 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3320      	adds	r3, #32
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fdb6 	bl	8007c92 <lsm6dso_device_id_get>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 800612c:	f04f 33ff 	mov.w	r3, #4294967295
 8006130:	e000      	b.n	8006134 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2201      	movs	r2, #1
 8006150:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006164:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2210      	movs	r2, #16
 800616a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	4a07      	ldr	r2, [pc, #28]	; (8006194 <LSM6DSO_GetCapabilities+0x58>)
 8006176:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4a06      	ldr	r2, [pc, #24]	; (8006194 <LSM6DSO_GetCapabilities+0x58>)
 800617c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	45d02000 	.word	0x45d02000

08006198 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	e014      	b.n	80061d8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f103 0220 	add.w	r2, r3, #32
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f001 f969 	bl	8007494 <lsm6dso_xl_data_rate_set>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	e004      	b.n	80061d8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e01f      	b.n	8006236 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f103 0220 	add.w	r2, r3, #32
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3333      	adds	r3, #51	; 0x33
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f001 fa40 	bl	8007688 <lsm6dso_xl_data_rate_get>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
 8006212:	e010      	b.n	8006236 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3320      	adds	r3, #32
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f001 f93a 	bl	8007494 <lsm6dso_xl_data_rate_set>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	e004      	b.n	8006236 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3320      	adds	r3, #32
 8006252:	f107 020b 	add.w	r2, r7, #11
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f8e3 	bl	8007424 <lsm6dso_xl_full_scale_get>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006264:	f04f 33ff 	mov.w	r3, #4294967295
 8006268:	e023      	b.n	80062b2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d81b      	bhi.n	80062a8 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	08006289 	.word	0x08006289
 800627c:	080062a1 	.word	0x080062a1
 8006280:	08006291 	.word	0x08006291
 8006284:	08006299 	.word	0x08006299
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800628c:	601a      	str	r2, [r3, #0]
      break;
 800628e:	e00f      	b.n	80062b0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	4a0b      	ldr	r2, [pc, #44]	; (80062c0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006294:	601a      	str	r2, [r3, #0]
      break;
 8006296:	e00b      	b.n	80062b0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800629c:	601a      	str	r2, [r3, #0]
      break;
 800629e:	e007      	b.n	80062b0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80062a4:	601a      	str	r2, [r3, #0]
      break;
 80062a6:	e003      	b.n	80062b0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80062a8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ac:	60fb      	str	r3, [r7, #12]
      break;
 80062ae:	bf00      	nop
  }

  return ret;
 80062b0:	68fb      	ldr	r3, [r7, #12]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	3d79db23 	.word	0x3d79db23
 80062c0:	3df9db23 	.word	0x3df9db23
 80062c4:	3e79db23 	.word	0x3e79db23
 80062c8:	3ef9db23 	.word	0x3ef9db23

080062cc <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3320      	adds	r3, #32
 80062de:	f107 020b 	add.w	r2, r7, #11
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f9cf 	bl	8007688 <lsm6dso_xl_data_rate_get>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
 80062f4:	e054      	b.n	80063a0 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80062f6:	7afb      	ldrb	r3, [r7, #11]
 80062f8:	2b0b      	cmp	r3, #11
 80062fa:	d84c      	bhi.n	8006396 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006335 	.word	0x08006335
 8006308:	08006347 	.word	0x08006347
 800630c:	0800634f 	.word	0x0800634f
 8006310:	08006357 	.word	0x08006357
 8006314:	0800635f 	.word	0x0800635f
 8006318:	08006367 	.word	0x08006367
 800631c:	0800636f 	.word	0x0800636f
 8006320:	08006377 	.word	0x08006377
 8006324:	0800637f 	.word	0x0800637f
 8006328:	08006387 	.word	0x08006387
 800632c:	0800638f 	.word	0x0800638f
 8006330:	0800633f 	.word	0x0800633f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
      break;
 800633c:	e02f      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8006342:	601a      	str	r2, [r3, #0]
      break;
 8006344:	e02b      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800634a:	601a      	str	r2, [r3, #0]
      break;
 800634c:	e027      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8006352:	601a      	str	r2, [r3, #0]
      break;
 8006354:	e023      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800635a:	601a      	str	r2, [r3, #0]
      break;
 800635c:	e01f      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8006362:	601a      	str	r2, [r3, #0]
      break;
 8006364:	e01b      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	4a14      	ldr	r2, [pc, #80]	; (80063bc <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800636a:	601a      	str	r2, [r3, #0]
      break;
 800636c:	e017      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006372:	601a      	str	r2, [r3, #0]
      break;
 8006374:	e013      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800637a:	601a      	str	r2, [r3, #0]
      break;
 800637c:	e00f      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006382:	601a      	str	r2, [r3, #0]
      break;
 8006384:	e00b      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	4a10      	ldr	r2, [pc, #64]	; (80063cc <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800638a:	601a      	str	r2, [r3, #0]
      break;
 800638c:	e007      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	4a0f      	ldr	r2, [pc, #60]	; (80063d0 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006392:	601a      	str	r2, [r3, #0]
      break;
 8006394:	e003      	b.n	800639e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	60fb      	str	r3, [r7, #12]
      break;
 800639c:	bf00      	nop
  }

  return ret;
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	3fcccccd 	.word	0x3fcccccd
 80063ac:	41480000 	.word	0x41480000
 80063b0:	41d00000 	.word	0x41d00000
 80063b4:	42500000 	.word	0x42500000
 80063b8:	42d00000 	.word	0x42d00000
 80063bc:	43500000 	.word	0x43500000
 80063c0:	43d08000 	.word	0x43d08000
 80063c4:	44504000 	.word	0x44504000
 80063c8:	44d06000 	.word	0x44d06000
 80063cc:	45505000 	.word	0x45505000
 80063d0:	45d05800 	.word	0x45d05800

080063d4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80063e0:	2100      	movs	r1, #0
 80063e2:	ed97 0a00 	vldr	s0, [r7]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f806 	bl	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80063ec:	4603      	mov	r3, r0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	; 0x30
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	ed87 0a02 	vstr	s0, [r7, #8]
 8006404:	460b      	mov	r3, r1
 8006406:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	2b02      	cmp	r3, #2
 8006414:	f000 80ea 	beq.w	80065ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006418:	2b02      	cmp	r3, #2
 800641a:	f300 8163 	bgt.w	80066e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8006422:	2b01      	cmp	r3, #1
 8006424:	d074      	beq.n	8006510 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006426:	e15d      	b.n	80066e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f103 0020 	add.w	r0, r3, #32
 800642e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006432:	2301      	movs	r3, #1
 8006434:	2114      	movs	r1, #20
 8006436:	f000 ff9f 	bl	8007378 <lsm6dso_read_reg>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	e16c      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006446:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800644a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d025      	beq.n	80064a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10b      	bne.n	8006476 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3320      	adds	r3, #32
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f001 f815 	bl	8007494 <lsm6dso_xl_data_rate_set>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	e154      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006476:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800647a:	f36f 13c7 	bfc	r3, #7, #1
 800647e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f103 0020 	add.w	r0, r3, #32
 8006488:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800648c:	2301      	movs	r3, #1
 800648e:	2114      	movs	r1, #20
 8006490:	f000 ff8a 	bl	80073a8 <lsm6dso_write_reg>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800649a:	f04f 33ff 	mov.w	r3, #4294967295
 800649e:	e13f      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f103 0020 	add.w	r0, r3, #32
 80064a6:	f107 0220 	add.w	r2, r7, #32
 80064aa:	2301      	movs	r3, #1
 80064ac:	2115      	movs	r1, #21
 80064ae:	f000 ff63 	bl	8007378 <lsm6dso_read_reg>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e130      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80064be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d014      	beq.n	80064f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80064cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064d0:	f36f 1304 	bfc	r3, #4, #1
 80064d4:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f103 0020 	add.w	r0, r3, #32
 80064de:	f107 0220 	add.w	r2, r7, #32
 80064e2:	2301      	movs	r3, #1
 80064e4:	2115      	movs	r1, #21
 80064e6:	f000 ff5f 	bl	80073a8 <lsm6dso_write_reg>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	e114      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80064f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80064fa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80064fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006506:	d400      	bmi.n	800650a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006508:	e0f0      	b.n	80066ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800650a:	4b87      	ldr	r3, [pc, #540]	; (8006728 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
 800650e:	e0ed      	b.n	80066ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f103 0020 	add.w	r0, r3, #32
 8006516:	f107 021c 	add.w	r2, r7, #28
 800651a:	2301      	movs	r3, #1
 800651c:	2114      	movs	r1, #20
 800651e:	f000 ff2b 	bl	8007378 <lsm6dso_read_reg>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	e0f8      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800652e:	7f3b      	ldrb	r3, [r7, #28]
 8006530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d023      	beq.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006540:	2b01      	cmp	r3, #1
 8006542:	d10b      	bne.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3320      	adds	r3, #32
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f000 ffa2 	bl	8007494 <lsm6dso_xl_data_rate_set>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	e0e1      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800655c:	7f3b      	ldrb	r3, [r7, #28]
 800655e:	f36f 13c7 	bfc	r3, #7, #1
 8006562:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f103 0020 	add.w	r0, r3, #32
 800656a:	f107 021c 	add.w	r2, r7, #28
 800656e:	2301      	movs	r3, #1
 8006570:	2114      	movs	r1, #20
 8006572:	f000 ff19 	bl	80073a8 <lsm6dso_write_reg>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	e0ce      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f103 0020 	add.w	r0, r3, #32
 8006588:	f107 0218 	add.w	r2, r7, #24
 800658c:	2301      	movs	r3, #1
 800658e:	2115      	movs	r1, #21
 8006590:	f000 fef2 	bl	8007378 <lsm6dso_read_reg>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	e0bf      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80065a0:	7e3b      	ldrb	r3, [r7, #24]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d112      	bne.n	80065d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80065ac:	7e3b      	ldrb	r3, [r7, #24]
 80065ae:	f043 0310 	orr.w	r3, r3, #16
 80065b2:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f103 0020 	add.w	r0, r3, #32
 80065ba:	f107 0218 	add.w	r2, r7, #24
 80065be:	2301      	movs	r3, #1
 80065c0:	2115      	movs	r1, #21
 80065c2:	f000 fef1 	bl	80073a8 <lsm6dso_write_reg>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	e0a6      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80065d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80065d6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800672c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80065da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e2:	dc00      	bgt.n	80065e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80065e4:	e082      	b.n	80066ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80065e6:	4b52      	ldr	r3, [pc, #328]	; (8006730 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ea:	e07f      	b.n	80066ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f103 0020 	add.w	r0, r3, #32
 80065f2:	f107 0210 	add.w	r2, r7, #16
 80065f6:	2301      	movs	r3, #1
 80065f8:	2115      	movs	r1, #21
 80065fa:	f000 febd 	bl	8007378 <lsm6dso_read_reg>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006604:	f04f 33ff 	mov.w	r3, #4294967295
 8006608:	e08a      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800660a:	7c3b      	ldrb	r3, [r7, #16]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d012      	beq.n	800663c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006616:	7c3b      	ldrb	r3, [r7, #16]
 8006618:	f36f 1304 	bfc	r3, #4, #1
 800661c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f103 0020 	add.w	r0, r3, #32
 8006624:	f107 0210 	add.w	r2, r7, #16
 8006628:	2301      	movs	r3, #1
 800662a:	2115      	movs	r1, #21
 800662c:	f000 febc 	bl	80073a8 <lsm6dso_write_reg>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	e071      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006642:	2b01      	cmp	r3, #1
 8006644:	d108      	bne.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f979 	bl	800693e <LSM6DSO_GYRO_Disable>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8006652:	f04f 33ff 	mov.w	r3, #4294967295
 8006656:	e063      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f103 0020 	add.w	r0, r3, #32
 800665e:	f107 0214 	add.w	r2, r7, #20
 8006662:	2301      	movs	r3, #1
 8006664:	2114      	movs	r1, #20
 8006666:	f000 fe87 	bl	8007378 <lsm6dso_read_reg>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006670:	f04f 33ff 	mov.w	r3, #4294967295
 8006674:	e054      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8006676:	7d3b      	ldrb	r3, [r7, #20]
 8006678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d123      	bne.n	80066ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10b      	bne.n	80066a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3320      	adds	r3, #32
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fefe 	bl	8007494 <lsm6dso_xl_data_rate_set>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 800669e:	f04f 33ff 	mov.w	r3, #4294967295
 80066a2:	e03d      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80066a4:	7d3b      	ldrb	r3, [r7, #20]
 80066a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066aa:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f103 0020 	add.w	r0, r3, #32
 80066b2:	f107 0214 	add.w	r2, r7, #20
 80066b6:	2301      	movs	r3, #1
 80066b8:	2114      	movs	r1, #20
 80066ba:	f000 fe75 	bl	80073a8 <lsm6dso_write_reg>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295
 80066c8:	e02a      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80066ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80066ce:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800672c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80066d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066da:	dc00      	bgt.n	80066de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80066dc:	e006      	b.n	80066ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80066de:	4b14      	ldr	r3, [pc, #80]	; (8006730 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e2:	e003      	b.n	80066ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80066ea:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d102      	bne.n	80066fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	e012      	b.n	8006720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006700:	2b01      	cmp	r3, #1
 8006702:	d106      	bne.n	8006712 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006704:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fbc9 	bl	8006ea0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800670e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006710:	e005      	b.n	800671e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006712:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fc5a 	bl	8006fd0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800671c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006720:	4618      	mov	r0, r3
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	41480000 	.word	0x41480000
 800672c:	43500000 	.word	0x43500000
 8006730:	43500000 	.word	0x43500000

08006734 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3320      	adds	r3, #32
 8006746:	f107 020b 	add.w	r2, r7, #11
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fe69 	bl	8007424 <lsm6dso_xl_full_scale_get>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	e023      	b.n	80067a6 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800675e:	7afb      	ldrb	r3, [r7, #11]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d81b      	bhi.n	800679c <LSM6DSO_ACC_GetFullScale+0x68>
 8006764:	a201      	add	r2, pc, #4	; (adr r2, 800676c <LSM6DSO_ACC_GetFullScale+0x38>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	0800677d 	.word	0x0800677d
 8006770:	08006795 	.word	0x08006795
 8006774:	08006785 	.word	0x08006785
 8006778:	0800678d 	.word	0x0800678d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2202      	movs	r2, #2
 8006780:	601a      	str	r2, [r3, #0]
      break;
 8006782:	e00f      	b.n	80067a4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2204      	movs	r2, #4
 8006788:	601a      	str	r2, [r3, #0]
      break;
 800678a:	e00b      	b.n	80067a4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2208      	movs	r2, #8
 8006790:	601a      	str	r2, [r3, #0]
      break;
 8006792:	e007      	b.n	80067a4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2210      	movs	r2, #16
 8006798:	601a      	str	r2, [r3, #0]
      break;
 800679a:	e003      	b.n	80067a4 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	60fb      	str	r3, [r7, #12]
      break;
 80067a2:	bf00      	nop
  }

  return ret;
 80067a4:	68fb      	ldr	r3, [r7, #12]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	dd0b      	ble.n	80067d8 <LSM6DSO_ACC_SetFullScale+0x28>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	dd06      	ble.n	80067d4 <LSM6DSO_ACC_SetFullScale+0x24>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	dc01      	bgt.n	80067d0 <LSM6DSO_ACC_SetFullScale+0x20>
 80067cc:	2303      	movs	r3, #3
 80067ce:	e004      	b.n	80067da <LSM6DSO_ACC_SetFullScale+0x2a>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e002      	b.n	80067da <LSM6DSO_ACC_SetFullScale+0x2a>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e000      	b.n	80067da <LSM6DSO_ACC_SetFullScale+0x2a>
 80067d8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80067da:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3320      	adds	r3, #32
 80067e0:	7bfa      	ldrb	r2, [r7, #15]
 80067e2:	4611      	mov	r1, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fdf7 	bl	80073d8 <lsm6dso_xl_full_scale_set>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	e000      	b.n	80067f8 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3320      	adds	r3, #32
 800680e:	f107 0208 	add.w	r2, r7, #8
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f9d4 	bl	8007bc2 <lsm6dso_acceleration_raw_get>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006820:	f04f 33ff 	mov.w	r3, #4294967295
 8006824:	e00c      	b.n	8006840 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006826:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800682e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006836:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3320      	adds	r3, #32
 800685c:	f107 0210 	add.w	r2, r7, #16
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f001 f9ad 	bl	8007bc2 <lsm6dso_acceleration_raw_get>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800686e:	f04f 33ff 	mov.w	r3, #4294967295
 8006872:	e03c      	b.n	80068ee <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fce0 	bl	8006240 <LSM6DSO_ACC_GetSensitivity>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006886:	f04f 33ff 	mov.w	r3, #4294967295
 800688a:	e030      	b.n	80068ee <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800688c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006890:	ee07 3a90 	vmov	s15, r3
 8006894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006898:	edd7 7a03 	vldr	s15, [r7, #12]
 800689c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a4:	ee17 2a90 	vmov	r2, s15
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80068ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068b0:	ee07 3a90 	vmov	s15, r3
 80068b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80068bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c4:	ee17 2a90 	vmov	r2, s15
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80068cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80068dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e4:	ee17 2a90 	vmov	r2, s15
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e014      	b.n	8006936 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f103 0220 	add.w	r2, r3, #32
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f000 ff84 	bl	8007828 <lsm6dso_gy_data_rate_set>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	e004      	b.n	8006936 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e01f      	b.n	8006994 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f103 0220 	add.w	r2, r3, #32
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3334      	adds	r3, #52	; 0x34
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f001 f85b 	bl	8007a1c <lsm6dso_gy_data_rate_get>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	e010      	b.n	8006994 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3320      	adds	r3, #32
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f000 ff55 	bl	8007828 <lsm6dso_gy_data_rate_set>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
 8006988:	e004      	b.n	8006994 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3320      	adds	r3, #32
 80069ae:	f107 020b 	add.w	r2, r7, #11
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fef5 	bl	80077a4 <lsm6dso_gy_full_scale_get>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	e02d      	b.n	8006a22 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b06      	cmp	r3, #6
 80069ca:	d825      	bhi.n	8006a18 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	080069f1 	.word	0x080069f1
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a19 	.word	0x08006a19
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a19 	.word	0x08006a19
 80069ec:	08006a11 	.word	0x08006a11
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	4a0e      	ldr	r2, [pc, #56]	; (8006a2c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80069f4:	601a      	str	r2, [r3, #0]
      break;
 80069f6:	e013      	b.n	8006a20 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80069fc:	601a      	str	r2, [r3, #0]
      break;
 80069fe:	e00f      	b.n	8006a20 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006a04:	601a      	str	r2, [r3, #0]
      break;
 8006a06:	e00b      	b.n	8006a20 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	4a0b      	ldr	r2, [pc, #44]	; (8006a38 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006a0c:	601a      	str	r2, [r3, #0]
      break;
 8006a0e:	e007      	b.n	8006a20 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006a14:	601a      	str	r2, [r3, #0]
      break;
 8006a16:	e003      	b.n	8006a20 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	60fb      	str	r3, [r7, #12]
      break;
 8006a1e:	bf00      	nop
  }

  return ret;
 8006a20:	68fb      	ldr	r3, [r7, #12]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	408c0000 	.word	0x408c0000
 8006a30:	410c0000 	.word	0x410c0000
 8006a34:	418c0000 	.word	0x418c0000
 8006a38:	420c0000 	.word	0x420c0000
 8006a3c:	428c0000 	.word	0x428c0000

08006a40 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3320      	adds	r3, #32
 8006a52:	f107 020b 	add.w	r2, r7, #11
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ffdf 	bl	8007a1c <lsm6dso_gy_data_rate_get>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006a64:	f04f 33ff 	mov.w	r3, #4294967295
 8006a68:	e04e      	b.n	8006b08 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	d846      	bhi.n	8006afe <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	08006aaf 	.word	0x08006aaf
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006abf 	.word	0x08006abf
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006acf 	.word	0x08006acf
 8006a90:	08006ad7 	.word	0x08006ad7
 8006a94:	08006adf 	.word	0x08006adf
 8006a98:	08006ae7 	.word	0x08006ae7
 8006a9c:	08006aef 	.word	0x08006aef
 8006aa0:	08006af7 	.word	0x08006af7
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
      break;
 8006aac:	e02b      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006ab2:	601a      	str	r2, [r3, #0]
      break;
 8006ab4:	e027      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8006aba:	601a      	str	r2, [r3, #0]
      break;
 8006abc:	e023      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006ac2:	601a      	str	r2, [r3, #0]
      break;
 8006ac4:	e01f      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006aca:	601a      	str	r2, [r3, #0]
      break;
 8006acc:	e01b      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	4a13      	ldr	r2, [pc, #76]	; (8006b20 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006ad2:	601a      	str	r2, [r3, #0]
      break;
 8006ad4:	e017      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006ada:	601a      	str	r2, [r3, #0]
      break;
 8006adc:	e013      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	4a11      	ldr	r2, [pc, #68]	; (8006b28 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006ae2:	601a      	str	r2, [r3, #0]
      break;
 8006ae4:	e00f      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	4a10      	ldr	r2, [pc, #64]	; (8006b2c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006aea:	601a      	str	r2, [r3, #0]
      break;
 8006aec:	e00b      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8006af2:	601a      	str	r2, [r3, #0]
      break;
 8006af4:	e007      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	4a0e      	ldr	r2, [pc, #56]	; (8006b34 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006afa:	601a      	str	r2, [r3, #0]
      break;
 8006afc:	e003      	b.n	8006b06 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295
 8006b02:	60fb      	str	r3, [r7, #12]
      break;
 8006b04:	bf00      	nop
  }

  return ret;
 8006b06:	68fb      	ldr	r3, [r7, #12]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	41480000 	.word	0x41480000
 8006b14:	41d00000 	.word	0x41d00000
 8006b18:	42500000 	.word	0x42500000
 8006b1c:	42d00000 	.word	0x42d00000
 8006b20:	43500000 	.word	0x43500000
 8006b24:	43d08000 	.word	0x43d08000
 8006b28:	44504000 	.word	0x44504000
 8006b2c:	44d06000 	.word	0x44d06000
 8006b30:	45505000 	.word	0x45505000
 8006b34:	45d05800 	.word	0x45d05800

08006b38 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006b44:	2100      	movs	r1, #0
 8006b46:	ed97 0a00 	vldr	s0, [r7]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f806 	bl	8006b5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006b50:	4603      	mov	r3, r0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d028      	beq.n	8006bd0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8006b7e:	e05c      	b.n	8006c3a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f103 0020 	add.w	r0, r3, #32
 8006b86:	f107 0214 	add.w	r2, r7, #20
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	2116      	movs	r1, #22
 8006b8e:	f000 fbf3 	bl	8007378 <lsm6dso_read_reg>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	e06c      	b.n	8006c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8006b9e:	7d3b      	ldrb	r3, [r7, #20]
 8006ba0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d04b      	beq.n	8006c42 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8006baa:	7d3b      	ldrb	r3, [r7, #20]
 8006bac:	f36f 13c7 	bfc	r3, #7, #1
 8006bb0:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f103 0020 	add.w	r0, r3, #32
 8006bb8:	f107 0214 	add.w	r2, r7, #20
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	2116      	movs	r1, #22
 8006bc0:	f000 fbf2 	bl	80073a8 <lsm6dso_write_reg>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d03b      	beq.n	8006c42 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	e053      	b.n	8006c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f103 0020 	add.w	r0, r3, #32
 8006bd6:	f107 0210 	add.w	r2, r7, #16
 8006bda:	2301      	movs	r3, #1
 8006bdc:	2116      	movs	r1, #22
 8006bde:	f000 fbcb 	bl	8007378 <lsm6dso_read_reg>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006be8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bec:	e044      	b.n	8006c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006bee:	7c3b      	ldrb	r3, [r7, #16]
 8006bf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d112      	bne.n	8006c20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006bfa:	7c3b      	ldrb	r3, [r7, #16]
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c00:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f103 0020 	add.w	r0, r3, #32
 8006c08:	f107 0210 	add.w	r2, r7, #16
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	2116      	movs	r1, #22
 8006c10:	f000 fbca 	bl	80073a8 <lsm6dso_write_reg>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1e:	e02b      	b.n	8006c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c24:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006c80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c30:	dc00      	bgt.n	8006c34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8006c32:	e007      	b.n	8006c44 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006c34:	4b13      	ldr	r3, [pc, #76]	; (8006c84 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e004      	b.n	8006c44 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	61fb      	str	r3, [r7, #28]
      break;
 8006c40:	e000      	b.n	8006c44 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8006c42:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d102      	bne.n	8006c52 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c50:	e012      	b.n	8006c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d106      	bne.n	8006c6a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006c5c:	ed97 0a06 	vldr	s0, [r7, #24]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fa45 	bl	80070f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006c66:	61f8      	str	r0, [r7, #28]
 8006c68:	e005      	b.n	8006c76 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006c6a:	ed97 0a06 	vldr	s0, [r7, #24]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 faca 	bl	8007208 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006c74:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006c76:	69fb      	ldr	r3, [r7, #28]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	43500000 	.word	0x43500000
 8006c84:	43500000 	.word	0x43500000

08006c88 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3320      	adds	r3, #32
 8006c9a:	f107 020b 	add.w	r2, r7, #11
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fd7f 	bl	80077a4 <lsm6dso_gy_full_scale_get>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb0:	e030      	b.n	8006d14 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	d828      	bhi.n	8006d0a <LSM6DSO_GYRO_GetFullScale+0x82>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d0b 	.word	0x08006d0b
 8006cd0:	08006cf7 	.word	0x08006cf7
 8006cd4:	08006d0b 	.word	0x08006d0b
 8006cd8:	08006d01 	.word	0x08006d01
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	227d      	movs	r2, #125	; 0x7d
 8006ce0:	601a      	str	r2, [r3, #0]
      break;
 8006ce2:	e016      	b.n	8006d12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	22fa      	movs	r2, #250	; 0xfa
 8006ce8:	601a      	str	r2, [r3, #0]
      break;
 8006cea:	e012      	b.n	8006d12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006cf2:	601a      	str	r2, [r3, #0]
      break;
 8006cf4:	e00d      	b.n	8006d12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cfc:	601a      	str	r2, [r3, #0]
      break;
 8006cfe:	e008      	b.n	8006d12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006d06:	601a      	str	r2, [r3, #0]
      break;
 8006d08:	e003      	b.n	8006d12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0e:	60fb      	str	r3, [r7, #12]
      break;
 8006d10:	bf00      	nop
  }

  return ret;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b7d      	cmp	r3, #125	; 0x7d
 8006d2a:	dd12      	ble.n	8006d52 <LSM6DSO_GYRO_SetFullScale+0x36>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2bfa      	cmp	r3, #250	; 0xfa
 8006d30:	dd0d      	ble.n	8006d4e <LSM6DSO_GYRO_SetFullScale+0x32>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d38:	dd07      	ble.n	8006d4a <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d40:	dc01      	bgt.n	8006d46 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006d42:	2304      	movs	r3, #4
 8006d44:	e006      	b.n	8006d54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006d46:	2306      	movs	r3, #6
 8006d48:	e004      	b.n	8006d54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e002      	b.n	8006d54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e000      	b.n	8006d54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006d52:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006d54:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3320      	adds	r3, #32
 8006d5a:	7bfa      	ldrb	r2, [r7, #15]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fcfa 	bl	8007758 <lsm6dso_gy_full_scale_set>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	e000      	b.n	8006d72 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3320      	adds	r3, #32
 8006d88:	f107 0208 	add.w	r2, r7, #8
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fecc 	bl	8007b2c <lsm6dso_angular_rate_raw_get>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	e00c      	b.n	8006dba <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006da0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006da8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006db0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3320      	adds	r3, #32
 8006dd0:	f107 0210 	add.w	r2, r7, #16
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fea8 	bl	8007b2c <lsm6dso_angular_rate_raw_get>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	e03c      	b.n	8006e62 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fdd4 	bl	800699c <LSM6DSO_GYRO_GetSensitivity>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfe:	e030      	b.n	8006e62 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006e00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e18:	ee17 2a90 	vmov	r2, s15
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006e20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e38:	ee17 2a90 	vmov	r2, s15
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006e40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e58:	ee17 2a90 	vmov	r2, s15
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
 8006e76:	4613      	mov	r3, r2
 8006e78:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f103 0020 	add.w	r0, r3, #32
 8006e80:	1cba      	adds	r2, r7, #2
 8006e82:	78f9      	ldrb	r1, [r7, #3]
 8006e84:	2301      	movs	r3, #1
 8006e86:	f000 fa8f 	bl	80073a8 <lsm6dso_write_reg>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	e000      	b.n	8006e98 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006eac:	edd7 7a00 	vldr	s15, [r7]
 8006eb0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006fb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebc:	d801      	bhi.n	8006ec2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006ebe:	230b      	movs	r3, #11
 8006ec0:	e063      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ec2:	edd7 7a00 	vldr	s15, [r7]
 8006ec6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed2:	d801      	bhi.n	8006ed8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e058      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ed8:	edd7 7a00 	vldr	s15, [r7]
 8006edc:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee8:	d801      	bhi.n	8006eee <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e04d      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006eee:	edd7 7a00 	vldr	s15, [r7]
 8006ef2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006fb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	d801      	bhi.n	8006f04 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006f00:	2303      	movs	r3, #3
 8006f02:	e042      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f04:	edd7 7a00 	vldr	s15, [r7]
 8006f08:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006fb8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f14:	d801      	bhi.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006f16:	2304      	movs	r3, #4
 8006f18:	e037      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f1a:	edd7 7a00 	vldr	s15, [r7]
 8006f1e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006fbc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2a:	d801      	bhi.n	8006f30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006f2c:	2305      	movs	r3, #5
 8006f2e:	e02c      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f30:	edd7 7a00 	vldr	s15, [r7]
 8006f34:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006fc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f40:	d801      	bhi.n	8006f46 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006f42:	2306      	movs	r3, #6
 8006f44:	e021      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f46:	edd7 7a00 	vldr	s15, [r7]
 8006f4a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006fc4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f56:	d801      	bhi.n	8006f5c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006f58:	2307      	movs	r3, #7
 8006f5a:	e016      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f5c:	edd7 7a00 	vldr	s15, [r7]
 8006f60:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006fc8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6c:	d801      	bhi.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006f6e:	2308      	movs	r3, #8
 8006f70:	e00b      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f72:	edd7 7a00 	vldr	s15, [r7]
 8006f76:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006fcc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f82:	d801      	bhi.n	8006f88 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006f84:	2309      	movs	r3, #9
 8006f86:	e000      	b.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f88:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006f8a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3320      	adds	r3, #32
 8006f90:	7bfa      	ldrb	r2, [r7, #15]
 8006f92:	4611      	mov	r1, r2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fa7d 	bl	8007494 <lsm6dso_xl_data_rate_set>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	e000      	b.n	8006fa8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	3fcccccd 	.word	0x3fcccccd
 8006fb4:	42500000 	.word	0x42500000
 8006fb8:	42d00000 	.word	0x42d00000
 8006fbc:	43500000 	.word	0x43500000
 8006fc0:	43d08000 	.word	0x43d08000
 8006fc4:	44504000 	.word	0x44504000
 8006fc8:	44d06000 	.word	0x44d06000
 8006fcc:	45505000 	.word	0x45505000

08006fd0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006fdc:	edd7 7a00 	vldr	s15, [r7]
 8006fe0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80070d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fec:	d801      	bhi.n	8006ff2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006fee:	230b      	movs	r3, #11
 8006ff0:	e063      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ff2:	edd7 7a00 	vldr	s15, [r7]
 8006ff6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d801      	bhi.n	8007008 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007004:	2301      	movs	r3, #1
 8007006:	e058      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007008:	edd7 7a00 	vldr	s15, [r7]
 800700c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007018:	d801      	bhi.n	800701e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800701a:	2302      	movs	r3, #2
 800701c:	e04d      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800701e:	edd7 7a00 	vldr	s15, [r7]
 8007022:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80070d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8007026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	d801      	bhi.n	8007034 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007030:	2303      	movs	r3, #3
 8007032:	e042      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007034:	edd7 7a00 	vldr	s15, [r7]
 8007038:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80070d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800703c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007044:	d801      	bhi.n	800704a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007046:	2304      	movs	r3, #4
 8007048:	e037      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800704a:	edd7 7a00 	vldr	s15, [r7]
 800704e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80070dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8007052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705a:	d801      	bhi.n	8007060 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800705c:	2305      	movs	r3, #5
 800705e:	e02c      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007060:	edd7 7a00 	vldr	s15, [r7]
 8007064:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80070e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8007068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800706c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007070:	d801      	bhi.n	8007076 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007072:	2306      	movs	r3, #6
 8007074:	e021      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007076:	edd7 7a00 	vldr	s15, [r7]
 800707a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80070e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800707e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007086:	d801      	bhi.n	800708c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007088:	2307      	movs	r3, #7
 800708a:	e016      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800708c:	edd7 7a00 	vldr	s15, [r7]
 8007090:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80070e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709c:	d801      	bhi.n	80070a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800709e:	2308      	movs	r3, #8
 80070a0:	e00b      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80070a2:	edd7 7a00 	vldr	s15, [r7]
 80070a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80070ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80070aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b2:	d801      	bhi.n	80070b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80070b4:	2309      	movs	r3, #9
 80070b6:	e000      	b.n	80070ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80070b8:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	3fcccccd 	.word	0x3fcccccd
 80070d4:	42500000 	.word	0x42500000
 80070d8:	42d00000 	.word	0x42d00000
 80070dc:	43500000 	.word	0x43500000
 80070e0:	43d08000 	.word	0x43d08000
 80070e4:	44504000 	.word	0x44504000
 80070e8:	44d06000 	.word	0x44d06000
 80070ec:	45505000 	.word	0x45505000

080070f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80070fc:	edd7 7a00 	vldr	s15, [r7]
 8007100:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710c:	d801      	bhi.n	8007112 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800710e:	2301      	movs	r3, #1
 8007110:	e058      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007112:	edd7 7a00 	vldr	s15, [r7]
 8007116:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800711a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	d801      	bhi.n	8007128 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007124:	2302      	movs	r3, #2
 8007126:	e04d      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007128:	edd7 7a00 	vldr	s15, [r7]
 800712c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80071ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8007130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007138:	d801      	bhi.n	800713e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800713a:	2303      	movs	r3, #3
 800713c:	e042      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800713e:	edd7 7a00 	vldr	s15, [r7]
 8007142:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80071f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800714a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714e:	d801      	bhi.n	8007154 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007150:	2304      	movs	r3, #4
 8007152:	e037      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007154:	edd7 7a00 	vldr	s15, [r7]
 8007158:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80071f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800715c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007164:	d801      	bhi.n	800716a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007166:	2305      	movs	r3, #5
 8007168:	e02c      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800716a:	edd7 7a00 	vldr	s15, [r7]
 800716e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80071f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717a:	d801      	bhi.n	8007180 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800717c:	2306      	movs	r3, #6
 800717e:	e021      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007180:	edd7 7a00 	vldr	s15, [r7]
 8007184:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80071fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	d801      	bhi.n	8007196 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007192:	2307      	movs	r3, #7
 8007194:	e016      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007196:	edd7 7a00 	vldr	s15, [r7]
 800719a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007200 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800719e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a6:	d801      	bhi.n	80071ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80071a8:	2308      	movs	r3, #8
 80071aa:	e00b      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80071ac:	edd7 7a00 	vldr	s15, [r7]
 80071b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007204 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80071b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071bc:	d801      	bhi.n	80071c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80071be:	2309      	movs	r3, #9
 80071c0:	e000      	b.n	80071c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80071c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80071c4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3320      	adds	r3, #32
 80071ca:	7bfa      	ldrb	r2, [r7, #15]
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fb2a 	bl	8007828 <lsm6dso_gy_data_rate_set>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80071da:	f04f 33ff 	mov.w	r3, #4294967295
 80071de:	e000      	b.n	80071e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	42500000 	.word	0x42500000
 80071f0:	42d00000 	.word	0x42d00000
 80071f4:	43500000 	.word	0x43500000
 80071f8:	43d08000 	.word	0x43d08000
 80071fc:	44504000 	.word	0x44504000
 8007200:	44d06000 	.word	0x44d06000
 8007204:	45505000 	.word	0x45505000

08007208 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007214:	edd7 7a00 	vldr	s15, [r7]
 8007218:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800721c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007224:	d801      	bhi.n	800722a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007226:	2301      	movs	r3, #1
 8007228:	e058      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800722a:	edd7 7a00 	vldr	s15, [r7]
 800722e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	d801      	bhi.n	8007240 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800723c:	2302      	movs	r3, #2
 800723e:	e04d      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007240:	edd7 7a00 	vldr	s15, [r7]
 8007244:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80072f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800724c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007250:	d801      	bhi.n	8007256 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007252:	2303      	movs	r3, #3
 8007254:	e042      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007256:	edd7 7a00 	vldr	s15, [r7]
 800725a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80072f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800725e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	d801      	bhi.n	800726c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007268:	2304      	movs	r3, #4
 800726a:	e037      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800726c:	edd7 7a00 	vldr	s15, [r7]
 8007270:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80072f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	d801      	bhi.n	8007282 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800727e:	2305      	movs	r3, #5
 8007280:	e02c      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007282:	edd7 7a00 	vldr	s15, [r7]
 8007286:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80072fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800728a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	d801      	bhi.n	8007298 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007294:	2306      	movs	r3, #6
 8007296:	e021      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007298:	edd7 7a00 	vldr	s15, [r7]
 800729c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007300 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80072a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a8:	d801      	bhi.n	80072ae <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80072aa:	2307      	movs	r3, #7
 80072ac:	e016      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072ae:	edd7 7a00 	vldr	s15, [r7]
 80072b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007304 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80072b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072be:	d801      	bhi.n	80072c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80072c0:	2308      	movs	r3, #8
 80072c2:	e00b      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072c4:	edd7 7a00 	vldr	s15, [r7]
 80072c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007308 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80072cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d4:	d801      	bhi.n	80072da <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80072d6:	2309      	movs	r3, #9
 80072d8:	e000      	b.n	80072dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072da:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	42500000 	.word	0x42500000
 80072f4:	42d00000 	.word	0x42d00000
 80072f8:	43500000 	.word	0x43500000
 80072fc:	43d08000 	.word	0x43d08000
 8007300:	44504000 	.word	0x44504000
 8007304:	44d06000 	.word	0x44d06000
 8007308:	45505000 	.word	0x45505000

0800730c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	461a      	mov	r2, r3
 8007318:	460b      	mov	r3, r1
 800731a:	72fb      	strb	r3, [r7, #11]
 800731c:	4613      	mov	r3, r2
 800731e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	695c      	ldr	r4, [r3, #20]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	7b1b      	ldrb	r3, [r3, #12]
 800732c:	b298      	uxth	r0, r3
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	b299      	uxth	r1, r3
 8007332:	893b      	ldrh	r3, [r7, #8]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	47a0      	blx	r4
 8007338:	4603      	mov	r3, r0
}
 800733a:	4618      	mov	r0, r3
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	bd90      	pop	{r4, r7, pc}

08007342 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007342:	b590      	push	{r4, r7, lr}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	461a      	mov	r2, r3
 800734e:	460b      	mov	r3, r1
 8007350:	72fb      	strb	r3, [r7, #11]
 8007352:	4613      	mov	r3, r2
 8007354:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	691c      	ldr	r4, [r3, #16]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	7b1b      	ldrb	r3, [r3, #12]
 8007362:	b298      	uxth	r0, r3
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	b299      	uxth	r1, r3
 8007368:	893b      	ldrh	r3, [r7, #8]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	47a0      	blx	r4
 800736e:	4603      	mov	r3, r0
}
 8007370:	4618      	mov	r0, r3
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	bd90      	pop	{r4, r7, pc}

08007378 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	461a      	mov	r2, r3
 8007384:	460b      	mov	r3, r1
 8007386:	72fb      	strb	r3, [r7, #11]
 8007388:	4613      	mov	r3, r2
 800738a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685c      	ldr	r4, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68d8      	ldr	r0, [r3, #12]
 8007394:	893b      	ldrh	r3, [r7, #8]
 8007396:	7af9      	ldrb	r1, [r7, #11]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	47a0      	blx	r4
 800739c:	6178      	str	r0, [r7, #20]

  return ret;
 800739e:	697b      	ldr	r3, [r7, #20]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd90      	pop	{r4, r7, pc}

080073a8 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	461a      	mov	r2, r3
 80073b4:	460b      	mov	r3, r1
 80073b6:	72fb      	strb	r3, [r7, #11]
 80073b8:	4613      	mov	r3, r2
 80073ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681c      	ldr	r4, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68d8      	ldr	r0, [r3, #12]
 80073c4:	893b      	ldrh	r3, [r7, #8]
 80073c6:	7af9      	ldrb	r1, [r7, #11]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	47a0      	blx	r4
 80073cc:	6178      	str	r0, [r7, #20]

  return ret;
 80073ce:	697b      	ldr	r3, [r7, #20]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd90      	pop	{r4, r7, pc}

080073d8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80073e4:	f107 0208 	add.w	r2, r7, #8
 80073e8:	2301      	movs	r3, #1
 80073ea:	2110      	movs	r1, #16
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff ffc3 	bl	8007378 <lsm6dso_read_reg>
 80073f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10f      	bne.n	800741a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	b2da      	uxtb	r2, r3
 8007402:	7a3b      	ldrb	r3, [r7, #8]
 8007404:	f362 0383 	bfi	r3, r2, #2, #2
 8007408:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800740a:	f107 0208 	add.w	r2, r7, #8
 800740e:	2301      	movs	r3, #1
 8007410:	2110      	movs	r1, #16
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff ffc8 	bl	80073a8 <lsm6dso_write_reg>
 8007418:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800741a:	68fb      	ldr	r3, [r7, #12]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800742e:	f107 0208 	add.w	r2, r7, #8
 8007432:	2301      	movs	r3, #1
 8007434:	2110      	movs	r1, #16
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff ff9e 	bl	8007378 <lsm6dso_read_reg>
 800743c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800743e:	7a3b      	ldrb	r3, [r7, #8]
 8007440:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d81a      	bhi.n	8007480 <lsm6dso_xl_full_scale_get+0x5c>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <lsm6dso_xl_full_scale_get+0x2c>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007461 	.word	0x08007461
 8007454:	08007469 	.word	0x08007469
 8007458:	08007471 	.word	0x08007471
 800745c:	08007479 	.word	0x08007479
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
      break;
 8007466:	e00f      	b.n	8007488 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
      break;
 800746e:	e00b      	b.n	8007488 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2202      	movs	r2, #2
 8007474:	701a      	strb	r2, [r3, #0]
      break;
 8007476:	e007      	b.n	8007488 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2203      	movs	r2, #3
 800747c:	701a      	strb	r2, [r3, #0]
      break;
 800747e:	e003      	b.n	8007488 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
      break;
 8007486:	bf00      	nop
  }

  return ret;
 8007488:	68fb      	ldr	r3, [r7, #12]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop

08007494 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80074a4:	f107 030c 	add.w	r3, r7, #12
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fc96 	bl	8007ddc <lsm6dso_fsm_enable_get>
 80074b0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <lsm6dso_xl_data_rate_set+0x28>
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	e0e0      	b.n	800767e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074bc:	7b3b      	ldrb	r3, [r7, #12]
 80074be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80074c4:	7b3b      	ldrb	r3, [r7, #12]
 80074c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074ca:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074cc:	4313      	orrs	r3, r2
 80074ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80074d0:	7b3b      	ldrb	r3, [r7, #12]
 80074d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80074d8:	4313      	orrs	r3, r2
 80074da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80074dc:	7b3b      	ldrb	r3, [r7, #12]
 80074de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80074e8:	7b3b      	ldrb	r3, [r7, #12]
 80074ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80074f0:	4313      	orrs	r3, r2
 80074f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80074f4:	7b3b      	ldrb	r3, [r7, #12]
 80074f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80074fc:	4313      	orrs	r3, r2
 80074fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007500:	7b3b      	ldrb	r3, [r7, #12]
 8007502:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007506:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007508:	4313      	orrs	r3, r2
 800750a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800750c:	7b3b      	ldrb	r3, [r7, #12]
 800750e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007512:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007514:	4313      	orrs	r3, r2
 8007516:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007518:	7b7b      	ldrb	r3, [r7, #13]
 800751a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800751e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007520:	4313      	orrs	r3, r2
 8007522:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007524:	7b7b      	ldrb	r3, [r7, #13]
 8007526:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800752a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800752c:	4313      	orrs	r3, r2
 800752e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007530:	7b7b      	ldrb	r3, [r7, #13]
 8007532:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007536:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007538:	4313      	orrs	r3, r2
 800753a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800753c:	7b7b      	ldrb	r3, [r7, #13]
 800753e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007542:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007544:	4313      	orrs	r3, r2
 8007546:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007548:	7b7b      	ldrb	r3, [r7, #13]
 800754a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800754e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007550:	4313      	orrs	r3, r2
 8007552:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007554:	7b7b      	ldrb	r3, [r7, #13]
 8007556:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800755a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800755c:	4313      	orrs	r3, r2
 800755e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007560:	7b7b      	ldrb	r3, [r7, #13]
 8007562:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007566:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007568:	4313      	orrs	r3, r2
 800756a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800756c:	7b7b      	ldrb	r3, [r7, #13]
 800756e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007572:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007574:	4313      	orrs	r3, r2
 8007576:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007578:	2b01      	cmp	r3, #1
 800757a:	d164      	bne.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800757c:	f107 030b 	add.w	r3, r7, #11
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fc4c 	bl	8007e20 <lsm6dso_fsm_data_rate_get>
 8007588:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <lsm6dso_xl_data_rate_set+0x100>
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	e074      	b.n	800767e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b03      	cmp	r3, #3
 8007598:	d852      	bhi.n	8007640 <lsm6dso_xl_data_rate_set+0x1ac>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <lsm6dso_xl_data_rate_set+0x10c>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075c3 	.word	0x080075c3
 80075a8:	080075e1 	.word	0x080075e1
 80075ac:	0800760b 	.word	0x0800760b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80075ba:	e044      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	75fb      	strb	r3, [r7, #23]
        break;
 80075c0:	e041      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80075c8:	2302      	movs	r3, #2
 80075ca:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80075cc:	e03b      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d102      	bne.n	80075da <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80075d4:	2302      	movs	r3, #2
 80075d6:	75fb      	strb	r3, [r7, #23]
        break;
 80075d8:	e035      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	75fb      	strb	r3, [r7, #23]
        break;
 80075de:	e032      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80075e6:	2303      	movs	r3, #3
 80075e8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80075ea:	e02c      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80075f2:	2303      	movs	r3, #3
 80075f4:	75fb      	strb	r3, [r7, #23]
        break;
 80075f6:	e026      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d102      	bne.n	8007604 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80075fe:	2303      	movs	r3, #3
 8007600:	75fb      	strb	r3, [r7, #23]
        break;
 8007602:	e020      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	75fb      	strb	r3, [r7, #23]
        break;
 8007608:	e01d      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007610:	2304      	movs	r3, #4
 8007612:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007614:	e017      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d102      	bne.n	8007622 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800761c:	2304      	movs	r3, #4
 800761e:	75fb      	strb	r3, [r7, #23]
        break;
 8007620:	e011      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d102      	bne.n	800762e <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007628:	2304      	movs	r3, #4
 800762a:	75fb      	strb	r3, [r7, #23]
        break;
 800762c:	e00b      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d102      	bne.n	800763a <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007634:	2304      	movs	r3, #4
 8007636:	75fb      	strb	r3, [r7, #23]
        break;
 8007638:	e005      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	75fb      	strb	r3, [r7, #23]
        break;
 800763e:	e002      	b.n	8007646 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	75fb      	strb	r3, [r7, #23]
        break;
 8007644:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007646:	f107 0208 	add.w	r2, r7, #8
 800764a:	2301      	movs	r3, #1
 800764c:	2110      	movs	r1, #16
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fe92 	bl	8007378 <lsm6dso_read_reg>
 8007654:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	b2da      	uxtb	r2, r3
 800765e:	7a3b      	ldrb	r3, [r7, #8]
 8007660:	f362 1307 	bfi	r3, r2, #4, #4
 8007664:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007666:	f107 0208 	add.w	r2, r7, #8
 800766a:	2301      	movs	r3, #1
 800766c:	2110      	movs	r1, #16
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fe9a 	bl	80073a8 <lsm6dso_write_reg>
 8007674:	4602      	mov	r2, r0
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	613b      	str	r3, [r7, #16]

  return ret;
 800767c:	693b      	ldr	r3, [r7, #16]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop

08007688 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007692:	f107 0208 	add.w	r2, r7, #8
 8007696:	2301      	movs	r3, #1
 8007698:	2110      	movs	r1, #16
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fe6c 	bl	8007378 <lsm6dso_read_reg>
 80076a0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80076a2:	7a3b      	ldrb	r3, [r7, #8]
 80076a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b0b      	cmp	r3, #11
 80076ac:	d84a      	bhi.n	8007744 <lsm6dso_xl_data_rate_get+0xbc>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <lsm6dso_xl_data_rate_get+0x2c>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	080076f5 	.word	0x080076f5
 80076c0:	080076fd 	.word	0x080076fd
 80076c4:	08007705 	.word	0x08007705
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	08007715 	.word	0x08007715
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	08007725 	.word	0x08007725
 80076d8:	0800772d 	.word	0x0800772d
 80076dc:	08007735 	.word	0x08007735
 80076e0:	0800773d 	.word	0x0800773d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
      break;
 80076ea:	e02f      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2201      	movs	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e02b      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2202      	movs	r2, #2
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e027      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2203      	movs	r2, #3
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	e023      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2204      	movs	r2, #4
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e01f      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2205      	movs	r2, #5
 8007710:	701a      	strb	r2, [r3, #0]
      break;
 8007712:	e01b      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2206      	movs	r2, #6
 8007718:	701a      	strb	r2, [r3, #0]
      break;
 800771a:	e017      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2207      	movs	r2, #7
 8007720:	701a      	strb	r2, [r3, #0]
      break;
 8007722:	e013      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2208      	movs	r2, #8
 8007728:	701a      	strb	r2, [r3, #0]
      break;
 800772a:	e00f      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2209      	movs	r2, #9
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	e00b      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	220a      	movs	r2, #10
 8007738:	701a      	strb	r2, [r3, #0]
      break;
 800773a:	e007      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	220b      	movs	r2, #11
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e003      	b.n	800774c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
      break;
 800774a:	bf00      	nop
  }

  return ret;
 800774c:	68fb      	ldr	r3, [r7, #12]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop

08007758 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007764:	f107 0208 	add.w	r2, r7, #8
 8007768:	2301      	movs	r3, #1
 800776a:	2111      	movs	r1, #17
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff fe03 	bl	8007378 <lsm6dso_read_reg>
 8007772:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10f      	bne.n	800779a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	b2da      	uxtb	r2, r3
 8007782:	7a3b      	ldrb	r3, [r7, #8]
 8007784:	f362 0343 	bfi	r3, r2, #1, #3
 8007788:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800778a:	f107 0208 	add.w	r2, r7, #8
 800778e:	2301      	movs	r3, #1
 8007790:	2111      	movs	r1, #17
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fe08 	bl	80073a8 <lsm6dso_write_reg>
 8007798:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800779a:	68fb      	ldr	r3, [r7, #12]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80077ae:	f107 0208 	add.w	r2, r7, #8
 80077b2:	2301      	movs	r3, #1
 80077b4:	2111      	movs	r1, #17
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fdde 	bl	8007378 <lsm6dso_read_reg>
 80077bc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80077be:	7a3b      	ldrb	r3, [r7, #8]
 80077c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b06      	cmp	r3, #6
 80077c8:	d824      	bhi.n	8007814 <lsm6dso_gy_full_scale_get+0x70>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <lsm6dso_gy_full_scale_get+0x2c>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	08007815 	.word	0x08007815
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007815 	.word	0x08007815
 80077e8:	0800780d 	.word	0x0800780d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e013      	b.n	800781c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2201      	movs	r2, #1
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e00f      	b.n	800781c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2202      	movs	r2, #2
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e00b      	b.n	800781c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2204      	movs	r2, #4
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e007      	b.n	800781c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2206      	movs	r2, #6
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e003      	b.n	800781c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	bf00      	nop
  }

  return ret;
 800781c:	68fb      	ldr	r3, [r7, #12]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop

08007828 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007838:	f107 030c 	add.w	r3, r7, #12
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 facc 	bl	8007ddc <lsm6dso_fsm_enable_get>
 8007844:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <lsm6dso_gy_data_rate_set+0x28>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	e0e0      	b.n	8007a12 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007850:	7b3b      	ldrb	r3, [r7, #12]
 8007852:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007856:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007858:	7b3b      	ldrb	r3, [r7, #12]
 800785a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800785e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007860:	4313      	orrs	r3, r2
 8007862:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007864:	7b3b      	ldrb	r3, [r7, #12]
 8007866:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800786a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800786c:	4313      	orrs	r3, r2
 800786e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007870:	7b3b      	ldrb	r3, [r7, #12]
 8007872:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007876:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007878:	4313      	orrs	r3, r2
 800787a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800787c:	7b3b      	ldrb	r3, [r7, #12]
 800787e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007882:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007884:	4313      	orrs	r3, r2
 8007886:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007888:	7b3b      	ldrb	r3, [r7, #12]
 800788a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800788e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007890:	4313      	orrs	r3, r2
 8007892:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007894:	7b3b      	ldrb	r3, [r7, #12]
 8007896:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800789a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800789c:	4313      	orrs	r3, r2
 800789e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80078a0:	7b3b      	ldrb	r3, [r7, #12]
 80078a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80078a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80078ac:	7b7b      	ldrb	r3, [r7, #13]
 80078ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80078b4:	4313      	orrs	r3, r2
 80078b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80078b8:	7b7b      	ldrb	r3, [r7, #13]
 80078ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80078c4:	7b7b      	ldrb	r3, [r7, #13]
 80078c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80078ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80078cc:	4313      	orrs	r3, r2
 80078ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80078d0:	7b7b      	ldrb	r3, [r7, #13]
 80078d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80078d8:	4313      	orrs	r3, r2
 80078da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80078dc:	7b7b      	ldrb	r3, [r7, #13]
 80078de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80078e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80078e4:	4313      	orrs	r3, r2
 80078e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80078e8:	7b7b      	ldrb	r3, [r7, #13]
 80078ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80078ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80078f4:	7b7b      	ldrb	r3, [r7, #13]
 80078f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80078fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80078fc:	4313      	orrs	r3, r2
 80078fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007900:	7b7b      	ldrb	r3, [r7, #13]
 8007902:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007906:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007908:	4313      	orrs	r3, r2
 800790a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800790c:	2b01      	cmp	r3, #1
 800790e:	d164      	bne.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007910:	f107 030b 	add.w	r3, r7, #11
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa82 	bl	8007e20 <lsm6dso_fsm_data_rate_get>
 800791c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <lsm6dso_gy_data_rate_set+0x100>
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	e074      	b.n	8007a12 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d852      	bhi.n	80079d4 <lsm6dso_gy_data_rate_set+0x1ac>
 800792e:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <lsm6dso_gy_data_rate_set+0x10c>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007945 	.word	0x08007945
 8007938:	08007957 	.word	0x08007957
 800793c:	08007975 	.word	0x08007975
 8007940:	0800799f 	.word	0x0800799f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800794a:	2301      	movs	r3, #1
 800794c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800794e:	e044      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	75fb      	strb	r3, [r7, #23]
        break;
 8007954:	e041      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800795c:	2302      	movs	r3, #2
 800795e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007960:	e03b      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d102      	bne.n	800796e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007968:	2302      	movs	r3, #2
 800796a:	75fb      	strb	r3, [r7, #23]
        break;
 800796c:	e035      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	75fb      	strb	r3, [r7, #23]
        break;
 8007972:	e032      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800797a:	2303      	movs	r3, #3
 800797c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800797e:	e02c      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d102      	bne.n	800798c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007986:	2303      	movs	r3, #3
 8007988:	75fb      	strb	r3, [r7, #23]
        break;
 800798a:	e026      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d102      	bne.n	8007998 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007992:	2303      	movs	r3, #3
 8007994:	75fb      	strb	r3, [r7, #23]
        break;
 8007996:	e020      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	75fb      	strb	r3, [r7, #23]
        break;
 800799c:	e01d      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80079a4:	2304      	movs	r3, #4
 80079a6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80079a8:	e017      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d102      	bne.n	80079b6 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80079b0:	2304      	movs	r3, #4
 80079b2:	75fb      	strb	r3, [r7, #23]
        break;
 80079b4:	e011      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d102      	bne.n	80079c2 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80079bc:	2304      	movs	r3, #4
 80079be:	75fb      	strb	r3, [r7, #23]
        break;
 80079c0:	e00b      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d102      	bne.n	80079ce <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80079c8:	2304      	movs	r3, #4
 80079ca:	75fb      	strb	r3, [r7, #23]
        break;
 80079cc:	e005      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	75fb      	strb	r3, [r7, #23]
        break;
 80079d2:	e002      	b.n	80079da <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	75fb      	strb	r3, [r7, #23]
        break;
 80079d8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80079da:	f107 0208 	add.w	r2, r7, #8
 80079de:	2301      	movs	r3, #1
 80079e0:	2111      	movs	r1, #17
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff fcc8 	bl	8007378 <lsm6dso_read_reg>
 80079e8:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	7a3b      	ldrb	r3, [r7, #8]
 80079f4:	f362 1307 	bfi	r3, r2, #4, #4
 80079f8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80079fa:	f107 0208 	add.w	r2, r7, #8
 80079fe:	2301      	movs	r3, #1
 8007a00:	2111      	movs	r1, #17
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fcd0 	bl	80073a8 <lsm6dso_write_reg>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]

  return ret;
 8007a10:	693b      	ldr	r3, [r7, #16]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007a26:	f107 0208 	add.w	r2, r7, #8
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	2111      	movs	r1, #17
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fca2 	bl	8007378 <lsm6dso_read_reg>
 8007a34:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007a36:	7a3b      	ldrb	r3, [r7, #8]
 8007a38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b0a      	cmp	r3, #10
 8007a40:	d844      	bhi.n	8007acc <lsm6dso_gy_data_rate_get+0xb0>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <lsm6dso_gy_data_rate_get+0x2c>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	08007a7d 	.word	0x08007a7d
 8007a50:	08007a85 	.word	0x08007a85
 8007a54:	08007a8d 	.word	0x08007a8d
 8007a58:	08007a95 	.word	0x08007a95
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007abd 	.word	0x08007abd
 8007a70:	08007ac5 	.word	0x08007ac5
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
      break;
 8007a7a:	e02b      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
      break;
 8007a82:	e027      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2202      	movs	r2, #2
 8007a88:	701a      	strb	r2, [r3, #0]
      break;
 8007a8a:	e023      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	701a      	strb	r2, [r3, #0]
      break;
 8007a92:	e01f      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2204      	movs	r2, #4
 8007a98:	701a      	strb	r2, [r3, #0]
      break;
 8007a9a:	e01b      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2205      	movs	r2, #5
 8007aa0:	701a      	strb	r2, [r3, #0]
      break;
 8007aa2:	e017      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2206      	movs	r2, #6
 8007aa8:	701a      	strb	r2, [r3, #0]
      break;
 8007aaa:	e013      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2207      	movs	r2, #7
 8007ab0:	701a      	strb	r2, [r3, #0]
      break;
 8007ab2:	e00f      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	701a      	strb	r2, [r3, #0]
      break;
 8007aba:	e00b      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2209      	movs	r2, #9
 8007ac0:	701a      	strb	r2, [r3, #0]
      break;
 8007ac2:	e007      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	220a      	movs	r2, #10
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	e003      	b.n	8007ad4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
      break;
 8007ad2:	bf00      	nop
  }

  return ret;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop

08007ae0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	2301      	movs	r3, #1
 8007af2:	2112      	movs	r1, #18
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fc3f 	bl	8007378 <lsm6dso_read_reg>
 8007afa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	7a3b      	ldrb	r3, [r7, #8]
 8007b0c:	f362 1386 	bfi	r3, r2, #6, #1
 8007b10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b12:	f107 0208 	add.w	r2, r7, #8
 8007b16:	2301      	movs	r3, #1
 8007b18:	2112      	movs	r1, #18
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fc44 	bl	80073a8 <lsm6dso_write_reg>
 8007b20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b22:	68fb      	ldr	r3, [r7, #12]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007b36:	f107 020c 	add.w	r2, r7, #12
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	2122      	movs	r1, #34	; 0x22
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fc1a 	bl	8007378 <lsm6dso_read_reg>
 8007b44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	b21a      	sxth	r2, r3
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	7b3b      	ldrb	r3, [r7, #12]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	b21a      	sxth	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007b68:	7bfa      	ldrb	r2, [r7, #15]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	b212      	sxth	r2, r2
 8007b70:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	3302      	adds	r3, #2
 8007b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4413      	add	r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	3302      	adds	r3, #2
 8007b8c:	b212      	sxth	r2, r2
 8007b8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007b90:	7c7a      	ldrb	r2, [r7, #17]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3304      	adds	r3, #4
 8007b96:	b212      	sxth	r2, r2
 8007b98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	7c3b      	ldrb	r3, [r7, #16]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	b212      	sxth	r2, r2
 8007bb6:	801a      	strh	r2, [r3, #0]

  return ret;
 8007bb8:	697b      	ldr	r3, [r7, #20]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007bcc:	f107 020c 	add.w	r2, r7, #12
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	2128      	movs	r1, #40	; 0x28
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff fbcf 	bl	8007378 <lsm6dso_read_reg>
 8007bda:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007bdc:	7b7b      	ldrb	r3, [r7, #13]
 8007bde:	b21a      	sxth	r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	7b3b      	ldrb	r3, [r7, #12]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	b21a      	sxth	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007bfe:	7bfa      	ldrb	r2, [r7, #15]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	3302      	adds	r3, #2
 8007c04:	b212      	sxth	r2, r2
 8007c06:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	3302      	adds	r3, #2
 8007c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	4413      	add	r3, r2
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	3302      	adds	r3, #2
 8007c22:	b212      	sxth	r2, r2
 8007c24:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007c26:	7c7a      	ldrb	r2, [r7, #17]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	b212      	sxth	r2, r2
 8007c2e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	3304      	adds	r3, #4
 8007c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	7c3b      	ldrb	r3, [r7, #16]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4413      	add	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	b212      	sxth	r2, r2
 8007c4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007c4e:	697b      	ldr	r3, [r7, #20]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007c64:	2300      	movs	r3, #0
 8007c66:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	7a3b      	ldrb	r3, [r7, #8]
 8007c72:	f362 1387 	bfi	r3, r2, #6, #2
 8007c76:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007c78:	f107 0208 	add.w	r2, r7, #8
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	2101      	movs	r1, #1
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fb91 	bl	80073a8 <lsm6dso_write_reg>
 8007c86:	60f8      	str	r0, [r7, #12]

  return ret;
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	210f      	movs	r1, #15
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fb68 	bl	8007378 <lsm6dso_read_reg>
 8007ca8:	60f8      	str	r0, [r7, #12]

  return ret;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007cc0:	f107 0208 	add.w	r2, r7, #8
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	2112      	movs	r1, #18
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fb55 	bl	8007378 <lsm6dso_read_reg>
 8007cce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10f      	bne.n	8007cf6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	7a3b      	ldrb	r3, [r7, #8]
 8007ce0:	f362 0382 	bfi	r3, r2, #2, #1
 8007ce4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007ce6:	f107 0208 	add.w	r2, r7, #8
 8007cea:	2301      	movs	r3, #1
 8007cec:	2112      	movs	r1, #18
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fb5a 	bl	80073a8 <lsm6dso_write_reg>
 8007cf4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007d0c:	f107 020c 	add.w	r2, r7, #12
 8007d10:	2301      	movs	r3, #1
 8007d12:	2118      	movs	r1, #24
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff fb2f 	bl	8007378 <lsm6dso_read_reg>
 8007d1a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	09db      	lsrs	r3, r3, #7
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	7b3b      	ldrb	r3, [r7, #12]
 8007d2a:	f362 0341 	bfi	r3, r2, #1, #1
 8007d2e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007d30:	f107 020c 	add.w	r2, r7, #12
 8007d34:	2301      	movs	r3, #1
 8007d36:	2118      	movs	r1, #24
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fb35 	bl	80073a8 <lsm6dso_write_reg>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	4413      	add	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <lsm6dso_i3c_disable_set+0x50>
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	e01b      	b.n	8007d88 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007d50:	f107 0210 	add.w	r2, r7, #16
 8007d54:	2301      	movs	r3, #1
 8007d56:	2162      	movs	r1, #98	; 0x62
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff fb0d 	bl	8007378 <lsm6dso_read_reg>
 8007d5e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	7c3b      	ldrb	r3, [r7, #16]
 8007d6a:	f362 03c4 	bfi	r3, r2, #3, #2
 8007d6e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007d70:	f107 0210 	add.w	r2, r7, #16
 8007d74:	2301      	movs	r3, #1
 8007d76:	2162      	movs	r1, #98	; 0x62
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fb15 	bl	80073a8 <lsm6dso_write_reg>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	4413      	add	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  return ret;
 8007d86:	697b      	ldr	r3, [r7, #20]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007d9c:	f107 0208 	add.w	r2, r7, #8
 8007da0:	2301      	movs	r3, #1
 8007da2:	210a      	movs	r1, #10
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff fae7 	bl	8007378 <lsm6dso_read_reg>
 8007daa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10f      	bne.n	8007dd2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	7a3b      	ldrb	r3, [r7, #8]
 8007dbc:	f362 0302 	bfi	r3, r2, #0, #3
 8007dc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007dc2:	f107 0208 	add.w	r2, r7, #8
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	210a      	movs	r1, #10
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff faec 	bl	80073a8 <lsm6dso_write_reg>
 8007dd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007de6:	2102      	movs	r1, #2
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff35 	bl	8007c58 <lsm6dso_mem_bank_set>
 8007dee:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007df0:	2302      	movs	r3, #2
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	2146      	movs	r1, #70	; 0x46
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff fabe 	bl	8007378 <lsm6dso_read_reg>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff ff26 	bl	8007c58 <lsm6dso_mem_bank_set>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  return ret;
 8007e14:	68fb      	ldr	r3, [r7, #12]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007e2a:	2102      	movs	r1, #2
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ff13 	bl	8007c58 <lsm6dso_mem_bank_set>
 8007e32:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <lsm6dso_fsm_data_rate_get+0x1e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	e03a      	b.n	8007eb4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007e3e:	f107 0208 	add.w	r2, r7, #8
 8007e42:	2301      	movs	r3, #1
 8007e44:	215f      	movs	r1, #95	; 0x5f
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fa96 	bl	8007378 <lsm6dso_read_reg>
 8007e4c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d125      	bne.n	8007ea0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007e54:	7a3b      	ldrb	r3, [r7, #8]
 8007e56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d81b      	bhi.n	8007e98 <lsm6dso_fsm_data_rate_get+0x78>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <lsm6dso_fsm_data_rate_get+0x48>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007e81 	.word	0x08007e81
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007e91 	.word	0x08007e91
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
      break;
 8007e7e:	e010      	b.n	8007ea2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
      break;
 8007e86:	e00c      	b.n	8007ea2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	701a      	strb	r2, [r3, #0]
      break;
 8007e8e:	e008      	b.n	8007ea2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2203      	movs	r2, #3
 8007e94:	701a      	strb	r2, [r3, #0]
      break;
 8007e96:	e004      	b.n	8007ea2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
      break;
 8007e9e:	e000      	b.n	8007ea2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007ea0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fed7 	bl	8007c58 <lsm6dso_mem_bank_set>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  return ret;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	e034      	b.n	8007f3e <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	7b1a      	ldrb	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	699a      	ldr	r2, [r3, #24]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a0e      	ldr	r2, [pc, #56]	; (8007f48 <STTS751_RegisterBusIO+0x8c>)
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <STTS751_RegisterBusIO+0x90>)
 8007f16:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	69da      	ldr	r2, [r3, #28]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d004      	beq.n	8007f38 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	e002      	b.n	8007f3e <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	080083e1 	.word	0x080083e1
 8007f4c:	0800844f 	.word	0x0800844f

08007f50 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d127      	bne.n	8007fb2 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3320      	adds	r3, #32
 8007f66:	2101      	movs	r1, #1
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fc54 	bl	8008816 <stts751_pin_event_route_set>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007f74:	f04f 33ff 	mov.w	r3, #4294967295
 8007f78:	e020      	b.n	8007fbc <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007f80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3320      	adds	r3, #32
 8007f86:	2103      	movs	r1, #3
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fbb7 	bl	80086fc <stts751_resolution_set>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295
 8007f98:	e010      	b.n	8007fbc <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3320      	adds	r3, #32
 8007f9e:	2180      	movs	r1, #128	; 0x80
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fad5 	bl	8008550 <stts751_temp_data_rate_set>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007fac:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb0:	e004      	b.n	8007fbc <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d108      	bne.n	8007fe8 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f877 	bl	80080ca <STTS751_TEMP_Disable>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	e004      	b.n	8007ff2 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3320      	adds	r3, #32
 8008008:	f107 020c 	add.w	r2, r7, #12
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fc27 	bl	8008862 <stts751_device_id_get>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	e003      	b.n	8008028 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8008020:	7b7a      	ldrb	r2, [r7, #13]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2200      	movs	r2, #0
 800803e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2200      	movs	r2, #0
 8008044:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2201      	movs	r2, #1
 800804a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2200      	movs	r2, #0
 8008050:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2200      	movs	r2, #0
 8008056:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008066:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e012      	b.n	80080c2 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80080a2:	eeb0 0a67 	vmov.f32	s0, s15
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f8b6 	bl	8008218 <STTS751_TEMP_SetOutputDataRate>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	e004      	b.n	80080c2 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e01c      	b.n	800811a <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3334      	adds	r3, #52	; 0x34
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f81c 	bl	8008124 <STTS751_TEMP_GetOutputDataRate>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	e010      	b.n	800811a <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3320      	adds	r3, #32
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fa26 	bl	8008550 <stts751_temp_data_rate_set>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800810a:	f04f 33ff 	mov.w	r3, #4294967295
 800810e:	e004      	b.n	800811a <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3320      	adds	r3, #32
 8008136:	f107 020b 	add.w	r2, r7, #11
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fa5d 	bl	80085fc <stts751_temp_data_rate_get>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	e060      	b.n	8008210 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	2b90      	cmp	r3, #144	; 0x90
 8008152:	d021      	beq.n	8008198 <STTS751_TEMP_GetOutputDataRate+0x74>
 8008154:	2b90      	cmp	r3, #144	; 0x90
 8008156:	dc56      	bgt.n	8008206 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008158:	2b09      	cmp	r3, #9
 800815a:	dc1b      	bgt.n	8008194 <STTS751_TEMP_GetOutputDataRate+0x70>
 800815c:	2b00      	cmp	r3, #0
 800815e:	db52      	blt.n	8008206 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008160:	2b09      	cmp	r3, #9
 8008162:	d850      	bhi.n	8008206 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008164:	a201      	add	r2, pc, #4	; (adr r2, 800816c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	080081a3 	.word	0x080081a3
 8008170:	080081ad 	.word	0x080081ad
 8008174:	080081b7 	.word	0x080081b7
 8008178:	080081c1 	.word	0x080081c1
 800817c:	080081cb 	.word	0x080081cb
 8008180:	080081d5 	.word	0x080081d5
 8008184:	080081df 	.word	0x080081df
 8008188:	080081e9 	.word	0x080081e9
 800818c:	080081f3 	.word	0x080081f3
 8008190:	080081fd 	.word	0x080081fd
 8008194:	2b80      	cmp	r3, #128	; 0x80
 8008196:	d136      	bne.n	8008206 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
      break;
 80081a0:	e035      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80081a8:	601a      	str	r2, [r3, #0]
      break;
 80081aa:	e030      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80081b2:	601a      	str	r2, [r3, #0]
      break;
 80081b4:	e02b      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80081bc:	601a      	str	r2, [r3, #0]
      break;
 80081be:	e026      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80081c6:	601a      	str	r2, [r3, #0]
      break;
 80081c8:	e021      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80081d0:	601a      	str	r2, [r3, #0]
      break;
 80081d2:	e01c      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80081da:	601a      	str	r2, [r3, #0]
      break;
 80081dc:	e017      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80081e4:	601a      	str	r2, [r3, #0]
      break;
 80081e6:	e012      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80081ee:	601a      	str	r2, [r3, #0]
      break;
 80081f0:	e00d      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80081f8:	601a      	str	r2, [r3, #0]
      break;
 80081fa:	e008      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008202:	601a      	str	r2, [r3, #0]
      break;
 8008204:	e003      	b.n	800820e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295
 800820a:	60fb      	str	r3, [r7, #12]
      break;
 800820c:	bf00      	nop
  }

  return ret;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3320      	adds	r3, #32
 8008228:	f107 020e 	add.w	r2, r7, #14
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fa8a 	bl	8008748 <stts751_resolution_get>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 800823a:	f04f 33ff 	mov.w	r3, #4294967295
 800823e:	e0a5      	b.n	800838c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8008240:	edd7 7a00 	vldr	s15, [r7]
 8008244:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008248:	eef4 7a47 	vcmp.f32	s15, s14
 800824c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008250:	d10e      	bne.n	8008270 <STTS751_TEMP_SetOutputDataRate+0x58>
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b03      	cmp	r3, #3
 8008256:	d10b      	bne.n	8008270 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3320      	adds	r3, #32
 800825c:	2101      	movs	r1, #1
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fa4c 	bl	80086fc <stts751_resolution_set>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	e08d      	b.n	800838c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008270:	edd7 7a00 	vldr	s15, [r7]
 8008274:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008394 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8008278:	eef4 7a47 	vcmp.f32	s15, s14
 800827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008280:	d111      	bne.n	80082a6 <STTS751_TEMP_SetOutputDataRate+0x8e>
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d002      	beq.n	800828e <STTS751_TEMP_SetOutputDataRate+0x76>
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d10b      	bne.n	80082a6 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3320      	adds	r3, #32
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fa31 	bl	80086fc <stts751_resolution_set>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 80082a0:	f04f 33ff 	mov.w	r3, #4294967295
 80082a4:	e072      	b.n	800838c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80082a6:	edd7 7a00 	vldr	s15, [r7]
 80082aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008398 <STTS751_TEMP_SetOutputDataRate+0x180>
 80082ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b6:	d801      	bhi.n	80082bc <STTS751_TEMP_SetOutputDataRate+0xa4>
 80082b8:	2300      	movs	r3, #0
 80082ba:	e058      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 80082bc:	edd7 7a00 	vldr	s15, [r7]
 80082c0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80082c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082cc:	d801      	bhi.n	80082d2 <STTS751_TEMP_SetOutputDataRate+0xba>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e04d      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 80082d2:	edd7 7a00 	vldr	s15, [r7]
 80082d6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80082da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	d801      	bhi.n	80082e8 <STTS751_TEMP_SetOutputDataRate+0xd0>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e042      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 80082e8:	edd7 7a00 	vldr	s15, [r7]
 80082ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80082f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f8:	d801      	bhi.n	80082fe <STTS751_TEMP_SetOutputDataRate+0xe6>
 80082fa:	2303      	movs	r3, #3
 80082fc:	e037      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 80082fe:	edd7 7a00 	vldr	s15, [r7]
 8008302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d801      	bhi.n	8008314 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8008310:	2304      	movs	r3, #4
 8008312:	e02c      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 8008314:	edd7 7a00 	vldr	s15, [r7]
 8008318:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800831c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	d801      	bhi.n	800832a <STTS751_TEMP_SetOutputDataRate+0x112>
 8008326:	2305      	movs	r3, #5
 8008328:	e021      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 800832a:	edd7 7a00 	vldr	s15, [r7]
 800832e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833a:	d801      	bhi.n	8008340 <STTS751_TEMP_SetOutputDataRate+0x128>
 800833c:	2306      	movs	r3, #6
 800833e:	e016      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 8008340:	edd7 7a00 	vldr	s15, [r7]
 8008344:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008350:	d801      	bhi.n	8008356 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008352:	2307      	movs	r3, #7
 8008354:	e00b      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 8008356:	edd7 7a00 	vldr	s15, [r7]
 800835a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800835e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008366:	d801      	bhi.n	800836c <STTS751_TEMP_SetOutputDataRate+0x154>
 8008368:	2308      	movs	r3, #8
 800836a:	e000      	b.n	800836e <STTS751_TEMP_SetOutputDataRate+0x156>
 800836c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800836e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3320      	adds	r3, #32
 8008374:	7bfa      	ldrb	r2, [r7, #15]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f8e9 	bl	8008550 <stts751_temp_data_rate_set>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8008384:	f04f 33ff 	mov.w	r3, #4294967295
 8008388:	e000      	b.n	800838c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	42000000 	.word	0x42000000
 8008398:	3d800000 	.word	0x3d800000

0800839c <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3320      	adds	r3, #32
 80083aa:	f107 020e 	add.w	r2, r7, #14
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fa01 	bl	80087b8 <stts751_temperature_raw_get>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	e00a      	b.n	80083d8 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80083c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f8a8 	bl	800851c <stts751_from_lsb_to_celsius>
 80083cc:	eef0 7a40 	vmov.f32	s15, s0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80083e0:	b590      	push	{r4, r7, lr}
 80083e2:	b089      	sub	sp, #36	; 0x24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	461a      	mov	r2, r3
 80083ec:	460b      	mov	r3, r1
 80083ee:	72fb      	strb	r3, [r7, #11]
 80083f0:	4613      	mov	r3, r2
 80083f2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11f      	bne.n	8008444 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008404:	2300      	movs	r3, #0
 8008406:	83fb      	strh	r3, [r7, #30]
 8008408:	e018      	b.n	800843c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	695c      	ldr	r4, [r3, #20]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	7b1b      	ldrb	r3, [r3, #12]
 8008412:	b298      	uxth	r0, r3
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	b29a      	uxth	r2, r3
 8008418:	8bfb      	ldrh	r3, [r7, #30]
 800841a:	4413      	add	r3, r2
 800841c:	b299      	uxth	r1, r3
 800841e:	8bfb      	ldrh	r3, [r7, #30]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	441a      	add	r2, r3
 8008424:	2301      	movs	r3, #1
 8008426:	47a0      	blx	r4
 8008428:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008430:	f04f 33ff 	mov.w	r3, #4294967295
 8008434:	e007      	b.n	8008446 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008436:	8bfb      	ldrh	r3, [r7, #30]
 8008438:	3301      	adds	r3, #1
 800843a:	83fb      	strh	r3, [r7, #30]
 800843c:	8bfa      	ldrh	r2, [r7, #30]
 800843e:	893b      	ldrh	r3, [r7, #8]
 8008440:	429a      	cmp	r2, r3
 8008442:	d3e2      	bcc.n	800840a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008444:	69bb      	ldr	r3, [r7, #24]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3724      	adds	r7, #36	; 0x24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd90      	pop	{r4, r7, pc}

0800844e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800844e:	b590      	push	{r4, r7, lr}
 8008450:	b089      	sub	sp, #36	; 0x24
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	461a      	mov	r2, r3
 800845a:	460b      	mov	r3, r1
 800845c:	72fb      	strb	r3, [r7, #11]
 800845e:	4613      	mov	r3, r2
 8008460:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d11f      	bne.n	80084b2 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008472:	2300      	movs	r3, #0
 8008474:	83fb      	strh	r3, [r7, #30]
 8008476:	e018      	b.n	80084aa <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	691c      	ldr	r4, [r3, #16]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	7b1b      	ldrb	r3, [r3, #12]
 8008480:	b298      	uxth	r0, r3
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	b29a      	uxth	r2, r3
 8008486:	8bfb      	ldrh	r3, [r7, #30]
 8008488:	4413      	add	r3, r2
 800848a:	b299      	uxth	r1, r3
 800848c:	8bfb      	ldrh	r3, [r7, #30]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	441a      	add	r2, r3
 8008492:	2301      	movs	r3, #1
 8008494:	47a0      	blx	r4
 8008496:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 800849e:	f04f 33ff 	mov.w	r3, #4294967295
 80084a2:	e007      	b.n	80084b4 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80084a4:	8bfb      	ldrh	r3, [r7, #30]
 80084a6:	3301      	adds	r3, #1
 80084a8:	83fb      	strh	r3, [r7, #30]
 80084aa:	8bfa      	ldrh	r2, [r7, #30]
 80084ac:	893b      	ldrh	r3, [r7, #8]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d3e2      	bcc.n	8008478 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80084b2:	69bb      	ldr	r3, [r7, #24]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3724      	adds	r7, #36	; 0x24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd90      	pop	{r4, r7, pc}

080084bc <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	461a      	mov	r2, r3
 80084c8:	460b      	mov	r3, r1
 80084ca:	72fb      	strb	r3, [r7, #11]
 80084cc:	4613      	mov	r3, r2
 80084ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685c      	ldr	r4, [r3, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	68d8      	ldr	r0, [r3, #12]
 80084d8:	893b      	ldrh	r3, [r7, #8]
 80084da:	7af9      	ldrb	r1, [r7, #11]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	47a0      	blx	r4
 80084e0:	6178      	str	r0, [r7, #20]

  return ret;
 80084e2:	697b      	ldr	r3, [r7, #20]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd90      	pop	{r4, r7, pc}

080084ec <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	461a      	mov	r2, r3
 80084f8:	460b      	mov	r3, r1
 80084fa:	72fb      	strb	r3, [r7, #11]
 80084fc:	4613      	mov	r3, r2
 80084fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681c      	ldr	r4, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68d8      	ldr	r0, [r3, #12]
 8008508:	893b      	ldrh	r3, [r7, #8]
 800850a:	7af9      	ldrb	r1, [r7, #11]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	47a0      	blx	r4
 8008510:	6178      	str	r0, [r7, #20]

  return ret;
 8008512:	697b      	ldr	r3, [r7, #20]
}
 8008514:	4618      	mov	r0, r3
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	bd90      	pop	{r4, r7, pc}

0800851c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008532:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800854c <stts751_from_lsb_to_celsius+0x30>
 8008536:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800853a:	eef0 7a66 	vmov.f32	s15, s13
}
 800853e:	eeb0 0a67 	vmov.f32	s0, s15
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	43800000 	.word	0x43800000

08008550 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800855c:	23aa      	movs	r3, #170	; 0xaa
 800855e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008560:	f107 020c 	add.w	r2, r7, #12
 8008564:	2301      	movs	r3, #1
 8008566:	2104      	movs	r1, #4
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ffa7 	bl	80084bc <stts751_read_reg>
 800856e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10f      	bne.n	8008596 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	f003 030f 	and.w	r3, r3, #15
 800857c:	b2da      	uxtb	r2, r3
 800857e:	7b3b      	ldrb	r3, [r7, #12]
 8008580:	f362 0303 	bfi	r3, r2, #0, #4
 8008584:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008586:	f107 020c 	add.w	r2, r7, #12
 800858a:	2301      	movs	r3, #1
 800858c:	2104      	movs	r1, #4
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff ffac 	bl	80084ec <stts751_write_reg>
 8008594:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d107      	bne.n	80085ac <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800859c:	f107 0210 	add.w	r2, r7, #16
 80085a0:	2301      	movs	r3, #1
 80085a2:	2103      	movs	r1, #3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff ff89 	bl	80084bc <stts751_read_reg>
 80085aa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d111      	bne.n	80085d6 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	09db      	lsrs	r3, r3, #7
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	7c3b      	ldrb	r3, [r7, #16]
 80085c0:	f362 1386 	bfi	r3, r2, #6, #1
 80085c4:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80085c6:	f107 0210 	add.w	r2, r7, #16
 80085ca:	2301      	movs	r3, #1
 80085cc:	2103      	movs	r1, #3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff ff8c 	bl	80084ec <stts751_write_reg>
 80085d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <stts751_temp_data_rate_set+0xa2>
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	2b90      	cmp	r3, #144	; 0x90
 80085e0:	d107      	bne.n	80085f2 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80085e2:	f107 020b 	add.w	r2, r7, #11
 80085e6:	2301      	movs	r3, #1
 80085e8:	210f      	movs	r1, #15
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ff7e 	bl	80084ec <stts751_write_reg>
 80085f0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008606:	f107 0210 	add.w	r2, r7, #16
 800860a:	2301      	movs	r3, #1
 800860c:	2104      	movs	r1, #4
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff ff54 	bl	80084bc <stts751_read_reg>
 8008614:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d107      	bne.n	800862c <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800861c:	f107 020c 	add.w	r2, r7, #12
 8008620:	2301      	movs	r3, #1
 8008622:	2103      	movs	r1, #3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff ff49 	bl	80084bc <stts751_read_reg>
 800862a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800862c:	7b3b      	ldrb	r3, [r7, #12]
 800862e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008632:	b2db      	uxtb	r3, r3
 8008634:	01db      	lsls	r3, r3, #7
 8008636:	7c3a      	ldrb	r2, [r7, #16]
 8008638:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	4413      	add	r3, r2
 8008640:	2b90      	cmp	r3, #144	; 0x90
 8008642:	d025      	beq.n	8008690 <stts751_temp_data_rate_get+0x94>
 8008644:	2b90      	cmp	r3, #144	; 0x90
 8008646:	dc4f      	bgt.n	80086e8 <stts751_temp_data_rate_get+0xec>
 8008648:	2b09      	cmp	r3, #9
 800864a:	dc1b      	bgt.n	8008684 <stts751_temp_data_rate_get+0x88>
 800864c:	2b00      	cmp	r3, #0
 800864e:	db4b      	blt.n	80086e8 <stts751_temp_data_rate_get+0xec>
 8008650:	2b09      	cmp	r3, #9
 8008652:	d849      	bhi.n	80086e8 <stts751_temp_data_rate_get+0xec>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <stts751_temp_data_rate_get+0x60>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008699 	.word	0x08008699
 8008660:	080086a1 	.word	0x080086a1
 8008664:	080086a9 	.word	0x080086a9
 8008668:	080086b1 	.word	0x080086b1
 800866c:	080086b9 	.word	0x080086b9
 8008670:	080086c1 	.word	0x080086c1
 8008674:	080086c9 	.word	0x080086c9
 8008678:	080086d1 	.word	0x080086d1
 800867c:	080086d9 	.word	0x080086d9
 8008680:	080086e1 	.word	0x080086e1
 8008684:	2b80      	cmp	r3, #128	; 0x80
 8008686:	d12f      	bne.n	80086e8 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2280      	movs	r2, #128	; 0x80
 800868c:	701a      	strb	r2, [r3, #0]
      break;
 800868e:	e02f      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2290      	movs	r2, #144	; 0x90
 8008694:	701a      	strb	r2, [r3, #0]
      break;
 8008696:	e02b      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
      break;
 800869e:	e027      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2201      	movs	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
      break;
 80086a6:	e023      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
      break;
 80086ae:	e01f      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2203      	movs	r2, #3
 80086b4:	701a      	strb	r2, [r3, #0]
      break;
 80086b6:	e01b      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2204      	movs	r2, #4
 80086bc:	701a      	strb	r2, [r3, #0]
      break;
 80086be:	e017      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2205      	movs	r2, #5
 80086c4:	701a      	strb	r2, [r3, #0]
      break;
 80086c6:	e013      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2206      	movs	r2, #6
 80086cc:	701a      	strb	r2, [r3, #0]
      break;
 80086ce:	e00f      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2207      	movs	r2, #7
 80086d4:	701a      	strb	r2, [r3, #0]
      break;
 80086d6:	e00b      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2208      	movs	r2, #8
 80086dc:	701a      	strb	r2, [r3, #0]
      break;
 80086de:	e007      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2209      	movs	r2, #9
 80086e4:	701a      	strb	r2, [r3, #0]
      break;
 80086e6:	e003      	b.n	80086f0 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2280      	movs	r2, #128	; 0x80
 80086ec:	701a      	strb	r2, [r3, #0]
      break;
 80086ee:	bf00      	nop
  }

  return ret;
 80086f0:	697b      	ldr	r3, [r7, #20]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop

080086fc <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008708:	f107 0208 	add.w	r2, r7, #8
 800870c:	2301      	movs	r3, #1
 800870e:	2103      	movs	r1, #3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff fed3 	bl	80084bc <stts751_read_reg>
 8008716:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	b2da      	uxtb	r2, r3
 8008726:	7a3b      	ldrb	r3, [r7, #8]
 8008728:	f362 0383 	bfi	r3, r2, #2, #2
 800872c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800872e:	f107 0208 	add.w	r2, r7, #8
 8008732:	2301      	movs	r3, #1
 8008734:	2103      	movs	r1, #3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fed8 	bl	80084ec <stts751_write_reg>
 800873c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800873e:	68fb      	ldr	r3, [r7, #12]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008752:	f107 0208 	add.w	r2, r7, #8
 8008756:	2301      	movs	r3, #1
 8008758:	2103      	movs	r1, #3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff feae 	bl	80084bc <stts751_read_reg>
 8008760:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8008762:	7a3b      	ldrb	r3, [r7, #8]
 8008764:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b03      	cmp	r3, #3
 800876c:	d81a      	bhi.n	80087a4 <stts751_resolution_get+0x5c>
 800876e:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <stts751_resolution_get+0x2c>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	0800878d 	.word	0x0800878d
 8008778:	08008795 	.word	0x08008795
 800877c:	08008785 	.word	0x08008785
 8008780:	0800879d 	.word	0x0800879d
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2202      	movs	r2, #2
 8008788:	701a      	strb	r2, [r3, #0]
      break;
 800878a:	e00f      	b.n	80087ac <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
      break;
 8008792:	e00b      	b.n	80087ac <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2201      	movs	r2, #1
 8008798:	701a      	strb	r2, [r3, #0]
      break;
 800879a:	e007      	b.n	80087ac <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2203      	movs	r2, #3
 80087a0:	701a      	strb	r2, [r3, #0]
      break;
 80087a2:	e003      	b.n	80087ac <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2202      	movs	r2, #2
 80087a8:	701a      	strb	r2, [r3, #0]
      break;
 80087aa:	bf00      	nop
  }

  return ret;
 80087ac:	68fb      	ldr	r3, [r7, #12]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	2301      	movs	r3, #1
 80087ca:	2100      	movs	r1, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fe75 	bl	80084bc <stts751_read_reg>
 80087d2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d118      	bne.n	800880c <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80087da:	f107 0208 	add.w	r2, r7, #8
 80087de:	2301      	movs	r3, #1
 80087e0:	2102      	movs	r1, #2
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fe6a 	bl	80084bc <stts751_read_reg>
 80087e8:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80087ea:	7a7b      	ldrb	r3, [r7, #9]
 80087ec:	b21a      	sxth	r2, r3
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	7a3b      	ldrb	r3, [r7, #8]
 8008800:	b29b      	uxth	r3, r3
 8008802:	4413      	add	r3, r2
 8008804:	b29b      	uxth	r3, r3
 8008806:	b21a      	sxth	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800880c:	68fb      	ldr	r3, [r7, #12]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008822:	f107 0208 	add.w	r2, r7, #8
 8008826:	2301      	movs	r3, #1
 8008828:	2103      	movs	r1, #3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff fe46 	bl	80084bc <stts751_read_reg>
 8008830:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10f      	bne.n	8008858 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	b2da      	uxtb	r2, r3
 8008840:	7a3b      	ldrb	r3, [r7, #8]
 8008842:	f362 13c7 	bfi	r3, r2, #7, #1
 8008846:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008848:	f107 0208 	add.w	r2, r7, #8
 800884c:	2301      	movs	r3, #1
 800884e:	2103      	movs	r1, #3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fe4b 	bl	80084ec <stts751_write_reg>
 8008856:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008858:	68fb      	ldr	r3, [r7, #12]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	2301      	movs	r3, #1
 8008870:	21fd      	movs	r1, #253	; 0xfd
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe22 	bl	80084bc <stts751_read_reg>
 8008878:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d107      	bne.n	8008890 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	2301      	movs	r3, #1
 8008886:	21fe      	movs	r1, #254	; 0xfe
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fe17 	bl	80084bc <stts751_read_reg>
 800888e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d107      	bne.n	80088a6 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	1c9a      	adds	r2, r3, #2
 800889a:	2301      	movs	r3, #1
 800889c:	21ff      	movs	r1, #255	; 0xff
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fe0c 	bl	80084bc <stts751_read_reg>
 80088a4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 80088a6:	68fb      	ldr	r3, [r7, #12]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08c      	sub	sp, #48	; 0x30
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 80088be:	2301      	movs	r3, #1
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d07c      	beq.n	80089c6 <IKS01A3_ENV_SENSOR_Init+0x116>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	f200 80b2 	bhi.w	8008a38 <IKS01A3_ENV_SENSOR_Init+0x188>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <IKS01A3_ENV_SENSOR_Init+0x32>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d039      	beq.n	8008954 <IKS01A3_ENV_SENSOR_Init+0xa4>
 80088e0:	e0aa      	b.n	8008a38 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80088e2:	6838      	ldr	r0, [r7, #0]
 80088e4:	f000 f95e 	bl	8008ba4 <HTS221_0_Probe>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	e0df      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80088f4:	4a71      	ldr	r2, [pc, #452]	; (8008abc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	4970      	ldr	r1, [pc, #448]	; (8008ac0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008906:	f107 0108 	add.w	r1, r7, #8
 800890a:	4610      	mov	r0, r2
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008914:	f06f 0306 	mvn.w	r3, #6
 8008918:	e0cc      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800891a:	7a3b      	ldrb	r3, [r7, #8]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d103      	bne.n	8008928 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8008928:	7abb      	ldrb	r3, [r7, #10]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d103      	bne.n	8008936 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f043 0304 	orr.w	r3, r3, #4
 8008934:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8008936:	7a7b      	ldrb	r3, [r7, #9]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d103      	bne.n	8008944 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	f043 0302 	orr.w	r3, r3, #2
 8008942:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d17a      	bne.n	8008a40 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	f043 0308 	orr.w	r3, r3, #8
 8008950:	623b      	str	r3, [r7, #32]
      }
      break;
 8008952:	e075      	b.n	8008a40 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008954:	6838      	ldr	r0, [r7, #0]
 8008956:	f000 f9ef 	bl	8008d38 <LPS22HH_0_Probe>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8008960:	f04f 33ff 	mov.w	r3, #4294967295
 8008964:	e0a6      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008966:	4a55      	ldr	r2, [pc, #340]	; (8008abc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	4953      	ldr	r1, [pc, #332]	; (8008ac0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008978:	f107 0108 	add.w	r1, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008986:	f06f 0306 	mvn.w	r3, #6
 800898a:	e093      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800898c:	7a3b      	ldrb	r3, [r7, #8]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d103      	bne.n	800899a <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800899a:	7abb      	ldrb	r3, [r7, #10]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d103      	bne.n	80089a8 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	f043 0304 	orr.w	r3, r3, #4
 80089a6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80089a8:	7a7b      	ldrb	r3, [r7, #9]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d103      	bne.n	80089b6 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	f043 0302 	orr.w	r3, r3, #2
 80089b4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d143      	bne.n	8008a44 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	f043 0308 	orr.w	r3, r3, #8
 80089c2:	623b      	str	r3, [r7, #32]
      }
      break;
 80089c4:	e03e      	b.n	8008a44 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 80089c6:	6838      	ldr	r0, [r7, #0]
 80089c8:	f000 fa82 	bl	8008ed0 <STTS751_0_Probe>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 80089d2:	f04f 33ff 	mov.w	r3, #4294967295
 80089d6:	e06d      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80089d8:	4a38      	ldr	r2, [pc, #224]	; (8008abc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	4937      	ldr	r1, [pc, #220]	; (8008ac0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80089ea:	f107 0108 	add.w	r1, r7, #8
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80089f8:	f06f 0306 	mvn.w	r3, #6
 80089fc:	e05a      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80089fe:	7a3b      	ldrb	r3, [r7, #8]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d103      	bne.n	8008a0c <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8008a0c:	7abb      	ldrb	r3, [r7, #10]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d103      	bne.n	8008a1a <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	f043 0304 	orr.w	r3, r3, #4
 8008a18:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8008a1a:	7a7b      	ldrb	r3, [r7, #9]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d103      	bne.n	8008a28 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	f043 0302 	orr.w	r3, r3, #2
 8008a26:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8008a28:	7afb      	ldrb	r3, [r7, #11]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d10c      	bne.n	8008a48 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	f043 0308 	orr.w	r3, r3, #8
 8008a34:	623b      	str	r3, [r7, #32]
      }
      break;
 8008a36:	e007      	b.n	8008a48 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008a38:	f06f 0301 	mvn.w	r3, #1
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008a3e:	e004      	b.n	8008a4a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8008a40:	bf00      	nop
 8008a42:	e002      	b.n	8008a4a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8008a44:	bf00      	nop
 8008a46:	e000      	b.n	8008a4a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8008a48:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	e02f      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008a54:	2300      	movs	r3, #0
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
 8008a58:	e028      	b.n	8008aac <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	4013      	ands	r3, r2
 8008a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d11c      	bne.n	8008aa0 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8008a66:	6a3a      	ldr	r2, [r7, #32]
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d116      	bne.n	8008aa0 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008a72:	4a14      	ldr	r2, [pc, #80]	; (8008ac4 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7a:	4913      	ldr	r1, [pc, #76]	; (8008ac8 <IKS01A3_ENV_SENSOR_Init+0x218>)
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	0092      	lsls	r2, r2, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	490d      	ldr	r1, [pc, #52]	; (8008ac0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008a90:	4610      	mov	r0, r2
 8008a92:	4798      	blx	r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008a9a:	f06f 0304 	mvn.w	r3, #4
 8008a9e:	e009      	b.n	8008ab4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d9d3      	bls.n	8008a5a <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3730      	adds	r7, #48	; 0x30
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20000660 	.word	0x20000660
 8008ac0:	20000624 	.word	0x20000624
 8008ac4:	20000154 	.word	0x20000154
 8008ac8:	20000630 	.word	0x20000630

08008acc <IKS01A3_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d903      	bls.n	8008ae4 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008adc:	f06f 0301 	mvn.w	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	e014      	b.n	8008b0e <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008ae4:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	490b      	ldr	r1, [pc, #44]	; (8008b1c <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b02:	f06f 0306 	mvn.w	r3, #6
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	e001      	b.n	8008b0e <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000660 	.word	0x20000660
 8008b1c:	20000624 	.word	0x20000624

08008b20 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d903      	bls.n	8008b3a <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008b32:	f06f 0301 	mvn.w	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e027      	b.n	8008b8a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008b3a:	4a16      	ldr	r2, [pc, #88]	; (8008b94 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4013      	ands	r3, r2
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d11b      	bne.n	8008b84 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008b4c:	4a12      	ldr	r2, [pc, #72]	; (8008b98 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b54:	4911      	ldr	r1, [pc, #68]	; (8008b9c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	0092      	lsls	r2, r2, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	490f      	ldr	r1, [pc, #60]	; (8008ba0 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b76:	f06f 0304 	mvn.w	r3, #4
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e005      	b.n	8008b8a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e002      	b.n	8008b8a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008b84:	f06f 0301 	mvn.w	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008b8a:	697b      	ldr	r3, [r7, #20]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	2000066c 	.word	0x2000066c
 8008b98:	20000154 	.word	0x20000154
 8008b9c:	20000630 	.word	0x20000630
 8008ba0:	20000624 	.word	0x20000624

08008ba4 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b092      	sub	sp, #72	; 0x48
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8008bb4:	23bf      	movs	r3, #191	; 0xbf
 8008bb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008bba:	4b51      	ldr	r3, [pc, #324]	; (8008d00 <HTS221_0_Probe+0x15c>)
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008bbe:	4b51      	ldr	r3, [pc, #324]	; (8008d04 <HTS221_0_Probe+0x160>)
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008bc2:	4b51      	ldr	r3, [pc, #324]	; (8008d08 <HTS221_0_Probe+0x164>)
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008bc6:	4b51      	ldr	r3, [pc, #324]	; (8008d0c <HTS221_0_Probe+0x168>)
 8008bc8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008bca:	4b51      	ldr	r3, [pc, #324]	; (8008d10 <HTS221_0_Probe+0x16c>)
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8008bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	484f      	ldr	r0, [pc, #316]	; (8008d14 <HTS221_0_Probe+0x170>)
 8008bd6:	f7f9 fa6d 	bl	80020b4 <HTS221_RegisterBusIO>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008be0:	f06f 0306 	mvn.w	r3, #6
 8008be4:	647b      	str	r3, [r7, #68]	; 0x44
 8008be6:	e085      	b.n	8008cf4 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8008be8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008bec:	4619      	mov	r1, r3
 8008bee:	4849      	ldr	r0, [pc, #292]	; (8008d14 <HTS221_0_Probe+0x170>)
 8008bf0:	f7f9 fae9 	bl	80021c6 <HTS221_ReadID>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008bfa:	f06f 0306 	mvn.w	r3, #6
 8008bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008c00:	e078      	b.n	8008cf4 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8008c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c06:	2bbc      	cmp	r3, #188	; 0xbc
 8008c08:	d003      	beq.n	8008c12 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c0a:	f06f 0306 	mvn.w	r3, #6
 8008c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c10:	e070      	b.n	8008cf4 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8008c12:	f107 0308 	add.w	r3, r7, #8
 8008c16:	4619      	mov	r1, r3
 8008c18:	483e      	ldr	r0, [pc, #248]	; (8008d14 <HTS221_0_Probe+0x170>)
 8008c1a:	f7f9 faeb 	bl	80021f4 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8008c1e:	7a3b      	ldrb	r3, [r7, #8]
 8008c20:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8008c22:	7a7b      	ldrb	r3, [r7, #9]
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8008c28:	7abb      	ldrb	r3, [r7, #10]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8008c34:	4a38      	ldr	r2, [pc, #224]	; (8008d18 <HTS221_0_Probe+0x174>)
 8008c36:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8008c38:	4b38      	ldr	r3, [pc, #224]	; (8008d1c <HTS221_0_Probe+0x178>)
 8008c3a:	4a36      	ldr	r2, [pc, #216]	; (8008d14 <HTS221_0_Probe+0x170>)
 8008c3c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8008c3e:	4b38      	ldr	r3, [pc, #224]	; (8008d20 <HTS221_0_Probe+0x17c>)
 8008c40:	4a38      	ldr	r2, [pc, #224]	; (8008d24 <HTS221_0_Probe+0x180>)
 8008c42:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d11d      	bne.n	8008c86 <HTS221_0_Probe+0xe2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d018      	beq.n	8008c86 <HTS221_0_Probe+0xe2>
 8008c54:	7a3b      	ldrb	r3, [r7, #8]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d115      	bne.n	8008c86 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8008c5a:	4b33      	ldr	r3, [pc, #204]	; (8008d28 <HTS221_0_Probe+0x184>)
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	4a33      	ldr	r2, [pc, #204]	; (8008d2c <HTS221_0_Probe+0x188>)
 8008c60:	4933      	ldr	r1, [pc, #204]	; (8008d30 <HTS221_0_Probe+0x18c>)
 8008c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008c66:	4b2e      	ldr	r3, [pc, #184]	; (8008d20 <HTS221_0_Probe+0x17c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a2b      	ldr	r2, [pc, #172]	; (8008d1c <HTS221_0_Probe+0x178>)
 8008c6e:	6812      	ldr	r2, [r2, #0]
 8008c70:	4610      	mov	r0, r2
 8008c72:	4798      	blx	r3
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c7a:	f06f 0304 	mvn.w	r3, #4
 8008c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c80:	e001      	b.n	8008c86 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c82:	2300      	movs	r3, #0
 8008c84:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d11d      	bne.n	8008cc8 <HTS221_0_Probe+0x124>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d018      	beq.n	8008cc8 <HTS221_0_Probe+0x124>
 8008c96:	7abb      	ldrb	r3, [r7, #10]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d115      	bne.n	8008cc8 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008c9c:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <HTS221_0_Probe+0x184>)
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	4a22      	ldr	r2, [pc, #136]	; (8008d2c <HTS221_0_Probe+0x188>)
 8008ca2:	4924      	ldr	r1, [pc, #144]	; (8008d34 <HTS221_0_Probe+0x190>)
 8008ca4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008ca8:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <HTS221_0_Probe+0x17c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <HTS221_0_Probe+0x178>)
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4798      	blx	r3
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cbc:	f06f 0304 	mvn.w	r3, #4
 8008cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cc2:	e001      	b.n	8008cc8 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d107      	bne.n	8008cde <HTS221_0_Probe+0x13a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cd8:	f06f 0304 	mvn.w	r3, #4
 8008cdc:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d107      	bne.n	8008cf4 <HTS221_0_Probe+0x150>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cee:	f06f 0304 	mvn.w	r3, #4
 8008cf2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8008cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3748      	adds	r7, #72	; 0x48
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	08001c05 	.word	0x08001c05
 8008d04:	08001c81 	.word	0x08001c81
 8008d08:	08001d35 	.word	0x08001d35
 8008d0c:	08001cd1 	.word	0x08001cd1
 8008d10:	08001d99 	.word	0x08001d99
 8008d14:	20000678 	.word	0x20000678
 8008d18:	2000066c 	.word	0x2000066c
 8008d1c:	20000624 	.word	0x20000624
 8008d20:	20000660 	.word	0x20000660
 8008d24:	20000000 	.word	0x20000000
 8008d28:	20000154 	.word	0x20000154
 8008d2c:	20000630 	.word	0x20000630
 8008d30:	20000024 	.word	0x20000024
 8008d34:	20000010 	.word	0x20000010

08008d38 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b092      	sub	sp, #72	; 0x48
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8008d44:	2300      	movs	r3, #0
 8008d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8008d48:	23bb      	movs	r3, #187	; 0xbb
 8008d4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008d4e:	4b52      	ldr	r3, [pc, #328]	; (8008e98 <LPS22HH_0_Probe+0x160>)
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008d52:	4b52      	ldr	r3, [pc, #328]	; (8008e9c <LPS22HH_0_Probe+0x164>)
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008d56:	4b52      	ldr	r3, [pc, #328]	; (8008ea0 <LPS22HH_0_Probe+0x168>)
 8008d58:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008d5a:	4b52      	ldr	r3, [pc, #328]	; (8008ea4 <LPS22HH_0_Probe+0x16c>)
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008d5e:	4b52      	ldr	r3, [pc, #328]	; (8008ea8 <LPS22HH_0_Probe+0x170>)
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8008d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d66:	4619      	mov	r1, r3
 8008d68:	4850      	ldr	r0, [pc, #320]	; (8008eac <LPS22HH_0_Probe+0x174>)
 8008d6a:	f7fc fa61 	bl	8005230 <LPS22HH_RegisterBusIO>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d74:	f06f 0306 	mvn.w	r3, #6
 8008d78:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7a:	e087      	b.n	8008e8c <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008d7c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008d80:	4619      	mov	r1, r3
 8008d82:	484a      	ldr	r0, [pc, #296]	; (8008eac <LPS22HH_0_Probe+0x174>)
 8008d84:	f7fc fafd 	bl	8005382 <LPS22HH_ReadID>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d8e:	f06f 0306 	mvn.w	r3, #6
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
 8008d94:	e07a      	b.n	8008e8c <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8008d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d9a:	2bb3      	cmp	r3, #179	; 0xb3
 8008d9c:	d003      	beq.n	8008da6 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d9e:	f06f 0306 	mvn.w	r3, #6
 8008da2:	647b      	str	r3, [r7, #68]	; 0x44
 8008da4:	e072      	b.n	8008e8c <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	4619      	mov	r1, r3
 8008dac:	483f      	ldr	r0, [pc, #252]	; (8008eac <LPS22HH_0_Probe+0x174>)
 8008dae:	f7fc faff 	bl	80053b0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008db2:	7a3b      	ldrb	r3, [r7, #8]
 8008db4:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8008db6:	7a7b      	ldrb	r3, [r7, #9]
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8008dbc:	7abb      	ldrb	r3, [r7, #10]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8008dc2:	7afb      	ldrb	r3, [r7, #11]
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008dc8:	4a39      	ldr	r2, [pc, #228]	; (8008eb0 <LPS22HH_0_Probe+0x178>)
 8008dca:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008dcc:	4b39      	ldr	r3, [pc, #228]	; (8008eb4 <LPS22HH_0_Probe+0x17c>)
 8008dce:	4a37      	ldr	r2, [pc, #220]	; (8008eac <LPS22HH_0_Probe+0x174>)
 8008dd0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008dd2:	4b39      	ldr	r3, [pc, #228]	; (8008eb8 <LPS22HH_0_Probe+0x180>)
 8008dd4:	4a39      	ldr	r2, [pc, #228]	; (8008ebc <LPS22HH_0_Probe+0x184>)
 8008dd6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d11e      	bne.n	8008e1c <LPS22HH_0_Probe+0xe4>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d019      	beq.n	8008e1c <LPS22HH_0_Probe+0xe4>
 8008de8:	7a3b      	ldrb	r3, [r7, #8]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d116      	bne.n	8008e1c <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008dee:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <LPS22HH_0_Probe+0x188>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	4a34      	ldr	r2, [pc, #208]	; (8008ec4 <LPS22HH_0_Probe+0x18c>)
 8008df4:	3304      	adds	r3, #4
 8008df6:	4934      	ldr	r1, [pc, #208]	; (8008ec8 <LPS22HH_0_Probe+0x190>)
 8008df8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008dfc:	4b2e      	ldr	r3, [pc, #184]	; (8008eb8 <LPS22HH_0_Probe+0x180>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a2c      	ldr	r2, [pc, #176]	; (8008eb4 <LPS22HH_0_Probe+0x17c>)
 8008e04:	6852      	ldr	r2, [r2, #4]
 8008e06:	4610      	mov	r0, r2
 8008e08:	4798      	blx	r3
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e10:	f06f 0304 	mvn.w	r3, #4
 8008e14:	647b      	str	r3, [r7, #68]	; 0x44
 8008e16:	e001      	b.n	8008e1c <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d11e      	bne.n	8008e60 <LPS22HH_0_Probe+0x128>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d019      	beq.n	8008e60 <LPS22HH_0_Probe+0x128>
 8008e2c:	7a7b      	ldrb	r3, [r7, #9]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d116      	bne.n	8008e60 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008e32:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <LPS22HH_0_Probe+0x188>)
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	4a23      	ldr	r2, [pc, #140]	; (8008ec4 <LPS22HH_0_Probe+0x18c>)
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4924      	ldr	r1, [pc, #144]	; (8008ecc <LPS22HH_0_Probe+0x194>)
 8008e3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008e40:	4b1d      	ldr	r3, [pc, #116]	; (8008eb8 <LPS22HH_0_Probe+0x180>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1b      	ldr	r2, [pc, #108]	; (8008eb4 <LPS22HH_0_Probe+0x17c>)
 8008e48:	6852      	ldr	r2, [r2, #4]
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4798      	blx	r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e54:	f06f 0304 	mvn.w	r3, #4
 8008e58:	647b      	str	r3, [r7, #68]	; 0x44
 8008e5a:	e001      	b.n	8008e60 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d107      	bne.n	8008e76 <LPS22HH_0_Probe+0x13e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e70:	f06f 0304 	mvn.w	r3, #4
 8008e74:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d107      	bne.n	8008e8c <LPS22HH_0_Probe+0x154>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e86:	f06f 0304 	mvn.w	r3, #4
 8008e8a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3748      	adds	r7, #72	; 0x48
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	08001c05 	.word	0x08001c05
 8008e9c:	08001c81 	.word	0x08001c81
 8008ea0:	08001d35 	.word	0x08001d35
 8008ea4:	08001cd1 	.word	0x08001cd1
 8008ea8:	08001d99 	.word	0x08001d99
 8008eac:	200006ac 	.word	0x200006ac
 8008eb0:	2000066c 	.word	0x2000066c
 8008eb4:	20000624 	.word	0x20000624
 8008eb8:	20000660 	.word	0x20000660
 8008ebc:	200000a0 	.word	0x200000a0
 8008ec0:	20000154 	.word	0x20000154
 8008ec4:	20000630 	.word	0x20000630
 8008ec8:	200000c4 	.word	0x200000c4
 8008ecc:	200000b0 	.word	0x200000b0

08008ed0 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b092      	sub	sp, #72	; 0x48
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008edc:	2300      	movs	r3, #0
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008ee0:	2395      	movs	r3, #149	; 0x95
 8008ee2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008ee6:	4b46      	ldr	r3, [pc, #280]	; (8009000 <STTS751_0_Probe+0x130>)
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008eea:	4b46      	ldr	r3, [pc, #280]	; (8009004 <STTS751_0_Probe+0x134>)
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008eee:	4b46      	ldr	r3, [pc, #280]	; (8009008 <STTS751_0_Probe+0x138>)
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008ef2:	4b46      	ldr	r3, [pc, #280]	; (800900c <STTS751_0_Probe+0x13c>)
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008ef6:	4b46      	ldr	r3, [pc, #280]	; (8009010 <STTS751_0_Probe+0x140>)
 8008ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efe:	4619      	mov	r1, r3
 8008f00:	4844      	ldr	r0, [pc, #272]	; (8009014 <STTS751_0_Probe+0x144>)
 8008f02:	f7fe ffdb 	bl	8007ebc <STTS751_RegisterBusIO>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008f0c:	f06f 0306 	mvn.w	r3, #6
 8008f10:	647b      	str	r3, [r7, #68]	; 0x44
 8008f12:	e070      	b.n	8008ff6 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008f14:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008f18:	4619      	mov	r1, r3
 8008f1a:	483e      	ldr	r0, [pc, #248]	; (8009014 <STTS751_0_Probe+0x144>)
 8008f1c:	f7ff f86d 	bl	8007ffa <STTS751_ReadID>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008f26:	f06f 0306 	mvn.w	r3, #6
 8008f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f2c:	e063      	b.n	8008ff6 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8008f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f32:	2b53      	cmp	r3, #83	; 0x53
 8008f34:	d003      	beq.n	8008f3e <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008f36:	f06f 0306 	mvn.w	r3, #6
 8008f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f3c:	e05b      	b.n	8008ff6 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008f3e:	f107 0308 	add.w	r3, r7, #8
 8008f42:	4619      	mov	r1, r3
 8008f44:	4833      	ldr	r0, [pc, #204]	; (8009014 <STTS751_0_Probe+0x144>)
 8008f46:	f7ff f873 	bl	8008030 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8008f4a:	7a3b      	ldrb	r3, [r7, #8]
 8008f4c:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8008f4e:	7a7b      	ldrb	r3, [r7, #9]
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8008f54:	7abb      	ldrb	r3, [r7, #10]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8008f60:	4a2d      	ldr	r2, [pc, #180]	; (8009018 <STTS751_0_Probe+0x148>)
 8008f62:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008f64:	4b2d      	ldr	r3, [pc, #180]	; (800901c <STTS751_0_Probe+0x14c>)
 8008f66:	4a2b      	ldr	r2, [pc, #172]	; (8009014 <STTS751_0_Probe+0x144>)
 8008f68:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8008f6a:	4b2d      	ldr	r3, [pc, #180]	; (8009020 <STTS751_0_Probe+0x150>)
 8008f6c:	4a2d      	ldr	r2, [pc, #180]	; (8009024 <STTS751_0_Probe+0x154>)
 8008f6e:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d11e      	bne.n	8008fb4 <STTS751_0_Probe+0xe4>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d019      	beq.n	8008fb4 <STTS751_0_Probe+0xe4>
 8008f80:	7a3b      	ldrb	r3, [r7, #8]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d116      	bne.n	8008fb4 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008f86:	4b28      	ldr	r3, [pc, #160]	; (8009028 <STTS751_0_Probe+0x158>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4a28      	ldr	r2, [pc, #160]	; (800902c <STTS751_0_Probe+0x15c>)
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	4928      	ldr	r1, [pc, #160]	; (8009030 <STTS751_0_Probe+0x160>)
 8008f90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008f94:	4b22      	ldr	r3, [pc, #136]	; (8009020 <STTS751_0_Probe+0x150>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a20      	ldr	r2, [pc, #128]	; (800901c <STTS751_0_Probe+0x14c>)
 8008f9c:	6892      	ldr	r2, [r2, #8]
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	4798      	blx	r3
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fa8:	f06f 0304 	mvn.w	r3, #4
 8008fac:	647b      	str	r3, [r7, #68]	; 0x44
 8008fae:	e001      	b.n	8008fb4 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d107      	bne.n	8008fca <STTS751_0_Probe+0xfa>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fc4:	f06f 0304 	mvn.w	r3, #4
 8008fc8:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d107      	bne.n	8008fe0 <STTS751_0_Probe+0x110>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fda:	f06f 0304 	mvn.w	r3, #4
 8008fde:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d107      	bne.n	8008ff6 <STTS751_0_Probe+0x126>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ff0:	f06f 0304 	mvn.w	r3, #4
 8008ff4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3748      	adds	r7, #72	; 0x48
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	08001c05 	.word	0x08001c05
 8009004:	08001c81 	.word	0x08001c81
 8009008:	08001d35 	.word	0x08001d35
 800900c:	08001cd1 	.word	0x08001cd1
 8009010:	08001d99 	.word	0x08001d99
 8009014:	200006e0 	.word	0x200006e0
 8009018:	2000066c 	.word	0x2000066c
 800901c:	20000624 	.word	0x20000624
 8009020:	20000660 	.word	0x20000660
 8009024:	20000130 	.word	0x20000130
 8009028:	20000154 	.word	0x20000154
 800902c:	20000630 	.word	0x20000630
 8009030:	20000140 	.word	0x20000140

08009034 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08e      	sub	sp, #56	; 0x38
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800903e:	2300      	movs	r3, #0
 8009040:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8009042:	2301      	movs	r3, #1
 8009044:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d06e      	beq.n	800912e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b02      	cmp	r3, #2
 8009054:	f200 809d 	bhi.w	8009192 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d032      	beq.n	80090ca <IKS01A3_MOTION_SENSOR_Init+0x96>
 8009064:	e095      	b.n	8009192 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8009066:	6838      	ldr	r0, [r7, #0]
 8009068:	f000 f94e 	bl	8009308 <LSM6DSO_0_Probe>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009072:	f04f 33ff 	mov.w	r3, #4294967295
 8009076:	e0cc      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009078:	4a68      	ldr	r2, [pc, #416]	; (800921c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4967      	ldr	r1, [pc, #412]	; (8009220 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800908a:	f107 010c 	add.w	r1, r7, #12
 800908e:	4610      	mov	r0, r2
 8009090:	4798      	blx	r3
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009098:	f06f 0306 	mvn.w	r3, #6
 800909c:	e0b9      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800909e:	7b3b      	ldrb	r3, [r7, #12]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d103      	bne.n	80090ac <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	f043 0302 	orr.w	r3, r3, #2
 80090aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80090ac:	7b7b      	ldrb	r3, [r7, #13]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d103      	bne.n	80090ba <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	f043 0301 	orr.w	r3, r3, #1
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d16c      	bne.n	800919a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	f043 0304 	orr.w	r3, r3, #4
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80090c8:	e067      	b.n	800919a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80090ca:	6838      	ldr	r0, [r7, #0]
 80090cc:	f000 f9dc 	bl	8009488 <LIS2DW12_0_Probe>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80090d6:	f04f 33ff 	mov.w	r3, #4294967295
 80090da:	e09a      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80090dc:	4a4f      	ldr	r2, [pc, #316]	; (800921c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	494e      	ldr	r1, [pc, #312]	; (8009220 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80090ee:	f107 010c 	add.w	r1, r7, #12
 80090f2:	4610      	mov	r0, r2
 80090f4:	4798      	blx	r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80090fc:	f06f 0306 	mvn.w	r3, #6
 8009100:	e087      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009102:	7b3b      	ldrb	r3, [r7, #12]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d103      	bne.n	8009110 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	f043 0302 	orr.w	r3, r3, #2
 800910e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009110:	7b7b      	ldrb	r3, [r7, #13]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d103      	bne.n	800911e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d13c      	bne.n	800919e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	f043 0304 	orr.w	r3, r3, #4
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800912c:	e037      	b.n	800919e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800912e:	6838      	ldr	r0, [r7, #0]
 8009130:	f000 fa52 	bl	80095d8 <LIS2MDL_0_Probe>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800913a:	f04f 33ff 	mov.w	r3, #4294967295
 800913e:	e068      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009140:	4a36      	ldr	r2, [pc, #216]	; (800921c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	4935      	ldr	r1, [pc, #212]	; (8009220 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009152:	f107 010c 	add.w	r1, r7, #12
 8009156:	4610      	mov	r0, r2
 8009158:	4798      	blx	r3
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009160:	f06f 0306 	mvn.w	r3, #6
 8009164:	e055      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009166:	7b3b      	ldrb	r3, [r7, #12]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d103      	bne.n	8009174 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	f043 0302 	orr.w	r3, r3, #2
 8009172:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009174:	7b7b      	ldrb	r3, [r7, #13]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d103      	bne.n	8009182 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	f043 0301 	orr.w	r3, r3, #1
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d10c      	bne.n	80091a2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	f043 0304 	orr.w	r3, r3, #4
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009190:	e007      	b.n	80091a2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009192:	f06f 0301 	mvn.w	r3, #1
 8009196:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009198:	e004      	b.n	80091a4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80091a2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80091a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80091aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ac:	e031      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80091ae:	2300      	movs	r3, #0
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b2:	e02a      	b.n	800920a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	4013      	ands	r3, r2
 80091ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091bc:	429a      	cmp	r2, r3
 80091be:	d11e      	bne.n	80091fe <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80091c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	4013      	ands	r3, r2
 80091c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d118      	bne.n	80091fe <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80091cc:	4a15      	ldr	r2, [pc, #84]	; (8009224 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091d4:	4814      	ldr	r0, [pc, #80]	; (8009228 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	4613      	mov	r3, r2
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	4413      	add	r3, r2
 80091de:	440b      	add	r3, r1
 80091e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	490e      	ldr	r1, [pc, #56]	; (8009220 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80091ee:	4610      	mov	r0, r2
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80091f8:	f06f 0304 	mvn.w	r3, #4
 80091fc:	e009      	b.n	8009212 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	3301      	adds	r3, #1
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	2b02      	cmp	r3, #2
 800920e:	d9d1      	bls.n	80091b4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8009210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009212:	4618      	mov	r0, r3
 8009214:	3738      	adds	r7, #56	; 0x38
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000748 	.word	0x20000748
 8009220:	20000718 	.word	0x20000718
 8009224:	20000178 	.word	0x20000178
 8009228:	20000724 	.word	0x20000724

0800922c <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d903      	bls.n	8009244 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800923c:	f06f 0301 	mvn.w	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	e014      	b.n	800926e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009244:	4a0c      	ldr	r2, [pc, #48]	; (8009278 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	490b      	ldr	r1, [pc, #44]	; (800927c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009262:	f06f 0306 	mvn.w	r3, #6
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e001      	b.n	800926e <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800926e:	68fb      	ldr	r3, [r7, #12]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000748 	.word	0x20000748
 800927c:	20000718 	.word	0x20000718

08009280 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b02      	cmp	r3, #2
 8009290:	d903      	bls.n	800929a <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009292:	f06f 0301 	mvn.w	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e029      	b.n	80092ee <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800929a:	4a17      	ldr	r2, [pc, #92]	; (80092f8 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4013      	ands	r3, r2
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d11d      	bne.n	80092e8 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80092ac:	4a13      	ldr	r2, [pc, #76]	; (80092fc <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092b4:	4812      	ldr	r0, [pc, #72]	; (8009300 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4613      	mov	r3, r2
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	4413      	add	r3, r2
 80092be:	440b      	add	r3, r1
 80092c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	490f      	ldr	r1, [pc, #60]	; (8009304 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092da:	f06f 0304 	mvn.w	r3, #4
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	e005      	b.n	80092ee <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	e002      	b.n	80092ee <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80092e8:	f06f 0301 	mvn.w	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80092ee:	697b      	ldr	r3, [r7, #20]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000754 	.word	0x20000754
 80092fc:	20000178 	.word	0x20000178
 8009300:	20000724 	.word	0x20000724
 8009304:	20000718 	.word	0x20000718

08009308 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b094      	sub	sp, #80	; 0x50
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009310:	2300      	movs	r3, #0
 8009312:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009314:	2300      	movs	r3, #0
 8009316:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009318:	23d7      	movs	r3, #215	; 0xd7
 800931a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800931e:	4b4b      	ldr	r3, [pc, #300]	; (800944c <LSM6DSO_0_Probe+0x144>)
 8009320:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009322:	4b4b      	ldr	r3, [pc, #300]	; (8009450 <LSM6DSO_0_Probe+0x148>)
 8009324:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009326:	4b4b      	ldr	r3, [pc, #300]	; (8009454 <LSM6DSO_0_Probe+0x14c>)
 8009328:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800932a:	4b4b      	ldr	r3, [pc, #300]	; (8009458 <LSM6DSO_0_Probe+0x150>)
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800932e:	4b4b      	ldr	r3, [pc, #300]	; (800945c <LSM6DSO_0_Probe+0x154>)
 8009330:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009332:	4b4b      	ldr	r3, [pc, #300]	; (8009460 <LSM6DSO_0_Probe+0x158>)
 8009334:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800933a:	4619      	mov	r1, r3
 800933c:	4849      	ldr	r0, [pc, #292]	; (8009464 <LSM6DSO_0_Probe+0x15c>)
 800933e:	f7fc fddd 	bl	8005efc <LSM6DSO_RegisterBusIO>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009348:	f06f 0306 	mvn.w	r3, #6
 800934c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800934e:	e077      	b.n	8009440 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009350:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009354:	4619      	mov	r1, r3
 8009356:	4843      	ldr	r0, [pc, #268]	; (8009464 <LSM6DSO_0_Probe+0x15c>)
 8009358:	f7fc feda 	bl	8006110 <LSM6DSO_ReadID>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009362:	f06f 0306 	mvn.w	r3, #6
 8009366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009368:	e06a      	b.n	8009440 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800936a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800936e:	2b6c      	cmp	r3, #108	; 0x6c
 8009370:	d003      	beq.n	800937a <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009372:	f06f 0306 	mvn.w	r3, #6
 8009376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009378:	e062      	b.n	8009440 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800937a:	f107 030c 	add.w	r3, r7, #12
 800937e:	4619      	mov	r1, r3
 8009380:	4838      	ldr	r0, [pc, #224]	; (8009464 <LSM6DSO_0_Probe+0x15c>)
 8009382:	f7fc fedb 	bl	800613c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009386:	7b7b      	ldrb	r3, [r7, #13]
 8009388:	461a      	mov	r2, r3
 800938a:	7b3b      	ldrb	r3, [r7, #12]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	431a      	orrs	r2, r3
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4313      	orrs	r3, r2
 8009396:	4a34      	ldr	r2, [pc, #208]	; (8009468 <LSM6DSO_0_Probe+0x160>)
 8009398:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800939a:	4b34      	ldr	r3, [pc, #208]	; (800946c <LSM6DSO_0_Probe+0x164>)
 800939c:	4a31      	ldr	r2, [pc, #196]	; (8009464 <LSM6DSO_0_Probe+0x15c>)
 800939e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80093a0:	4b33      	ldr	r3, [pc, #204]	; (8009470 <LSM6DSO_0_Probe+0x168>)
 80093a2:	4a34      	ldr	r2, [pc, #208]	; (8009474 <LSM6DSO_0_Probe+0x16c>)
 80093a4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80093a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11d      	bne.n	80093e8 <LSM6DSO_0_Probe+0xe0>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d018      	beq.n	80093e8 <LSM6DSO_0_Probe+0xe0>
 80093b6:	7b7b      	ldrb	r3, [r7, #13]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d115      	bne.n	80093e8 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80093bc:	4b2e      	ldr	r3, [pc, #184]	; (8009478 <LSM6DSO_0_Probe+0x170>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4a2e      	ldr	r2, [pc, #184]	; (800947c <LSM6DSO_0_Probe+0x174>)
 80093c2:	492f      	ldr	r1, [pc, #188]	; (8009480 <LSM6DSO_0_Probe+0x178>)
 80093c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80093c8:	4b29      	ldr	r3, [pc, #164]	; (8009470 <LSM6DSO_0_Probe+0x168>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a27      	ldr	r2, [pc, #156]	; (800946c <LSM6DSO_0_Probe+0x164>)
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	4610      	mov	r0, r2
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80093dc:	f06f 0304 	mvn.w	r3, #4
 80093e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093e2:	e001      	b.n	80093e8 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80093e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d11d      	bne.n	800942a <LSM6DSO_0_Probe+0x122>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d018      	beq.n	800942a <LSM6DSO_0_Probe+0x122>
 80093f8:	7b3b      	ldrb	r3, [r7, #12]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d115      	bne.n	800942a <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80093fe:	4b1e      	ldr	r3, [pc, #120]	; (8009478 <LSM6DSO_0_Probe+0x170>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	4a1e      	ldr	r2, [pc, #120]	; (800947c <LSM6DSO_0_Probe+0x174>)
 8009404:	491f      	ldr	r1, [pc, #124]	; (8009484 <LSM6DSO_0_Probe+0x17c>)
 8009406:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800940a:	4b19      	ldr	r3, [pc, #100]	; (8009470 <LSM6DSO_0_Probe+0x168>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a16      	ldr	r2, [pc, #88]	; (800946c <LSM6DSO_0_Probe+0x164>)
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800941e:	f06f 0304 	mvn.w	r3, #4
 8009422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009424:	e001      	b.n	800942a <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009426:	2300      	movs	r3, #0
 8009428:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800942a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d107      	bne.n	8009440 <LSM6DSO_0_Probe+0x138>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800943a:	f06f 0304 	mvn.w	r3, #4
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009442:	4618      	mov	r0, r3
 8009444:	3750      	adds	r7, #80	; 0x50
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	08001c05 	.word	0x08001c05
 8009450:	08001c81 	.word	0x08001c81
 8009454:	08001d35 	.word	0x08001d35
 8009458:	08001cd1 	.word	0x08001cd1
 800945c:	08001d99 	.word	0x08001d99
 8009460:	08009c21 	.word	0x08009c21
 8009464:	20000760 	.word	0x20000760
 8009468:	20000754 	.word	0x20000754
 800946c:	20000718 	.word	0x20000718
 8009470:	20000748 	.word	0x20000748
 8009474:	200000d8 	.word	0x200000d8
 8009478:	20000178 	.word	0x20000178
 800947c:	20000724 	.word	0x20000724
 8009480:	2000010c 	.word	0x2000010c
 8009484:	200000e8 	.word	0x200000e8

08009488 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b094      	sub	sp, #80	; 0x50
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009490:	2300      	movs	r3, #0
 8009492:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009494:	2300      	movs	r3, #0
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009498:	2333      	movs	r3, #51	; 0x33
 800949a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800949e:	4b40      	ldr	r3, [pc, #256]	; (80095a0 <LIS2DW12_0_Probe+0x118>)
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80094a2:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <LIS2DW12_0_Probe+0x11c>)
 80094a4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80094a6:	4b40      	ldr	r3, [pc, #256]	; (80095a8 <LIS2DW12_0_Probe+0x120>)
 80094a8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80094aa:	4b40      	ldr	r3, [pc, #256]	; (80095ac <LIS2DW12_0_Probe+0x124>)
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80094ae:	4b40      	ldr	r3, [pc, #256]	; (80095b0 <LIS2DW12_0_Probe+0x128>)
 80094b0:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80094b2:	4b40      	ldr	r3, [pc, #256]	; (80095b4 <LIS2DW12_0_Probe+0x12c>)
 80094b4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80094b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094ba:	4619      	mov	r1, r3
 80094bc:	483e      	ldr	r0, [pc, #248]	; (80095b8 <LIS2DW12_0_Probe+0x130>)
 80094be:	f7f9 fc23 	bl	8002d08 <LIS2DW12_RegisterBusIO>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094c8:	f06f 0306 	mvn.w	r3, #6
 80094cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ce:	e062      	b.n	8009596 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80094d0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80094d4:	4619      	mov	r1, r3
 80094d6:	4838      	ldr	r0, [pc, #224]	; (80095b8 <LIS2DW12_0_Probe+0x130>)
 80094d8:	f7f9 fd04 	bl	8002ee4 <LIS2DW12_ReadID>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094e2:	f06f 0306 	mvn.w	r3, #6
 80094e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094e8:	e055      	b.n	8009596 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 80094ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094ee:	2b44      	cmp	r3, #68	; 0x44
 80094f0:	d003      	beq.n	80094fa <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094f2:	f06f 0306 	mvn.w	r3, #6
 80094f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094f8:	e04d      	b.n	8009596 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80094fa:	f107 030c 	add.w	r3, r7, #12
 80094fe:	4619      	mov	r1, r3
 8009500:	482d      	ldr	r0, [pc, #180]	; (80095b8 <LIS2DW12_0_Probe+0x130>)
 8009502:	f7f9 fd05 	bl	8002f10 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009506:	7b7b      	ldrb	r3, [r7, #13]
 8009508:	461a      	mov	r2, r3
 800950a:	7b3b      	ldrb	r3, [r7, #12]
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	431a      	orrs	r2, r3
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4313      	orrs	r3, r2
 8009516:	4a29      	ldr	r2, [pc, #164]	; (80095bc <LIS2DW12_0_Probe+0x134>)
 8009518:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <LIS2DW12_0_Probe+0x138>)
 800951c:	4a26      	ldr	r2, [pc, #152]	; (80095b8 <LIS2DW12_0_Probe+0x130>)
 800951e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <LIS2DW12_0_Probe+0x13c>)
 8009522:	4a29      	ldr	r2, [pc, #164]	; (80095c8 <LIS2DW12_0_Probe+0x140>)
 8009524:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d11e      	bne.n	800956a <LIS2DW12_0_Probe+0xe2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d019      	beq.n	800956a <LIS2DW12_0_Probe+0xe2>
 8009536:	7b3b      	ldrb	r3, [r7, #12]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d116      	bne.n	800956a <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800953c:	4b23      	ldr	r3, [pc, #140]	; (80095cc <LIS2DW12_0_Probe+0x144>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	4a23      	ldr	r2, [pc, #140]	; (80095d0 <LIS2DW12_0_Probe+0x148>)
 8009542:	3303      	adds	r3, #3
 8009544:	4923      	ldr	r1, [pc, #140]	; (80095d4 <LIS2DW12_0_Probe+0x14c>)
 8009546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800954a:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <LIS2DW12_0_Probe+0x13c>)
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <LIS2DW12_0_Probe+0x138>)
 8009552:	6852      	ldr	r2, [r2, #4]
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800955e:	f06f 0304 	mvn.w	r3, #4
 8009562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009564:	e001      	b.n	800956a <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009566:	2300      	movs	r3, #0
 8009568:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800956a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d107      	bne.n	8009580 <LIS2DW12_0_Probe+0xf8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800957a:	f06f 0304 	mvn.w	r3, #4
 800957e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d107      	bne.n	8009596 <LIS2DW12_0_Probe+0x10e>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009590:	f06f 0304 	mvn.w	r3, #4
 8009594:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009598:	4618      	mov	r0, r3
 800959a:	3750      	adds	r7, #80	; 0x50
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	08001c05 	.word	0x08001c05
 80095a4:	08001c81 	.word	0x08001c81
 80095a8:	08001d35 	.word	0x08001d35
 80095ac:	08001cd1 	.word	0x08001cd1
 80095b0:	08001d99 	.word	0x08001d99
 80095b4:	08009c21 	.word	0x08009c21
 80095b8:	20000798 	.word	0x20000798
 80095bc:	20000754 	.word	0x20000754
 80095c0:	20000718 	.word	0x20000718
 80095c4:	20000748 	.word	0x20000748
 80095c8:	20000038 	.word	0x20000038
 80095cc:	20000178 	.word	0x20000178
 80095d0:	20000724 	.word	0x20000724
 80095d4:	20000048 	.word	0x20000048

080095d8 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b094      	sub	sp, #80	; 0x50
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80095e4:	2300      	movs	r3, #0
 80095e6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80095e8:	233d      	movs	r3, #61	; 0x3d
 80095ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80095ee:	4b40      	ldr	r3, [pc, #256]	; (80096f0 <LIS2MDL_0_Probe+0x118>)
 80095f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80095f2:	4b40      	ldr	r3, [pc, #256]	; (80096f4 <LIS2MDL_0_Probe+0x11c>)
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80095f6:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <LIS2MDL_0_Probe+0x120>)
 80095f8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80095fa:	4b40      	ldr	r3, [pc, #256]	; (80096fc <LIS2MDL_0_Probe+0x124>)
 80095fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80095fe:	4b40      	ldr	r3, [pc, #256]	; (8009700 <LIS2MDL_0_Probe+0x128>)
 8009600:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009602:	4b40      	ldr	r3, [pc, #256]	; (8009704 <LIS2MDL_0_Probe+0x12c>)
 8009604:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800960a:	4619      	mov	r1, r3
 800960c:	483e      	ldr	r0, [pc, #248]	; (8009708 <LIS2MDL_0_Probe+0x130>)
 800960e:	f7fa fe09 	bl	8004224 <LIS2MDL_RegisterBusIO>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009618:	f06f 0306 	mvn.w	r3, #6
 800961c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800961e:	e062      	b.n	80096e6 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009620:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009624:	4619      	mov	r1, r3
 8009626:	4838      	ldr	r0, [pc, #224]	; (8009708 <LIS2MDL_0_Probe+0x130>)
 8009628:	f7fa ff18 	bl	800445c <LIS2MDL_ReadID>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009632:	f06f 0306 	mvn.w	r3, #6
 8009636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009638:	e055      	b.n	80096e6 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800963a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800963e:	2b40      	cmp	r3, #64	; 0x40
 8009640:	d003      	beq.n	800964a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009642:	f06f 0306 	mvn.w	r3, #6
 8009646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009648:	e04d      	b.n	80096e6 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	4619      	mov	r1, r3
 8009650:	482d      	ldr	r0, [pc, #180]	; (8009708 <LIS2MDL_0_Probe+0x130>)
 8009652:	f7fa ff29 	bl	80044a8 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009656:	7b7b      	ldrb	r3, [r7, #13]
 8009658:	461a      	mov	r2, r3
 800965a:	7b3b      	ldrb	r3, [r7, #12]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	431a      	orrs	r2, r3
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4313      	orrs	r3, r2
 8009666:	4a29      	ldr	r2, [pc, #164]	; (800970c <LIS2MDL_0_Probe+0x134>)
 8009668:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800966a:	4b29      	ldr	r3, [pc, #164]	; (8009710 <LIS2MDL_0_Probe+0x138>)
 800966c:	4a26      	ldr	r2, [pc, #152]	; (8009708 <LIS2MDL_0_Probe+0x130>)
 800966e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009670:	4b28      	ldr	r3, [pc, #160]	; (8009714 <LIS2MDL_0_Probe+0x13c>)
 8009672:	4a29      	ldr	r2, [pc, #164]	; (8009718 <LIS2MDL_0_Probe+0x140>)
 8009674:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d11e      	bne.n	80096ba <LIS2MDL_0_Probe+0xe2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d019      	beq.n	80096ba <LIS2MDL_0_Probe+0xe2>
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d116      	bne.n	80096ba <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800968c:	4b23      	ldr	r3, [pc, #140]	; (800971c <LIS2MDL_0_Probe+0x144>)
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	4a23      	ldr	r2, [pc, #140]	; (8009720 <LIS2MDL_0_Probe+0x148>)
 8009692:	3306      	adds	r3, #6
 8009694:	4923      	ldr	r1, [pc, #140]	; (8009724 <LIS2MDL_0_Probe+0x14c>)
 8009696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800969a:	4b1e      	ldr	r3, [pc, #120]	; (8009714 <LIS2MDL_0_Probe+0x13c>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a1b      	ldr	r2, [pc, #108]	; (8009710 <LIS2MDL_0_Probe+0x138>)
 80096a2:	6892      	ldr	r2, [r2, #8]
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80096ae:	f06f 0304 	mvn.w	r3, #4
 80096b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096b4:	e001      	b.n	80096ba <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80096ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d107      	bne.n	80096d0 <LIS2MDL_0_Probe+0xf8>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80096ca:	f06f 0304 	mvn.w	r3, #4
 80096ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80096d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d107      	bne.n	80096e6 <LIS2MDL_0_Probe+0x10e>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80096e0:	f06f 0304 	mvn.w	r3, #4
 80096e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80096e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3750      	adds	r7, #80	; 0x50
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	08001c05 	.word	0x08001c05
 80096f4:	08001c81 	.word	0x08001c81
 80096f8:	08001d35 	.word	0x08001d35
 80096fc:	08001cd1 	.word	0x08001cd1
 8009700:	08001d99 	.word	0x08001d99
 8009704:	08009c21 	.word	0x08009c21
 8009708:	200007d4 	.word	0x200007d4
 800970c:	20000754 	.word	0x20000754
 8009710:	20000718 	.word	0x20000718
 8009714:	20000748 	.word	0x20000748
 8009718:	2000006c 	.word	0x2000006c
 800971c:	20000178 	.word	0x20000178
 8009720:	20000724 	.word	0x20000724
 8009724:	2000007c 	.word	0x2000007c

08009728 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	4a04      	ldr	r2, [pc, #16]	; (8009748 <BSP_LED_Init+0x20>)
 8009736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800973a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	08012e4c 	.word	0x08012e4c

0800974c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <LED_USER_GPIO_Init+0x78>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	4a1b      	ldr	r2, [pc, #108]	; (80097c4 <LED_USER_GPIO_Init+0x78>)
 8009758:	f043 0301 	orr.w	r3, r3, #1
 800975c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800975e:	4b19      	ldr	r3, [pc, #100]	; (80097c4 <LED_USER_GPIO_Init+0x78>)
 8009760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	60bb      	str	r3, [r7, #8]
 8009768:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800976a:	f107 030c 	add.w	r3, r7, #12
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	605a      	str	r2, [r3, #4]
 8009774:	609a      	str	r2, [r3, #8]
 8009776:	60da      	str	r2, [r3, #12]
 8009778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800977a:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <LED_USER_GPIO_Init+0x78>)
 800977c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977e:	4a11      	ldr	r2, [pc, #68]	; (80097c4 <LED_USER_GPIO_Init+0x78>)
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009786:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <LED_USER_GPIO_Init+0x78>)
 8009788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	607b      	str	r3, [r7, #4]
 8009790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8009792:	2200      	movs	r2, #0
 8009794:	2120      	movs	r1, #32
 8009796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800979a:	f000 fe8b 	bl	800a4b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800979e:	2320      	movs	r3, #32
 80097a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097a2:	2301      	movs	r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80097ae:	f107 030c 	add.w	r3, r7, #12
 80097b2:	4619      	mov	r1, r3
 80097b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097b8:	f000 fbc6 	bl	8009f48 <HAL_GPIO_Init>

}
 80097bc:	bf00      	nop
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	40021000 	.word	0x40021000

080097c8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	460a      	mov	r2, r1
 80097d2:	71fb      	strb	r3, [r7, #7]
 80097d4:	4613      	mov	r3, r2
 80097d6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	4a1f      	ldr	r2, [pc, #124]	; (800985c <BSP_PB_Init+0x94>)
 80097e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80097e6:	79bb      	ldrb	r3, [r7, #6]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d132      	bne.n	8009852 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	4a1b      	ldr	r2, [pc, #108]	; (8009860 <BSP_PB_Init+0x98>)
 80097f2:	441a      	add	r2, r3
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	491b      	ldr	r1, [pc, #108]	; (8009864 <BSP_PB_Init+0x9c>)
 80097f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f000 fb5d 	bl	8009ebe <HAL_EXTI_GetHandle>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800980a:	f06f 0303 	mvn.w	r3, #3
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	e01f      	b.n	8009852 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	4a12      	ldr	r2, [pc, #72]	; (8009860 <BSP_PB_Init+0x98>)
 8009818:	1898      	adds	r0, r3, r2
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	4a12      	ldr	r2, [pc, #72]	; (8009868 <BSP_PB_Init+0xa0>)
 800981e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009822:	461a      	mov	r2, r3
 8009824:	2100      	movs	r1, #0
 8009826:	f000 fb30 	bl	8009e8a <HAL_EXTI_RegisterCallback>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009830:	f06f 0303 	mvn.w	r3, #3
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	e00c      	b.n	8009852 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8009838:	2028      	movs	r0, #40	; 0x28
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	4a0b      	ldr	r2, [pc, #44]	; (800986c <BSP_PB_Init+0xa4>)
 800983e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009842:	2200      	movs	r2, #0
 8009844:	4619      	mov	r1, r3
 8009846:	f000 faea 	bl	8009e1e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800984a:	2328      	movs	r3, #40	; 0x28
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fb02 	bl	8009e56 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009852:	68fb      	ldr	r3, [r7, #12]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	08012e50 	.word	0x08012e50
 8009860:	20000190 	.word	0x20000190
 8009864:	08012e54 	.word	0x08012e54
 8009868:	08012e58 	.word	0x08012e58
 800986c:	08012e5c 	.word	0x08012e5c

08009870 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	4a09      	ldr	r2, [pc, #36]	; (80098a4 <BSP_PB_GetState+0x34>)
 800987e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fdfb 	bl	800a484 <HAL_GPIO_ReadPin>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	2000018c 	.word	0x2000018c

080098a8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80098ac:	2000      	movs	r0, #0
 80098ae:	f7f7 fc6f 	bl	8001190 <BSP_PB_Callback>
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80098be:	4b19      	ldr	r3, [pc, #100]	; (8009924 <BUTTON_USER_GPIO_Init+0x6c>)
 80098c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c2:	4a18      	ldr	r2, [pc, #96]	; (8009924 <BUTTON_USER_GPIO_Init+0x6c>)
 80098c4:	f043 0304 	orr.w	r3, r3, #4
 80098c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098ca:	4b16      	ldr	r3, [pc, #88]	; (8009924 <BUTTON_USER_GPIO_Init+0x6c>)
 80098cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ce:	f003 0304 	and.w	r3, r3, #4
 80098d2:	60bb      	str	r3, [r7, #8]
 80098d4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098d6:	f107 030c 	add.w	r3, r7, #12
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	605a      	str	r2, [r3, #4]
 80098e0:	609a      	str	r2, [r3, #8]
 80098e2:	60da      	str	r2, [r3, #12]
 80098e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <BUTTON_USER_GPIO_Init+0x6c>)
 80098e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ea:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <BUTTON_USER_GPIO_Init+0x6c>)
 80098ec:	f043 0304 	orr.w	r3, r3, #4
 80098f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098f2:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <BUTTON_USER_GPIO_Init+0x6c>)
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80098fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009904:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800990a:	2300      	movs	r3, #0
 800990c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800990e:	f107 030c 	add.w	r3, r7, #12
 8009912:	4619      	mov	r1, r3
 8009914:	4804      	ldr	r0, [pc, #16]	; (8009928 <BUTTON_USER_GPIO_Init+0x70>)
 8009916:	f000 fb17 	bl	8009f48 <HAL_GPIO_Init>

}
 800991a:	bf00      	nop
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40021000 	.word	0x40021000
 8009928:	48000800 	.word	0x48000800

0800992c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d903      	bls.n	8009948 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009940:	f06f 0301 	mvn.w	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e025      	b.n	8009994 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	79fa      	ldrb	r2, [r7, #7]
 800994c:	4914      	ldr	r1, [pc, #80]	; (80099a0 <BSP_COM_Init+0x74>)
 800994e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009952:	4814      	ldr	r0, [pc, #80]	; (80099a4 <BSP_COM_Init+0x78>)
 8009954:	4613      	mov	r3, r2
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	4413      	add	r3, r2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	4403      	add	r3, r0
 800995e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8009960:	79fa      	ldrb	r2, [r7, #7]
 8009962:	4613      	mov	r3, r2
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	4413      	add	r3, r2
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	4a0e      	ldr	r2, [pc, #56]	; (80099a4 <BSP_COM_Init+0x78>)
 800996c:	4413      	add	r3, r2
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f86a 	bl	8009a48 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8009974:	79fa      	ldrb	r2, [r7, #7]
 8009976:	4613      	mov	r3, r2
 8009978:	011b      	lsls	r3, r3, #4
 800997a:	4413      	add	r3, r2
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <BSP_COM_Init+0x78>)
 8009980:	4413      	add	r3, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f810 	bl	80099a8 <MX_USART2_UART_Init>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800998e:	f06f 0303 	mvn.w	r3, #3
 8009992:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000198 	.word	0x20000198
 80099a4:	20000808 	.word	0x20000808

080099a8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <MX_USART2_UART_Init+0x64>)
 80099b8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80099c0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	220c      	movs	r2, #12
 80099d8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f002 ff30 	bl	800c858 <HAL_UART_Init>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	40004400 	.word	0x40004400

08009a10 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <__io_putchar+0x30>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4613      	mov	r3, r2
 8009a20:	011b      	lsls	r3, r3, #4
 8009a22:	4413      	add	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4a07      	ldr	r2, [pc, #28]	; (8009a44 <__io_putchar+0x34>)
 8009a28:	1898      	adds	r0, r3, r2
 8009a2a:	1d39      	adds	r1, r7, #4
 8009a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a30:	2201      	movs	r2, #1
 8009a32:	f002 ff5f 	bl	800c8f4 <HAL_UART_Transmit>
  return ch;
 8009a36:	687b      	ldr	r3, [r7, #4]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000890 	.word	0x20000890
 8009a44:	20000808 	.word	0x20000808

08009a48 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b0ac      	sub	sp, #176	; 0xb0
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a50:	f107 0314 	add.w	r3, r7, #20
 8009a54:	2288      	movs	r2, #136	; 0x88
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f004 fd4e 	bl	800e4fa <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009a5e:	2302      	movs	r3, #2
 8009a60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009a62:	2300      	movs	r3, #0
 8009a64:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009a66:	f107 0314 	add.w	r3, r7, #20
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 fa38 	bl	800bee0 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009a70:	4b23      	ldr	r3, [pc, #140]	; (8009b00 <USART2_MspInit+0xb8>)
 8009a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a74:	4a22      	ldr	r2, [pc, #136]	; (8009b00 <USART2_MspInit+0xb8>)
 8009a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8009a7c:	4b20      	ldr	r3, [pc, #128]	; (8009b00 <USART2_MspInit+0xb8>)
 8009a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a84:	613b      	str	r3, [r7, #16]
 8009a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a88:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <USART2_MspInit+0xb8>)
 8009a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8c:	4a1c      	ldr	r2, [pc, #112]	; (8009b00 <USART2_MspInit+0xb8>)
 8009a8e:	f043 0301 	orr.w	r3, r3, #1
 8009a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a94:	4b1a      	ldr	r3, [pc, #104]	; (8009b00 <USART2_MspInit+0xb8>)
 8009a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8009ab8:	2307      	movs	r3, #7
 8009aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8009abe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ac8:	f000 fa3e 	bl	8009f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8009acc:	2308      	movs	r3, #8
 8009ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8009ae4:	2307      	movs	r3, #7
 8009ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8009aea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009aee:	4619      	mov	r1, r3
 8009af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009af4:	f000 fa28 	bl	8009f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8009af8:	bf00      	nop
 8009afa:	37b0      	adds	r7, #176	; 0xb0
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	40021000 	.word	0x40021000

08009b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009b08:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <SystemInit+0x20>)
 8009b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0e:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <SystemInit+0x20>)
 8009b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009b18:	bf00      	nop
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	e000ed00 	.word	0xe000ed00

08009b28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b32:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <HAL_Init+0x3c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a0b      	ldr	r2, [pc, #44]	; (8009b64 <HAL_Init+0x3c>)
 8009b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b3e:	2003      	movs	r0, #3
 8009b40:	f000 f962 	bl	8009e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009b44:	2000      	movs	r0, #0
 8009b46:	f000 f80f 	bl	8009b68 <HAL_InitTick>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	71fb      	strb	r3, [r7, #7]
 8009b54:	e001      	b.n	8009b5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009b56:	f7f7 ff85 	bl	8001a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	40022000 	.word	0x40022000

08009b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009b74:	4b17      	ldr	r3, [pc, #92]	; (8009bd4 <HAL_InitTick+0x6c>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d023      	beq.n	8009bc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009b7c:	4b16      	ldr	r3, [pc, #88]	; (8009bd8 <HAL_InitTick+0x70>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <HAL_InitTick+0x6c>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	4619      	mov	r1, r3
 8009b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 f96d 	bl	8009e72 <HAL_SYSTICK_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10f      	bne.n	8009bbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b0f      	cmp	r3, #15
 8009ba2:	d809      	bhi.n	8009bb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	f000 f937 	bl	8009e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009bb0:	4a0a      	ldr	r2, [pc, #40]	; (8009bdc <HAL_InitTick+0x74>)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	e007      	b.n	8009bc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
 8009bbc:	e004      	b.n	8009bc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	73fb      	strb	r3, [r7, #15]
 8009bc2:	e001      	b.n	8009bc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200001a4 	.word	0x200001a4
 8009bd8:	2000019c 	.word	0x2000019c
 8009bdc:	200001a0 	.word	0x200001a0

08009be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009be4:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <HAL_IncTick+0x20>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <HAL_IncTick+0x24>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4413      	add	r3, r2
 8009bf0:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <HAL_IncTick+0x24>)
 8009bf2:	6013      	str	r3, [r2, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	200001a4 	.word	0x200001a4
 8009c04:	20000894 	.word	0x20000894

08009c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8009c0c:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <HAL_GetTick+0x14>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	20000894 	.word	0x20000894

08009c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c28:	f7ff ffee 	bl	8009c08 <HAL_GetTick>
 8009c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d005      	beq.n	8009c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009c3a:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <HAL_Delay+0x44>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009c46:	bf00      	nop
 8009c48:	f7ff ffde 	bl	8009c08 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d8f7      	bhi.n	8009c48 <HAL_Delay+0x28>
  {
  }
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	200001a4 	.word	0x200001a4

08009c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c78:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <__NVIC_SetPriorityGrouping+0x44>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c84:	4013      	ands	r3, r2
 8009c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c9a:	4a04      	ldr	r2, [pc, #16]	; (8009cac <__NVIC_SetPriorityGrouping+0x44>)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	60d3      	str	r3, [r2, #12]
}
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	e000ed00 	.word	0xe000ed00

08009cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009cb4:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	0a1b      	lsrs	r3, r3, #8
 8009cba:	f003 0307 	and.w	r3, r3, #7
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	e000ed00 	.word	0xe000ed00

08009ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	db0b      	blt.n	8009cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	f003 021f 	and.w	r2, r3, #31
 8009ce4:	4907      	ldr	r1, [pc, #28]	; (8009d04 <__NVIC_EnableIRQ+0x38>)
 8009ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cea:	095b      	lsrs	r3, r3, #5
 8009cec:	2001      	movs	r0, #1
 8009cee:	fa00 f202 	lsl.w	r2, r0, r2
 8009cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	e000e100 	.word	0xe000e100

08009d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	6039      	str	r1, [r7, #0]
 8009d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	db0a      	blt.n	8009d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	490c      	ldr	r1, [pc, #48]	; (8009d54 <__NVIC_SetPriority+0x4c>)
 8009d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d26:	0112      	lsls	r2, r2, #4
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d30:	e00a      	b.n	8009d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	4908      	ldr	r1, [pc, #32]	; (8009d58 <__NVIC_SetPriority+0x50>)
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	3b04      	subs	r3, #4
 8009d40:	0112      	lsls	r2, r2, #4
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	440b      	add	r3, r1
 8009d46:	761a      	strb	r2, [r3, #24]
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	e000e100 	.word	0xe000e100
 8009d58:	e000ed00 	.word	0xe000ed00

08009d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b089      	sub	sp, #36	; 0x24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	f1c3 0307 	rsb	r3, r3, #7
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	bf28      	it	cs
 8009d7a:	2304      	movcs	r3, #4
 8009d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	3304      	adds	r3, #4
 8009d82:	2b06      	cmp	r3, #6
 8009d84:	d902      	bls.n	8009d8c <NVIC_EncodePriority+0x30>
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	3b03      	subs	r3, #3
 8009d8a:	e000      	b.n	8009d8e <NVIC_EncodePriority+0x32>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d90:	f04f 32ff 	mov.w	r2, #4294967295
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9a:	43da      	mvns	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	401a      	ands	r2, r3
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009da4:	f04f 31ff 	mov.w	r1, #4294967295
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dae:	43d9      	mvns	r1, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009db4:	4313      	orrs	r3, r2
         );
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3724      	adds	r7, #36	; 0x24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
	...

08009dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dd4:	d301      	bcc.n	8009dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e00f      	b.n	8009dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009dda:	4a0a      	ldr	r2, [pc, #40]	; (8009e04 <SysTick_Config+0x40>)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009de2:	210f      	movs	r1, #15
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	f7ff ff8e 	bl	8009d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <SysTick_Config+0x40>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <SysTick_Config+0x40>)
 8009df4:	2207      	movs	r2, #7
 8009df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	e000e010 	.word	0xe000e010

08009e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff ff29 	bl	8009c68 <__NVIC_SetPriorityGrouping>
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b086      	sub	sp, #24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	4603      	mov	r3, r0
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009e30:	f7ff ff3e 	bl	8009cb0 <__NVIC_GetPriorityGrouping>
 8009e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	68b9      	ldr	r1, [r7, #8]
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f7ff ff8e 	bl	8009d5c <NVIC_EncodePriority>
 8009e40:	4602      	mov	r2, r0
 8009e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff ff5d 	bl	8009d08 <__NVIC_SetPriority>
}
 8009e4e:	bf00      	nop
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff ff31 	bl	8009ccc <__NVIC_EnableIRQ>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ffa2 	bl	8009dc4 <SysTick_Config>
 8009e80:	4603      	mov	r3, r0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b087      	sub	sp, #28
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	460b      	mov	r3, r1
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d103      	bne.n	8009eaa <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	605a      	str	r2, [r3, #4]
      break;
 8009ea8:	e002      	b.n	8009eb0 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	75fb      	strb	r3, [r7, #23]
      break;
 8009eae:	bf00      	nop
  }

  return status;
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e003      	b.n	8009eda <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
  }
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	0c1b      	lsrs	r3, r3, #16
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	2201      	movs	r2, #1
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	4b0c      	ldr	r3, [pc, #48]	; (8009f44 <HAL_EXTI_IRQHandler+0x5c>)
 8009f12:	4413      	add	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4798      	blx	r3
    }
  }
}
 8009f3a:	bf00      	nop
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	40010414 	.word	0x40010414

08009f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f56:	e17f      	b.n	800a258 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	fa01 f303 	lsl.w	r3, r1, r3
 8009f64:	4013      	ands	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8171 	beq.w	800a252 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d005      	beq.n	8009f88 <HAL_GPIO_Init+0x40>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d130      	bne.n	8009fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	2203      	movs	r2, #3
 8009f94:	fa02 f303 	lsl.w	r3, r2, r3
 8009f98:	43db      	mvns	r3, r3
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	091b      	lsrs	r3, r3, #4
 8009fd4:	f003 0201 	and.w	r2, r3, #1
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d118      	bne.n	800a028 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	fa02 f303 	lsl.w	r3, r2, r3
 800a004:	43db      	mvns	r3, r3
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4013      	ands	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	08db      	lsrs	r3, r3, #3
 800a012:	f003 0201 	and.w	r2, r3, #1
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	fa02 f303 	lsl.w	r3, r2, r3
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	2b03      	cmp	r3, #3
 800a032:	d017      	beq.n	800a064 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	2203      	movs	r2, #3
 800a040:	fa02 f303 	lsl.w	r3, r2, r3
 800a044:	43db      	mvns	r3, r3
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4013      	ands	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	fa02 f303 	lsl.w	r3, r2, r3
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d123      	bne.n	800a0b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	08da      	lsrs	r2, r3, #3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3208      	adds	r2, #8
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	220f      	movs	r2, #15
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	43db      	mvns	r3, r3
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4013      	ands	r3, r2
 800a092:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	691a      	ldr	r2, [r3, #16]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	08da      	lsrs	r2, r3, #3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3208      	adds	r2, #8
 800a0b2:	6939      	ldr	r1, [r7, #16]
 800a0b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c8:	43db      	mvns	r3, r3
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f003 0203 	and.w	r2, r3, #3
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 80ac 	beq.w	800a252 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0fa:	4b5f      	ldr	r3, [pc, #380]	; (800a278 <HAL_GPIO_Init+0x330>)
 800a0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0fe:	4a5e      	ldr	r2, [pc, #376]	; (800a278 <HAL_GPIO_Init+0x330>)
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	6613      	str	r3, [r2, #96]	; 0x60
 800a106:	4b5c      	ldr	r3, [pc, #368]	; (800a278 <HAL_GPIO_Init+0x330>)
 800a108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	60bb      	str	r3, [r7, #8]
 800a110:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a112:	4a5a      	ldr	r2, [pc, #360]	; (800a27c <HAL_GPIO_Init+0x334>)
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	089b      	lsrs	r3, r3, #2
 800a118:	3302      	adds	r3, #2
 800a11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a11e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	220f      	movs	r2, #15
 800a12a:	fa02 f303 	lsl.w	r3, r2, r3
 800a12e:	43db      	mvns	r3, r3
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	4013      	ands	r3, r2
 800a134:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a13c:	d025      	beq.n	800a18a <HAL_GPIO_Init+0x242>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a4f      	ldr	r2, [pc, #316]	; (800a280 <HAL_GPIO_Init+0x338>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01f      	beq.n	800a186 <HAL_GPIO_Init+0x23e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a4e      	ldr	r2, [pc, #312]	; (800a284 <HAL_GPIO_Init+0x33c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d019      	beq.n	800a182 <HAL_GPIO_Init+0x23a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a4d      	ldr	r2, [pc, #308]	; (800a288 <HAL_GPIO_Init+0x340>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d013      	beq.n	800a17e <HAL_GPIO_Init+0x236>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a4c      	ldr	r2, [pc, #304]	; (800a28c <HAL_GPIO_Init+0x344>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00d      	beq.n	800a17a <HAL_GPIO_Init+0x232>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a4b      	ldr	r2, [pc, #300]	; (800a290 <HAL_GPIO_Init+0x348>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d007      	beq.n	800a176 <HAL_GPIO_Init+0x22e>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a4a      	ldr	r2, [pc, #296]	; (800a294 <HAL_GPIO_Init+0x34c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d101      	bne.n	800a172 <HAL_GPIO_Init+0x22a>
 800a16e:	2306      	movs	r3, #6
 800a170:	e00c      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a172:	2307      	movs	r3, #7
 800a174:	e00a      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a176:	2305      	movs	r3, #5
 800a178:	e008      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a17a:	2304      	movs	r3, #4
 800a17c:	e006      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a17e:	2303      	movs	r3, #3
 800a180:	e004      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a182:	2302      	movs	r3, #2
 800a184:	e002      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <HAL_GPIO_Init+0x244>
 800a18a:	2300      	movs	r3, #0
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	f002 0203 	and.w	r2, r2, #3
 800a192:	0092      	lsls	r2, r2, #2
 800a194:	4093      	lsls	r3, r2
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a19c:	4937      	ldr	r1, [pc, #220]	; (800a27c <HAL_GPIO_Init+0x334>)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	089b      	lsrs	r3, r3, #2
 800a1a2:	3302      	adds	r3, #2
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1aa:	4b3b      	ldr	r3, [pc, #236]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1ce:	4a32      	ldr	r2, [pc, #200]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a1d4:	4b30      	ldr	r3, [pc, #192]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1f8:	4a27      	ldr	r2, [pc, #156]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a1fe:	4b26      	ldr	r3, [pc, #152]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	43db      	mvns	r3, r3
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4013      	ands	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a222:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a228:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	43db      	mvns	r3, r3
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	4013      	ands	r3, r2
 800a236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a24c:	4a12      	ldr	r2, [pc, #72]	; (800a298 <HAL_GPIO_Init+0x350>)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	3301      	adds	r3, #1
 800a256:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	fa22 f303 	lsr.w	r3, r2, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	f47f ae78 	bne.w	8009f58 <HAL_GPIO_Init+0x10>
  }
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40021000 	.word	0x40021000
 800a27c:	40010000 	.word	0x40010000
 800a280:	48000400 	.word	0x48000400
 800a284:	48000800 	.word	0x48000800
 800a288:	48000c00 	.word	0x48000c00
 800a28c:	48001000 	.word	0x48001000
 800a290:	48001400 	.word	0x48001400
 800a294:	48001800 	.word	0x48001800
 800a298:	40010400 	.word	0x40010400

0800a29c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a2aa:	e0cd      	b.n	800a448 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 80c0 	beq.w	800a442 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a2c2:	4a68      	ldr	r2, [pc, #416]	; (800a464 <HAL_GPIO_DeInit+0x1c8>)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	220f      	movs	r2, #15
 800a2da:	fa02 f303 	lsl.w	r3, r2, r3
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a2ea:	d025      	beq.n	800a338 <HAL_GPIO_DeInit+0x9c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a5e      	ldr	r2, [pc, #376]	; (800a468 <HAL_GPIO_DeInit+0x1cc>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d01f      	beq.n	800a334 <HAL_GPIO_DeInit+0x98>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a5d      	ldr	r2, [pc, #372]	; (800a46c <HAL_GPIO_DeInit+0x1d0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d019      	beq.n	800a330 <HAL_GPIO_DeInit+0x94>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a5c      	ldr	r2, [pc, #368]	; (800a470 <HAL_GPIO_DeInit+0x1d4>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d013      	beq.n	800a32c <HAL_GPIO_DeInit+0x90>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a5b      	ldr	r2, [pc, #364]	; (800a474 <HAL_GPIO_DeInit+0x1d8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00d      	beq.n	800a328 <HAL_GPIO_DeInit+0x8c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a5a      	ldr	r2, [pc, #360]	; (800a478 <HAL_GPIO_DeInit+0x1dc>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d007      	beq.n	800a324 <HAL_GPIO_DeInit+0x88>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a59      	ldr	r2, [pc, #356]	; (800a47c <HAL_GPIO_DeInit+0x1e0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d101      	bne.n	800a320 <HAL_GPIO_DeInit+0x84>
 800a31c:	2306      	movs	r3, #6
 800a31e:	e00c      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a320:	2307      	movs	r3, #7
 800a322:	e00a      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a324:	2305      	movs	r3, #5
 800a326:	e008      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a328:	2304      	movs	r3, #4
 800a32a:	e006      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a32c:	2303      	movs	r3, #3
 800a32e:	e004      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a330:	2302      	movs	r3, #2
 800a332:	e002      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <HAL_GPIO_DeInit+0x9e>
 800a338:	2300      	movs	r3, #0
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	f002 0203 	and.w	r2, r2, #3
 800a340:	0092      	lsls	r2, r2, #2
 800a342:	4093      	lsls	r3, r2
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	429a      	cmp	r2, r3
 800a348:	d132      	bne.n	800a3b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a34a:	4b4d      	ldr	r3, [pc, #308]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	43db      	mvns	r3, r3
 800a352:	494b      	ldr	r1, [pc, #300]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a354:	4013      	ands	r3, r2
 800a356:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a358:	4b49      	ldr	r3, [pc, #292]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	43db      	mvns	r3, r3
 800a360:	4947      	ldr	r1, [pc, #284]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a362:	4013      	ands	r3, r2
 800a364:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a366:	4b46      	ldr	r3, [pc, #280]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	43db      	mvns	r3, r3
 800a36e:	4944      	ldr	r1, [pc, #272]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a370:	4013      	ands	r3, r2
 800a372:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800a374:	4b42      	ldr	r3, [pc, #264]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	43db      	mvns	r3, r3
 800a37c:	4940      	ldr	r1, [pc, #256]	; (800a480 <HAL_GPIO_DeInit+0x1e4>)
 800a37e:	4013      	ands	r3, r2
 800a380:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f003 0303 	and.w	r3, r3, #3
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	220f      	movs	r2, #15
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a392:	4a34      	ldr	r2, [pc, #208]	; (800a464 <HAL_GPIO_DeInit+0x1c8>)
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	089b      	lsrs	r3, r3, #2
 800a398:	3302      	adds	r3, #2
 800a39a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	43da      	mvns	r2, r3
 800a3a2:	4830      	ldr	r0, [pc, #192]	; (800a464 <HAL_GPIO_DeInit+0x1c8>)
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	089b      	lsrs	r3, r3, #2
 800a3a8:	400a      	ands	r2, r1
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	2103      	movs	r1, #3
 800a3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	08da      	lsrs	r2, r3, #3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3208      	adds	r2, #8
 800a3cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	220f      	movs	r2, #15
 800a3da:	fa02 f303 	lsl.w	r3, r2, r3
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	08d2      	lsrs	r2, r2, #3
 800a3e4:	4019      	ands	r1, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3208      	adds	r2, #8
 800a3ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	2103      	movs	r1, #3
 800a3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fc:	43db      	mvns	r3, r3
 800a3fe:	401a      	ands	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	2101      	movs	r1, #1
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	fa01 f303 	lsl.w	r3, r1, r3
 800a410:	43db      	mvns	r3, r3
 800a412:	401a      	ands	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	2103      	movs	r1, #3
 800a422:	fa01 f303 	lsl.w	r3, r1, r3
 800a426:	43db      	mvns	r3, r3
 800a428:	401a      	ands	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a432:	2101      	movs	r1, #1
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	fa01 f303 	lsl.w	r3, r1, r3
 800a43a:	43db      	mvns	r3, r3
 800a43c:	401a      	ands	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	3301      	adds	r3, #1
 800a446:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	f47f af2b 	bne.w	800a2ac <HAL_GPIO_DeInit+0x10>
  }
}
 800a456:	bf00      	nop
 800a458:	bf00      	nop
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	40010000 	.word	0x40010000
 800a468:	48000400 	.word	0x48000400
 800a46c:	48000800 	.word	0x48000800
 800a470:	48000c00 	.word	0x48000c00
 800a474:	48001000 	.word	0x48001000
 800a478:	48001400 	.word	0x48001400
 800a47c:	48001800 	.word	0x48001800
 800a480:	40010400 	.word	0x40010400

0800a484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	887b      	ldrh	r3, [r7, #2]
 800a496:	4013      	ands	r3, r2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a49c:	2301      	movs	r3, #1
 800a49e:	73fb      	strb	r3, [r7, #15]
 800a4a0:	e001      	b.n	800a4a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a4c4:	787b      	ldrb	r3, [r7, #1]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a4ca:	887a      	ldrh	r2, [r7, #2]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a4d0:	e002      	b.n	800a4d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a4ee:	4b08      	ldr	r3, [pc, #32]	; (800a510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	88fb      	ldrh	r3, [r7, #6]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d006      	beq.n	800a508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a4fa:	4a05      	ldr	r2, [pc, #20]	; (800a510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f806 	bl	800a514 <HAL_GPIO_EXTI_Callback>
  }
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40010400 	.word	0x40010400

0800a514 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b082      	sub	sp, #8
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e08d      	b.n	800a658 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f8b4 	bl	800a6be <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2224      	movs	r2, #36	; 0x24
 800a55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 0201 	bic.w	r2, r2, #1
 800a56c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a57a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a58a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d107      	bne.n	800a5a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689a      	ldr	r2, [r3, #8]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5a0:	609a      	str	r2, [r3, #8]
 800a5a2:	e006      	b.n	800a5b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a5b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d108      	bne.n	800a5cc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5c8:	605a      	str	r2, [r3, #4]
 800a5ca:	e007      	b.n	800a5dc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	6812      	ldr	r2, [r2, #0]
 800a5e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691a      	ldr	r2, [r3, #16]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69d9      	ldr	r1, [r3, #28]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1a      	ldr	r2, [r3, #32]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f042 0201 	orr.w	r2, r2, #1
 800a638:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e021      	b.n	800a6b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2224      	movs	r2, #36	; 0x24
 800a676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 0201 	bic.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f821 	bl	800a6d2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b083      	sub	sp, #12
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af02      	add	r7, sp, #8
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	817b      	strh	r3, [r7, #10]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	813b      	strh	r3, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	f040 80f9 	bne.w	800a902 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <HAL_I2C_Mem_Write+0x34>
 800a716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d105      	bne.n	800a728 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a722:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e0ed      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d101      	bne.n	800a736 <HAL_I2C_Mem_Write+0x4e>
 800a732:	2302      	movs	r3, #2
 800a734:	e0e6      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a73e:	f7ff fa63 	bl	8009c08 <HAL_GetTick>
 800a742:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	2319      	movs	r3, #25
 800a74a:	2201      	movs	r2, #1
 800a74c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 fadd 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e0d1      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2221      	movs	r2, #33	; 0x21
 800a764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2240      	movs	r2, #64	; 0x40
 800a76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a3a      	ldr	r2, [r7, #32]
 800a77a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a788:	88f8      	ldrh	r0, [r7, #6]
 800a78a:	893a      	ldrh	r2, [r7, #8]
 800a78c:	8979      	ldrh	r1, [r7, #10]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	4603      	mov	r3, r0
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 f9ed 	bl	800ab78 <I2C_RequestMemoryWrite>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d005      	beq.n	800a7b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e0a9      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	2bff      	cmp	r3, #255	; 0xff
 800a7b8:	d90e      	bls.n	800a7d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	22ff      	movs	r2, #255	; 0xff
 800a7be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	8979      	ldrh	r1, [r7, #10]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 fc57 	bl	800b084 <I2C_TransferConfig>
 800a7d6:	e00f      	b.n	800a7f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	8979      	ldrh	r1, [r7, #10]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 fc46 	bl	800b084 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fad6 	bl	800adae <I2C_WaitOnTXISFlagUntilTimeout>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e07b      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a826:	b29b      	uxth	r3, r3
 800a828:	3b01      	subs	r3, #1
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a834:	3b01      	subs	r3, #1
 800a836:	b29a      	uxth	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d034      	beq.n	800a8b0 <HAL_I2C_Mem_Write+0x1c8>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d130      	bne.n	800a8b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	2200      	movs	r2, #0
 800a856:	2180      	movs	r1, #128	; 0x80
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 fa59 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e04d      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	2bff      	cmp	r3, #255	; 0xff
 800a870:	d90e      	bls.n	800a890 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	8979      	ldrh	r1, [r7, #10]
 800a880:	2300      	movs	r3, #0
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 fbfb 	bl	800b084 <I2C_TransferConfig>
 800a88e:	e00f      	b.n	800a8b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a894:	b29a      	uxth	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	8979      	ldrh	r1, [r7, #10]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 fbea 	bl	800b084 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d19e      	bne.n	800a7f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fabc 	bl	800ae3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e01a      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6859      	ldr	r1, [r3, #4]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <HAL_I2C_Mem_Write+0x224>)
 800a8e2:	400b      	ands	r3, r1
 800a8e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	e000      	b.n	800a904 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a902:	2302      	movs	r3, #2
  }
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	fe00e800 	.word	0xfe00e800

0800a910 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af02      	add	r7, sp, #8
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	461a      	mov	r2, r3
 800a91e:	4603      	mov	r3, r0
 800a920:	817b      	strh	r3, [r7, #10]
 800a922:	460b      	mov	r3, r1
 800a924:	813b      	strh	r3, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b20      	cmp	r3, #32
 800a934:	f040 80fd 	bne.w	800ab32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <HAL_I2C_Mem_Read+0x34>
 800a93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	d105      	bne.n	800a950 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a94a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e0f1      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_I2C_Mem_Read+0x4e>
 800a95a:	2302      	movs	r3, #2
 800a95c:	e0ea      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a966:	f7ff f94f 	bl	8009c08 <HAL_GetTick>
 800a96a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2319      	movs	r3, #25
 800a972:	2201      	movs	r2, #1
 800a974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f9c9 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e0d5      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2222      	movs	r2, #34	; 0x22
 800a98c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2240      	movs	r2, #64	; 0x40
 800a994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9b0:	88f8      	ldrh	r0, [r7, #6]
 800a9b2:	893a      	ldrh	r2, [r7, #8]
 800a9b4:	8979      	ldrh	r1, [r7, #10]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4603      	mov	r3, r0
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f92d 	bl	800ac20 <I2C_RequestMemoryRead>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e0ad      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	2bff      	cmp	r3, #255	; 0xff
 800a9e0:	d90e      	bls.n	800aa00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	22ff      	movs	r2, #255	; 0xff
 800a9e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	8979      	ldrh	r1, [r7, #10]
 800a9f0:	4b52      	ldr	r3, [pc, #328]	; (800ab3c <HAL_I2C_Mem_Read+0x22c>)
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 fb43 	bl	800b084 <I2C_TransferConfig>
 800a9fe:	e00f      	b.n	800aa20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	8979      	ldrh	r1, [r7, #10]
 800aa12:	4b4a      	ldr	r3, [pc, #296]	; (800ab3c <HAL_I2C_Mem_Read+0x22c>)
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fb32 	bl	800b084 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	2200      	movs	r2, #0
 800aa28:	2104      	movs	r1, #4
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f970 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e07c      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	b2d2      	uxtb	r2, r2
 800aa46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d034      	beq.n	800aae0 <HAL_I2C_Mem_Read+0x1d0>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d130      	bne.n	800aae0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa84:	2200      	movs	r2, #0
 800aa86:	2180      	movs	r1, #128	; 0x80
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 f941 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e04d      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2bff      	cmp	r3, #255	; 0xff
 800aaa0:	d90e      	bls.n	800aac0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	22ff      	movs	r2, #255	; 0xff
 800aaa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	8979      	ldrh	r1, [r7, #10]
 800aab0:	2300      	movs	r3, #0
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 fae3 	bl	800b084 <I2C_TransferConfig>
 800aabe:	e00f      	b.n	800aae0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	8979      	ldrh	r1, [r7, #10]
 800aad2:	2300      	movs	r3, #0
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 fad2 	bl	800b084 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d19a      	bne.n	800aa20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f9a4 	bl	800ae3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e01a      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2220      	movs	r2, #32
 800ab04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6859      	ldr	r1, [r3, #4]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <HAL_I2C_Mem_Read+0x230>)
 800ab12:	400b      	ands	r3, r1
 800ab14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e000      	b.n	800ab34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ab32:	2302      	movs	r3, #2
  }
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	80002400 	.word	0x80002400
 800ab40:	fe00e800 	.word	0xfe00e800

0800ab44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab52:	b2db      	uxtb	r3, r3
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af02      	add	r7, sp, #8
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	4608      	mov	r0, r1
 800ab82:	4611      	mov	r1, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	817b      	strh	r3, [r7, #10]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	813b      	strh	r3, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	8979      	ldrh	r1, [r7, #10]
 800ab98:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <I2C_RequestMemoryWrite+0xa4>)
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fa6f 	bl	800b084 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aba6:	69fa      	ldr	r2, [r7, #28]
 800aba8:	69b9      	ldr	r1, [r7, #24]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f8ff 	bl	800adae <I2C_WaitOnTXISFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e02c      	b.n	800ac14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abba:	88fb      	ldrh	r3, [r7, #6]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d105      	bne.n	800abcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800abc0:	893b      	ldrh	r3, [r7, #8]
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	629a      	str	r2, [r3, #40]	; 0x28
 800abca:	e015      	b.n	800abf8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800abcc:	893b      	ldrh	r3, [r7, #8]
 800abce:	0a1b      	lsrs	r3, r3, #8
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abda:	69fa      	ldr	r2, [r7, #28]
 800abdc:	69b9      	ldr	r1, [r7, #24]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f8e5 	bl	800adae <I2C_WaitOnTXISFlagUntilTimeout>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e012      	b.n	800ac14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800abee:	893b      	ldrh	r3, [r7, #8]
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	2200      	movs	r2, #0
 800ac00:	2180      	movs	r1, #128	; 0x80
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f884 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e000      	b.n	800ac14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	80002000 	.word	0x80002000

0800ac20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	4608      	mov	r0, r1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4603      	mov	r3, r0
 800ac30:	817b      	strh	r3, [r7, #10]
 800ac32:	460b      	mov	r3, r1
 800ac34:	813b      	strh	r3, [r7, #8]
 800ac36:	4613      	mov	r3, r2
 800ac38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	8979      	ldrh	r1, [r7, #10]
 800ac40:	4b20      	ldr	r3, [pc, #128]	; (800acc4 <I2C_RequestMemoryRead+0xa4>)
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	2300      	movs	r3, #0
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 fa1c 	bl	800b084 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac4c:	69fa      	ldr	r2, [r7, #28]
 800ac4e:	69b9      	ldr	r1, [r7, #24]
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f8ac 	bl	800adae <I2C_WaitOnTXISFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e02c      	b.n	800acba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d105      	bne.n	800ac72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ac66:	893b      	ldrh	r3, [r7, #8]
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	629a      	str	r2, [r3, #40]	; 0x28
 800ac70:	e015      	b.n	800ac9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ac72:	893b      	ldrh	r3, [r7, #8]
 800ac74:	0a1b      	lsrs	r3, r3, #8
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac80:	69fa      	ldr	r2, [r7, #28]
 800ac82:	69b9      	ldr	r1, [r7, #24]
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 f892 	bl	800adae <I2C_WaitOnTXISFlagUntilTimeout>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e012      	b.n	800acba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ac94:	893b      	ldrh	r3, [r7, #8]
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	2200      	movs	r2, #0
 800aca6:	2140      	movs	r1, #64	; 0x40
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 f831 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e000      	b.n	800acba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	80002000 	.word	0x80002000

0800acc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d103      	bne.n	800ace6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d007      	beq.n	800ad04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	699a      	ldr	r2, [r3, #24]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0201 	orr.w	r2, r2, #1
 800ad02:	619a      	str	r2, [r3, #24]
  }
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad20:	e031      	b.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad28:	d02d      	beq.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad2a:	f7fe ff6d 	bl	8009c08 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d302      	bcc.n	800ad40 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d122      	bne.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	bf0c      	ite	eq
 800ad50:	2301      	moveq	r3, #1
 800ad52:	2300      	movne	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d113      	bne.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad62:	f043 0220 	orr.w	r2, r3, #32
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e00f      	b.n	800ada6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	4013      	ands	r3, r2
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	bf0c      	ite	eq
 800ad96:	2301      	moveq	r3, #1
 800ad98:	2300      	movne	r3, #0
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d0be      	beq.n	800ad22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800adba:	e033      	b.n	800ae24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f87f 	bl	800aec4 <I2C_IsErrorOccurred>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e031      	b.n	800ae34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add6:	d025      	beq.n	800ae24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add8:	f7fe ff16 	bl	8009c08 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d302      	bcc.n	800adee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d11a      	bne.n	800ae24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d013      	beq.n	800ae24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae00:	f043 0220 	orr.w	r2, r3, #32
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e007      	b.n	800ae34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d1c4      	bne.n	800adbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae48:	e02f      	b.n	800aeaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	68b9      	ldr	r1, [r7, #8]
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f000 f838 	bl	800aec4 <I2C_IsErrorOccurred>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e02d      	b.n	800aeba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae5e:	f7fe fed3 	bl	8009c08 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d302      	bcc.n	800ae74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d11a      	bne.n	800aeaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	d013      	beq.n	800aeaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae86:	f043 0220 	orr.w	r2, r3, #32
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2220      	movs	r2, #32
 800ae92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e007      	b.n	800aeba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b20      	cmp	r3, #32
 800aeb6:	d1c8      	bne.n	800ae4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08a      	sub	sp, #40	; 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d068      	beq.n	800afc2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2210      	movs	r2, #16
 800aef6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aef8:	e049      	b.n	800af8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d045      	beq.n	800af8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af02:	f7fe fe81 	bl	8009c08 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d302      	bcc.n	800af18 <I2C_IsErrorOccurred+0x54>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d13a      	bne.n	800af8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af3a:	d121      	bne.n	800af80 <I2C_IsErrorOccurred+0xbc>
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af42:	d01d      	beq.n	800af80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800af44:	7cfb      	ldrb	r3, [r7, #19]
 800af46:	2b20      	cmp	r3, #32
 800af48:	d01a      	beq.n	800af80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800af5a:	f7fe fe55 	bl	8009c08 <HAL_GetTick>
 800af5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af60:	e00e      	b.n	800af80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800af62:	f7fe fe51 	bl	8009c08 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b19      	cmp	r3, #25
 800af6e:	d907      	bls.n	800af80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	f043 0320 	orr.w	r3, r3, #32
 800af76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800af7e:	e006      	b.n	800af8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	d1e9      	bne.n	800af62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b20      	cmp	r3, #32
 800af9a:	d003      	beq.n	800afa4 <I2C_IsErrorOccurred+0xe0>
 800af9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0aa      	beq.n	800aefa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800afa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d103      	bne.n	800afb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2220      	movs	r2, #32
 800afb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	f043 0304 	orr.w	r3, r3, #4
 800afba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00b      	beq.n	800afec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	f043 0301 	orr.w	r3, r3, #1
 800afda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afe4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00b      	beq.n	800b00e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	f043 0308 	orr.w	r3, r3, #8
 800affc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b006:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	f043 0302 	orr.w	r3, r3, #2
 800b01e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b034:	2b00      	cmp	r3, #0
 800b036:	d01c      	beq.n	800b072 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7ff fe45 	bl	800acc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6859      	ldr	r1, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b0d      	ldr	r3, [pc, #52]	; (800b080 <I2C_IsErrorOccurred+0x1bc>)
 800b04a:	400b      	ands	r3, r1
 800b04c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	431a      	orrs	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b076:	4618      	mov	r0, r3
 800b078:	3728      	adds	r7, #40	; 0x28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	fe00e800 	.word	0xfe00e800

0800b084 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b084:	b480      	push	{r7}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	607b      	str	r3, [r7, #4]
 800b08e:	460b      	mov	r3, r1
 800b090:	817b      	strh	r3, [r7, #10]
 800b092:	4613      	mov	r3, r2
 800b094:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b096:	897b      	ldrh	r3, [r7, #10]
 800b098:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b09c:	7a7b      	ldrb	r3, [r7, #9]
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	0d5b      	lsrs	r3, r3, #21
 800b0be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <I2C_TransferConfig+0x60>)
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	43db      	mvns	r3, r3
 800b0c8:	ea02 0103 	and.w	r1, r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b0d6:	bf00      	nop
 800b0d8:	371c      	adds	r7, #28
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	03ff63ff 	.word	0x03ff63ff

0800b0e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	d138      	bne.n	800b170 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b108:	2302      	movs	r3, #2
 800b10a:	e032      	b.n	800b172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2224      	movs	r2, #36	; 0x24
 800b118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 0201 	bic.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b13a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6819      	ldr	r1, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0201 	orr.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e000      	b.n	800b172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b170:	2302      	movs	r3, #2
  }
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b17e:	b480      	push	{r7}
 800b180:	b085      	sub	sp, #20
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b20      	cmp	r3, #32
 800b192:	d139      	bne.n	800b208 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d101      	bne.n	800b1a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e033      	b.n	800b20a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2224      	movs	r2, #36	; 0x24
 800b1ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0201 	bic.w	r2, r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b1d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	021b      	lsls	r3, r3, #8
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0201 	orr.w	r2, r2, #1
 800b1f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	e000      	b.n	800b20a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b208:	2302      	movs	r3, #2
  }
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b21c:	4b04      	ldr	r3, [pc, #16]	; (800b230 <HAL_PWREx_GetVoltageRange+0x18>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b224:	4618      	mov	r0, r3
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	40007000 	.word	0x40007000

0800b234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b242:	d130      	bne.n	800b2a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b244:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b250:	d038      	beq.n	800b2c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b252:	4b20      	ldr	r3, [pc, #128]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b25c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b260:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b262:	4b1d      	ldr	r3, [pc, #116]	; (800b2d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2232      	movs	r2, #50	; 0x32
 800b268:	fb02 f303 	mul.w	r3, r2, r3
 800b26c:	4a1b      	ldr	r2, [pc, #108]	; (800b2dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	0c9b      	lsrs	r3, r3, #18
 800b274:	3301      	adds	r3, #1
 800b276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b278:	e002      	b.n	800b280 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b280:	4b14      	ldr	r3, [pc, #80]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b28c:	d102      	bne.n	800b294 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1f2      	bne.n	800b27a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b294:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2a0:	d110      	bne.n	800b2c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e00f      	b.n	800b2c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b2a6:	4b0b      	ldr	r3, [pc, #44]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b2:	d007      	beq.n	800b2c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2bc:	4a05      	ldr	r2, [pc, #20]	; (800b2d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	40007000 	.word	0x40007000
 800b2d8:	2000019c 	.word	0x2000019c
 800b2dc:	431bde83 	.word	0x431bde83

0800b2e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e3ca      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2f2:	4b97      	ldr	r3, [pc, #604]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f003 030c 	and.w	r3, r3, #12
 800b2fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2fc:	4b94      	ldr	r3, [pc, #592]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 0310 	and.w	r3, r3, #16
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80e4 	beq.w	800b4dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d007      	beq.n	800b32a <HAL_RCC_OscConfig+0x4a>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b0c      	cmp	r3, #12
 800b31e:	f040 808b 	bne.w	800b438 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b01      	cmp	r3, #1
 800b326:	f040 8087 	bne.w	800b438 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b32a:	4b89      	ldr	r3, [pc, #548]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d005      	beq.n	800b342 <HAL_RCC_OscConfig+0x62>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e3a2      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a1a      	ldr	r2, [r3, #32]
 800b346:	4b82      	ldr	r3, [pc, #520]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0308 	and.w	r3, r3, #8
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <HAL_RCC_OscConfig+0x7c>
 800b352:	4b7f      	ldr	r3, [pc, #508]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b35a:	e005      	b.n	800b368 <HAL_RCC_OscConfig+0x88>
 800b35c:	4b7c      	ldr	r3, [pc, #496]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b35e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b362:	091b      	lsrs	r3, r3, #4
 800b364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b368:	4293      	cmp	r3, r2
 800b36a:	d223      	bcs.n	800b3b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	4618      	mov	r0, r3
 800b372:	f000 fd55 	bl	800be20 <RCC_SetFlashLatencyFromMSIRange>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e383      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b380:	4b73      	ldr	r3, [pc, #460]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a72      	ldr	r2, [pc, #456]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b386:	f043 0308 	orr.w	r3, r3, #8
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	4b70      	ldr	r3, [pc, #448]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	496d      	ldr	r1, [pc, #436]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b39e:	4b6c      	ldr	r3, [pc, #432]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	021b      	lsls	r3, r3, #8
 800b3ac:	4968      	ldr	r1, [pc, #416]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	604b      	str	r3, [r1, #4]
 800b3b2:	e025      	b.n	800b400 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b3b4:	4b66      	ldr	r3, [pc, #408]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a65      	ldr	r2, [pc, #404]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3ba:	f043 0308 	orr.w	r3, r3, #8
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	4b63      	ldr	r3, [pc, #396]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a1b      	ldr	r3, [r3, #32]
 800b3cc:	4960      	ldr	r1, [pc, #384]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b3d2:	4b5f      	ldr	r3, [pc, #380]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	69db      	ldr	r3, [r3, #28]
 800b3de:	021b      	lsls	r3, r3, #8
 800b3e0:	495b      	ldr	r1, [pc, #364]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fd15 	bl	800be20 <RCC_SetFlashLatencyFromMSIRange>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e343      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b400:	f000 fc4a 	bl	800bc98 <HAL_RCC_GetSysClockFreq>
 800b404:	4602      	mov	r2, r0
 800b406:	4b52      	ldr	r3, [pc, #328]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	091b      	lsrs	r3, r3, #4
 800b40c:	f003 030f 	and.w	r3, r3, #15
 800b410:	4950      	ldr	r1, [pc, #320]	; (800b554 <HAL_RCC_OscConfig+0x274>)
 800b412:	5ccb      	ldrb	r3, [r1, r3]
 800b414:	f003 031f 	and.w	r3, r3, #31
 800b418:	fa22 f303 	lsr.w	r3, r2, r3
 800b41c:	4a4e      	ldr	r2, [pc, #312]	; (800b558 <HAL_RCC_OscConfig+0x278>)
 800b41e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b420:	4b4e      	ldr	r3, [pc, #312]	; (800b55c <HAL_RCC_OscConfig+0x27c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	f7fe fb9f 	bl	8009b68 <HAL_InitTick>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d052      	beq.n	800b4da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	e327      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d032      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b440:	4b43      	ldr	r3, [pc, #268]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a42      	ldr	r2, [pc, #264]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b44c:	f7fe fbdc 	bl	8009c08 <HAL_GetTick>
 800b450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b452:	e008      	b.n	800b466 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b454:	f7fe fbd8 	bl	8009c08 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d901      	bls.n	800b466 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e310      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b466:	4b3a      	ldr	r3, [pc, #232]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d0f0      	beq.n	800b454 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b472:	4b37      	ldr	r3, [pc, #220]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a36      	ldr	r2, [pc, #216]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b478:	f043 0308 	orr.w	r3, r3, #8
 800b47c:	6013      	str	r3, [r2, #0]
 800b47e:	4b34      	ldr	r3, [pc, #208]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	4931      	ldr	r1, [pc, #196]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b48c:	4313      	orrs	r3, r2
 800b48e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b490:	4b2f      	ldr	r3, [pc, #188]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	492c      	ldr	r1, [pc, #176]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	604b      	str	r3, [r1, #4]
 800b4a4:	e01a      	b.n	800b4dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b4a6:	4b2a      	ldr	r3, [pc, #168]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a29      	ldr	r2, [pc, #164]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b4ac:	f023 0301 	bic.w	r3, r3, #1
 800b4b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b4b2:	f7fe fba9 	bl	8009c08 <HAL_GetTick>
 800b4b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b4b8:	e008      	b.n	800b4cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b4ba:	f7fe fba5 	bl	8009c08 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d901      	bls.n	800b4cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e2dd      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b4cc:	4b20      	ldr	r3, [pc, #128]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1f0      	bne.n	800b4ba <HAL_RCC_OscConfig+0x1da>
 800b4d8:	e000      	b.n	800b4dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b4da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d074      	beq.n	800b5d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	2b08      	cmp	r3, #8
 800b4ec:	d005      	beq.n	800b4fa <HAL_RCC_OscConfig+0x21a>
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b0c      	cmp	r3, #12
 800b4f2:	d10e      	bne.n	800b512 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d10b      	bne.n	800b512 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4fa:	4b15      	ldr	r3, [pc, #84]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d064      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x2f0>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d160      	bne.n	800b5d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e2ba      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b51a:	d106      	bne.n	800b52a <HAL_RCC_OscConfig+0x24a>
 800b51c:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a0b      	ldr	r2, [pc, #44]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b526:	6013      	str	r3, [r2, #0]
 800b528:	e026      	b.n	800b578 <HAL_RCC_OscConfig+0x298>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b532:	d115      	bne.n	800b560 <HAL_RCC_OscConfig+0x280>
 800b534:	4b06      	ldr	r3, [pc, #24]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a05      	ldr	r2, [pc, #20]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b53a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	4b03      	ldr	r3, [pc, #12]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a02      	ldr	r2, [pc, #8]	; (800b550 <HAL_RCC_OscConfig+0x270>)
 800b546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	e014      	b.n	800b578 <HAL_RCC_OscConfig+0x298>
 800b54e:	bf00      	nop
 800b550:	40021000 	.word	0x40021000
 800b554:	08012e60 	.word	0x08012e60
 800b558:	2000019c 	.word	0x2000019c
 800b55c:	200001a0 	.word	0x200001a0
 800b560:	4ba0      	ldr	r3, [pc, #640]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a9f      	ldr	r2, [pc, #636]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	4b9d      	ldr	r3, [pc, #628]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a9c      	ldr	r2, [pc, #624]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d013      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b580:	f7fe fb42 	bl	8009c08 <HAL_GetTick>
 800b584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b586:	e008      	b.n	800b59a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b588:	f7fe fb3e 	bl	8009c08 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b64      	cmp	r3, #100	; 0x64
 800b594:	d901      	bls.n	800b59a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e276      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b59a:	4b92      	ldr	r3, [pc, #584]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0f0      	beq.n	800b588 <HAL_RCC_OscConfig+0x2a8>
 800b5a6:	e014      	b.n	800b5d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a8:	f7fe fb2e 	bl	8009c08 <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5b0:	f7fe fb2a 	bl	8009c08 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b64      	cmp	r3, #100	; 0x64
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e262      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b5c2:	4b88      	ldr	r3, [pc, #544]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f0      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x2d0>
 800b5ce:	e000      	b.n	800b5d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 0302 	and.w	r3, r3, #2
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d060      	beq.n	800b6a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d005      	beq.n	800b5f0 <HAL_RCC_OscConfig+0x310>
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	2b0c      	cmp	r3, #12
 800b5e8:	d119      	bne.n	800b61e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d116      	bne.n	800b61e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5f0:	4b7c      	ldr	r3, [pc, #496]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d005      	beq.n	800b608 <HAL_RCC_OscConfig+0x328>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e23f      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b608:	4b76      	ldr	r3, [pc, #472]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	061b      	lsls	r3, r3, #24
 800b616:	4973      	ldr	r1, [pc, #460]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b618:	4313      	orrs	r3, r2
 800b61a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b61c:	e040      	b.n	800b6a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d023      	beq.n	800b66e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b626:	4b6f      	ldr	r3, [pc, #444]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a6e      	ldr	r2, [pc, #440]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b62c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b632:	f7fe fae9 	bl	8009c08 <HAL_GetTick>
 800b636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b638:	e008      	b.n	800b64c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b63a:	f7fe fae5 	bl	8009c08 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b02      	cmp	r3, #2
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e21d      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b64c:	4b65      	ldr	r3, [pc, #404]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b658:	4b62      	ldr	r3, [pc, #392]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	061b      	lsls	r3, r3, #24
 800b666:	495f      	ldr	r1, [pc, #380]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	604b      	str	r3, [r1, #4]
 800b66c:	e018      	b.n	800b6a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b66e:	4b5d      	ldr	r3, [pc, #372]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a5c      	ldr	r2, [pc, #368]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b67a:	f7fe fac5 	bl	8009c08 <HAL_GetTick>
 800b67e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b680:	e008      	b.n	800b694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b682:	f7fe fac1 	bl	8009c08 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d901      	bls.n	800b694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e1f9      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b694:	4b53      	ldr	r3, [pc, #332]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f0      	bne.n	800b682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0308 	and.w	r3, r3, #8
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d03c      	beq.n	800b726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d01c      	beq.n	800b6ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6b4:	4b4b      	ldr	r3, [pc, #300]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6ba:	4a4a      	ldr	r2, [pc, #296]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b6bc:	f043 0301 	orr.w	r3, r3, #1
 800b6c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6c4:	f7fe faa0 	bl	8009c08 <HAL_GetTick>
 800b6c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b6ca:	e008      	b.n	800b6de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6cc:	f7fe fa9c 	bl	8009c08 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d901      	bls.n	800b6de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	e1d4      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b6de:	4b41      	ldr	r3, [pc, #260]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b6e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0ef      	beq.n	800b6cc <HAL_RCC_OscConfig+0x3ec>
 800b6ec:	e01b      	b.n	800b726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6ee:	4b3d      	ldr	r3, [pc, #244]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b6f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6f4:	4a3b      	ldr	r2, [pc, #236]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b6f6:	f023 0301 	bic.w	r3, r3, #1
 800b6fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6fe:	f7fe fa83 	bl	8009c08 <HAL_GetTick>
 800b702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b704:	e008      	b.n	800b718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b706:	f7fe fa7f 	bl	8009c08 <HAL_GetTick>
 800b70a:	4602      	mov	r2, r0
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	2b02      	cmp	r3, #2
 800b712:	d901      	bls.n	800b718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	e1b7      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b718:	4b32      	ldr	r3, [pc, #200]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b71e:	f003 0302 	and.w	r3, r3, #2
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1ef      	bne.n	800b706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0304 	and.w	r3, r3, #4
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80a6 	beq.w	800b880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b734:	2300      	movs	r3, #0
 800b736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b738:	4b2a      	ldr	r3, [pc, #168]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b73c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10d      	bne.n	800b760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b744:	4b27      	ldr	r3, [pc, #156]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b748:	4a26      	ldr	r2, [pc, #152]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b74a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b74e:	6593      	str	r3, [r2, #88]	; 0x58
 800b750:	4b24      	ldr	r3, [pc, #144]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b758:	60bb      	str	r3, [r7, #8]
 800b75a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b75c:	2301      	movs	r3, #1
 800b75e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b760:	4b21      	ldr	r3, [pc, #132]	; (800b7e8 <HAL_RCC_OscConfig+0x508>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d118      	bne.n	800b79e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b76c:	4b1e      	ldr	r3, [pc, #120]	; (800b7e8 <HAL_RCC_OscConfig+0x508>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a1d      	ldr	r2, [pc, #116]	; (800b7e8 <HAL_RCC_OscConfig+0x508>)
 800b772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b778:	f7fe fa46 	bl	8009c08 <HAL_GetTick>
 800b77c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b77e:	e008      	b.n	800b792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b780:	f7fe fa42 	bl	8009c08 <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d901      	bls.n	800b792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e17a      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b792:	4b15      	ldr	r3, [pc, #84]	; (800b7e8 <HAL_RCC_OscConfig+0x508>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0f0      	beq.n	800b780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d108      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x4d8>
 800b7a6:	4b0f      	ldr	r3, [pc, #60]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ac:	4a0d      	ldr	r2, [pc, #52]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b7b6:	e029      	b.n	800b80c <HAL_RCC_OscConfig+0x52c>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	2b05      	cmp	r3, #5
 800b7be:	d115      	bne.n	800b7ec <HAL_RCC_OscConfig+0x50c>
 800b7c0:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c6:	4a07      	ldr	r2, [pc, #28]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b7c8:	f043 0304 	orr.w	r3, r3, #4
 800b7cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b7d0:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d6:	4a03      	ldr	r2, [pc, #12]	; (800b7e4 <HAL_RCC_OscConfig+0x504>)
 800b7d8:	f043 0301 	orr.w	r3, r3, #1
 800b7dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b7e0:	e014      	b.n	800b80c <HAL_RCC_OscConfig+0x52c>
 800b7e2:	bf00      	nop
 800b7e4:	40021000 	.word	0x40021000
 800b7e8:	40007000 	.word	0x40007000
 800b7ec:	4b9c      	ldr	r3, [pc, #624]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f2:	4a9b      	ldr	r2, [pc, #620]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b7f4:	f023 0301 	bic.w	r3, r3, #1
 800b7f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b7fc:	4b98      	ldr	r3, [pc, #608]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b802:	4a97      	ldr	r2, [pc, #604]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b804:	f023 0304 	bic.w	r3, r3, #4
 800b808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d016      	beq.n	800b842 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b814:	f7fe f9f8 	bl	8009c08 <HAL_GetTick>
 800b818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b81a:	e00a      	b.n	800b832 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b81c:	f7fe f9f4 	bl	8009c08 <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d901      	bls.n	800b832 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e12a      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b832:	4b8b      	ldr	r3, [pc, #556]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b838:	f003 0302 	and.w	r3, r3, #2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0ed      	beq.n	800b81c <HAL_RCC_OscConfig+0x53c>
 800b840:	e015      	b.n	800b86e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b842:	f7fe f9e1 	bl	8009c08 <HAL_GetTick>
 800b846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b848:	e00a      	b.n	800b860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b84a:	f7fe f9dd 	bl	8009c08 <HAL_GetTick>
 800b84e:	4602      	mov	r2, r0
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	f241 3288 	movw	r2, #5000	; 0x1388
 800b858:	4293      	cmp	r3, r2
 800b85a:	d901      	bls.n	800b860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b85c:	2303      	movs	r3, #3
 800b85e:	e113      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b860:	4b7f      	ldr	r3, [pc, #508]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b866:	f003 0302 	and.w	r3, r3, #2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1ed      	bne.n	800b84a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b86e:	7ffb      	ldrb	r3, [r7, #31]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d105      	bne.n	800b880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b874:	4b7a      	ldr	r3, [pc, #488]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b878:	4a79      	ldr	r2, [pc, #484]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b87a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b87e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 80fe 	beq.w	800ba86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88e:	2b02      	cmp	r3, #2
 800b890:	f040 80d0 	bne.w	800ba34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b894:	4b72      	ldr	r3, [pc, #456]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f003 0203 	and.w	r2, r3, #3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d130      	bne.n	800b90a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d127      	bne.n	800b90a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d11f      	bne.n	800b90a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b8d4:	2a07      	cmp	r2, #7
 800b8d6:	bf14      	ite	ne
 800b8d8:	2201      	movne	r2, #1
 800b8da:	2200      	moveq	r2, #0
 800b8dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d113      	bne.n	800b90a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ec:	085b      	lsrs	r3, r3, #1
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d109      	bne.n	800b90a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b900:	085b      	lsrs	r3, r3, #1
 800b902:	3b01      	subs	r3, #1
 800b904:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b906:	429a      	cmp	r2, r3
 800b908:	d06e      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b0c      	cmp	r3, #12
 800b90e:	d069      	beq.n	800b9e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b910:	4b53      	ldr	r3, [pc, #332]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d105      	bne.n	800b928 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b91c:	4b50      	ldr	r3, [pc, #320]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e0ad      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b92c:	4b4c      	ldr	r3, [pc, #304]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a4b      	ldr	r2, [pc, #300]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b936:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b938:	f7fe f966 	bl	8009c08 <HAL_GetTick>
 800b93c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b93e:	e008      	b.n	800b952 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b940:	f7fe f962 	bl	8009c08 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d901      	bls.n	800b952 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e09a      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b952:	4b43      	ldr	r3, [pc, #268]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1f0      	bne.n	800b940 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b95e:	4b40      	ldr	r3, [pc, #256]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <HAL_RCC_OscConfig+0x784>)
 800b964:	4013      	ands	r3, r2
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b96e:	3a01      	subs	r2, #1
 800b970:	0112      	lsls	r2, r2, #4
 800b972:	4311      	orrs	r1, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b978:	0212      	lsls	r2, r2, #8
 800b97a:	4311      	orrs	r1, r2
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b980:	0852      	lsrs	r2, r2, #1
 800b982:	3a01      	subs	r2, #1
 800b984:	0552      	lsls	r2, r2, #21
 800b986:	4311      	orrs	r1, r2
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b98c:	0852      	lsrs	r2, r2, #1
 800b98e:	3a01      	subs	r2, #1
 800b990:	0652      	lsls	r2, r2, #25
 800b992:	4311      	orrs	r1, r2
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b998:	0912      	lsrs	r2, r2, #4
 800b99a:	0452      	lsls	r2, r2, #17
 800b99c:	430a      	orrs	r2, r1
 800b99e:	4930      	ldr	r1, [pc, #192]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b9a4:	4b2e      	ldr	r3, [pc, #184]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a2d      	ldr	r2, [pc, #180]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b9bc:	f7fe f924 	bl	8009c08 <HAL_GetTick>
 800b9c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9c2:	e008      	b.n	800b9d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c4:	f7fe f920 	bl	8009c08 <HAL_GetTick>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d901      	bls.n	800b9d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e058      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9d6:	4b22      	ldr	r3, [pc, #136]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0f0      	beq.n	800b9c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b9e2:	e050      	b.n	800ba86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e04f      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9e8:	4b1d      	ldr	r3, [pc, #116]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d148      	bne.n	800ba86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a19      	ldr	r2, [pc, #100]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800b9fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ba00:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	4a16      	ldr	r2, [pc, #88]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800ba06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ba0c:	f7fe f8fc 	bl	8009c08 <HAL_GetTick>
 800ba10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba12:	e008      	b.n	800ba26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba14:	f7fe f8f8 	bl	8009c08 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d901      	bls.n	800ba26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e030      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba26:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f0      	beq.n	800ba14 <HAL_RCC_OscConfig+0x734>
 800ba32:	e028      	b.n	800ba86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b0c      	cmp	r3, #12
 800ba38:	d023      	beq.n	800ba82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba3a:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a08      	ldr	r2, [pc, #32]	; (800ba60 <HAL_RCC_OscConfig+0x780>)
 800ba40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba46:	f7fe f8df 	bl	8009c08 <HAL_GetTick>
 800ba4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba4c:	e00c      	b.n	800ba68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba4e:	f7fe f8db 	bl	8009c08 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d905      	bls.n	800ba68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e013      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
 800ba60:	40021000 	.word	0x40021000
 800ba64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba68:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <HAL_RCC_OscConfig+0x7b0>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1ec      	bne.n	800ba4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ba74:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <HAL_RCC_OscConfig+0x7b0>)
 800ba76:	68da      	ldr	r2, [r3, #12]
 800ba78:	4905      	ldr	r1, [pc, #20]	; (800ba90 <HAL_RCC_OscConfig+0x7b0>)
 800ba7a:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <HAL_RCC_OscConfig+0x7b4>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	60cb      	str	r3, [r1, #12]
 800ba80:	e001      	b.n	800ba86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	40021000 	.word	0x40021000
 800ba94:	feeefffc 	.word	0xfeeefffc

0800ba98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e0e7      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800baac:	4b75      	ldr	r3, [pc, #468]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0307 	and.w	r3, r3, #7
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d910      	bls.n	800badc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baba:	4b72      	ldr	r3, [pc, #456]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f023 0207 	bic.w	r2, r3, #7
 800bac2:	4970      	ldr	r1, [pc, #448]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800baca:	4b6e      	ldr	r3, [pc, #440]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 0307 	and.w	r3, r3, #7
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d001      	beq.n	800badc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e0cf      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d010      	beq.n	800bb0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	4b66      	ldr	r3, [pc, #408]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d908      	bls.n	800bb0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800baf8:	4b63      	ldr	r3, [pc, #396]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	4960      	ldr	r1, [pc, #384]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d04c      	beq.n	800bbb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d107      	bne.n	800bb2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb1e:	4b5a      	ldr	r3, [pc, #360]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d121      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e0a6      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d107      	bne.n	800bb46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb36:	4b54      	ldr	r3, [pc, #336]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d115      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e09a      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d107      	bne.n	800bb5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bb4e:	4b4e      	ldr	r3, [pc, #312]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e08e      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb5e:	4b4a      	ldr	r3, [pc, #296]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e086      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb6e:	4b46      	ldr	r3, [pc, #280]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f023 0203 	bic.w	r2, r3, #3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	4943      	ldr	r1, [pc, #268]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb80:	f7fe f842 	bl	8009c08 <HAL_GetTick>
 800bb84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb86:	e00a      	b.n	800bb9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb88:	f7fe f83e 	bl	8009c08 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e06e      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb9e:	4b3a      	ldr	r3, [pc, #232]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f003 020c 	and.w	r2, r3, #12
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d1eb      	bne.n	800bb88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0302 	and.w	r3, r3, #2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d010      	beq.n	800bbde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	4b31      	ldr	r3, [pc, #196]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d208      	bcs.n	800bbde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbcc:	4b2e      	ldr	r3, [pc, #184]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	492b      	ldr	r1, [pc, #172]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bbde:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0307 	and.w	r3, r3, #7
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d210      	bcs.n	800bc0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbec:	4b25      	ldr	r3, [pc, #148]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f023 0207 	bic.w	r2, r3, #7
 800bbf4:	4923      	ldr	r1, [pc, #140]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbfc:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <HAL_RCC_ClockConfig+0x1ec>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0307 	and.w	r3, r3, #7
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d001      	beq.n	800bc0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e036      	b.n	800bc7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc1a:	4b1b      	ldr	r3, [pc, #108]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	4918      	ldr	r1, [pc, #96]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 0308 	and.w	r3, r3, #8
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d009      	beq.n	800bc4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc38:	4b13      	ldr	r3, [pc, #76]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	4910      	ldr	r1, [pc, #64]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bc4c:	f000 f824 	bl	800bc98 <HAL_RCC_GetSysClockFreq>
 800bc50:	4602      	mov	r2, r0
 800bc52:	4b0d      	ldr	r3, [pc, #52]	; (800bc88 <HAL_RCC_ClockConfig+0x1f0>)
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	091b      	lsrs	r3, r3, #4
 800bc58:	f003 030f 	and.w	r3, r3, #15
 800bc5c:	490b      	ldr	r1, [pc, #44]	; (800bc8c <HAL_RCC_ClockConfig+0x1f4>)
 800bc5e:	5ccb      	ldrb	r3, [r1, r3]
 800bc60:	f003 031f 	and.w	r3, r3, #31
 800bc64:	fa22 f303 	lsr.w	r3, r2, r3
 800bc68:	4a09      	ldr	r2, [pc, #36]	; (800bc90 <HAL_RCC_ClockConfig+0x1f8>)
 800bc6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bc6c:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <HAL_RCC_ClockConfig+0x1fc>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd ff79 	bl	8009b68 <HAL_InitTick>
 800bc76:	4603      	mov	r3, r0
 800bc78:	72fb      	strb	r3, [r7, #11]

  return status;
 800bc7a:	7afb      	ldrb	r3, [r7, #11]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	40022000 	.word	0x40022000
 800bc88:	40021000 	.word	0x40021000
 800bc8c:	08012e60 	.word	0x08012e60
 800bc90:	2000019c 	.word	0x2000019c
 800bc94:	200001a0 	.word	0x200001a0

0800bc98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b089      	sub	sp, #36	; 0x24
 800bc9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	61fb      	str	r3, [r7, #28]
 800bca2:	2300      	movs	r3, #0
 800bca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bca6:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	f003 030c 	and.w	r3, r3, #12
 800bcae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bcb0:	4b3b      	ldr	r3, [pc, #236]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f003 0303 	and.w	r3, r3, #3
 800bcb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d005      	beq.n	800bccc <HAL_RCC_GetSysClockFreq+0x34>
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	2b0c      	cmp	r3, #12
 800bcc4:	d121      	bne.n	800bd0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d11e      	bne.n	800bd0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bccc:	4b34      	ldr	r3, [pc, #208]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d107      	bne.n	800bce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bcd8:	4b31      	ldr	r3, [pc, #196]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bcda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcde:	0a1b      	lsrs	r3, r3, #8
 800bce0:	f003 030f 	and.w	r3, r3, #15
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	e005      	b.n	800bcf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bce8:	4b2d      	ldr	r3, [pc, #180]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	091b      	lsrs	r3, r3, #4
 800bcee:	f003 030f 	and.w	r3, r3, #15
 800bcf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bcf4:	4a2b      	ldr	r2, [pc, #172]	; (800bda4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10d      	bne.n	800bd20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bd08:	e00a      	b.n	800bd20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2b04      	cmp	r3, #4
 800bd0e:	d102      	bne.n	800bd16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bd10:	4b25      	ldr	r3, [pc, #148]	; (800bda8 <HAL_RCC_GetSysClockFreq+0x110>)
 800bd12:	61bb      	str	r3, [r7, #24]
 800bd14:	e004      	b.n	800bd20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d101      	bne.n	800bd20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bd1c:	4b23      	ldr	r3, [pc, #140]	; (800bdac <HAL_RCC_GetSysClockFreq+0x114>)
 800bd1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	2b0c      	cmp	r3, #12
 800bd24:	d134      	bne.n	800bd90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bd26:	4b1e      	ldr	r3, [pc, #120]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d003      	beq.n	800bd3e <HAL_RCC_GetSysClockFreq+0xa6>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d003      	beq.n	800bd44 <HAL_RCC_GetSysClockFreq+0xac>
 800bd3c:	e005      	b.n	800bd4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bd3e:	4b1a      	ldr	r3, [pc, #104]	; (800bda8 <HAL_RCC_GetSysClockFreq+0x110>)
 800bd40:	617b      	str	r3, [r7, #20]
      break;
 800bd42:	e005      	b.n	800bd50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bd44:	4b19      	ldr	r3, [pc, #100]	; (800bdac <HAL_RCC_GetSysClockFreq+0x114>)
 800bd46:	617b      	str	r3, [r7, #20]
      break;
 800bd48:	e002      	b.n	800bd50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	617b      	str	r3, [r7, #20]
      break;
 800bd4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bd50:	4b13      	ldr	r3, [pc, #76]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	091b      	lsrs	r3, r3, #4
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bd5e:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	0a1b      	lsrs	r3, r3, #8
 800bd64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	fb03 f202 	mul.w	r2, r3, r2
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	0e5b      	lsrs	r3, r3, #25
 800bd7c:	f003 0303 	and.w	r3, r3, #3
 800bd80:	3301      	adds	r3, #1
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800bd90:	69bb      	ldr	r3, [r7, #24]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3724      	adds	r7, #36	; 0x24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	40021000 	.word	0x40021000
 800bda4:	08012e78 	.word	0x08012e78
 800bda8:	00f42400 	.word	0x00f42400
 800bdac:	007a1200 	.word	0x007a1200

0800bdb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bdb4:	4b03      	ldr	r3, [pc, #12]	; (800bdc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	2000019c 	.word	0x2000019c

0800bdc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bdcc:	f7ff fff0 	bl	800bdb0 <HAL_RCC_GetHCLKFreq>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	4b06      	ldr	r3, [pc, #24]	; (800bdec <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	0a1b      	lsrs	r3, r3, #8
 800bdd8:	f003 0307 	and.w	r3, r3, #7
 800bddc:	4904      	ldr	r1, [pc, #16]	; (800bdf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bdde:	5ccb      	ldrb	r3, [r1, r3]
 800bde0:	f003 031f 	and.w	r3, r3, #31
 800bde4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	40021000 	.word	0x40021000
 800bdf0:	08012e70 	.word	0x08012e70

0800bdf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bdf8:	f7ff ffda 	bl	800bdb0 <HAL_RCC_GetHCLKFreq>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	4b06      	ldr	r3, [pc, #24]	; (800be18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	0adb      	lsrs	r3, r3, #11
 800be04:	f003 0307 	and.w	r3, r3, #7
 800be08:	4904      	ldr	r1, [pc, #16]	; (800be1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800be0a:	5ccb      	ldrb	r3, [r1, r3]
 800be0c:	f003 031f 	and.w	r3, r3, #31
 800be10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be14:	4618      	mov	r0, r3
 800be16:	bd80      	pop	{r7, pc}
 800be18:	40021000 	.word	0x40021000
 800be1c:	08012e70 	.word	0x08012e70

0800be20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800be28:	2300      	movs	r3, #0
 800be2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800be2c:	4b2a      	ldr	r3, [pc, #168]	; (800bed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800be2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800be38:	f7ff f9ee 	bl	800b218 <HAL_PWREx_GetVoltageRange>
 800be3c:	6178      	str	r0, [r7, #20]
 800be3e:	e014      	b.n	800be6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800be40:	4b25      	ldr	r3, [pc, #148]	; (800bed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800be42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be44:	4a24      	ldr	r2, [pc, #144]	; (800bed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800be46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be4a:	6593      	str	r3, [r2, #88]	; 0x58
 800be4c:	4b22      	ldr	r3, [pc, #136]	; (800bed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800be4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800be58:	f7ff f9de 	bl	800b218 <HAL_PWREx_GetVoltageRange>
 800be5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800be5e:	4b1e      	ldr	r3, [pc, #120]	; (800bed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800be60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be62:	4a1d      	ldr	r2, [pc, #116]	; (800bed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800be64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be70:	d10b      	bne.n	800be8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b80      	cmp	r3, #128	; 0x80
 800be76:	d919      	bls.n	800beac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2ba0      	cmp	r3, #160	; 0xa0
 800be7c:	d902      	bls.n	800be84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800be7e:	2302      	movs	r3, #2
 800be80:	613b      	str	r3, [r7, #16]
 800be82:	e013      	b.n	800beac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800be84:	2301      	movs	r3, #1
 800be86:	613b      	str	r3, [r7, #16]
 800be88:	e010      	b.n	800beac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b80      	cmp	r3, #128	; 0x80
 800be8e:	d902      	bls.n	800be96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800be90:	2303      	movs	r3, #3
 800be92:	613b      	str	r3, [r7, #16]
 800be94:	e00a      	b.n	800beac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b80      	cmp	r3, #128	; 0x80
 800be9a:	d102      	bne.n	800bea2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800be9c:	2302      	movs	r3, #2
 800be9e:	613b      	str	r3, [r7, #16]
 800bea0:	e004      	b.n	800beac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b70      	cmp	r3, #112	; 0x70
 800bea6:	d101      	bne.n	800beac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bea8:	2301      	movs	r3, #1
 800beaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800beac:	4b0b      	ldr	r3, [pc, #44]	; (800bedc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f023 0207 	bic.w	r2, r3, #7
 800beb4:	4909      	ldr	r1, [pc, #36]	; (800bedc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	4313      	orrs	r3, r2
 800beba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 0307 	and.w	r3, r3, #7
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d001      	beq.n	800bece <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	40021000 	.word	0x40021000
 800bedc:	40022000 	.word	0x40022000

0800bee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bee8:	2300      	movs	r3, #0
 800beea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800beec:	2300      	movs	r3, #0
 800beee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d041      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bf04:	d02a      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bf06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bf0a:	d824      	bhi.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bf0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf10:	d008      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bf12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf16:	d81e      	bhi.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00a      	beq.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bf1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf20:	d010      	beq.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bf22:	e018      	b.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bf24:	4b86      	ldr	r3, [pc, #536]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	4a85      	ldr	r2, [pc, #532]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bf30:	e015      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3304      	adds	r3, #4
 800bf36:	2100      	movs	r1, #0
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fabb 	bl	800c4b4 <RCCEx_PLLSAI1_Config>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bf42:	e00c      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3320      	adds	r3, #32
 800bf48:	2100      	movs	r1, #0
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fba6 	bl	800c69c <RCCEx_PLLSAI2_Config>
 800bf50:	4603      	mov	r3, r0
 800bf52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bf54:	e003      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	74fb      	strb	r3, [r7, #19]
      break;
 800bf5a:	e000      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bf5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf5e:	7cfb      	ldrb	r3, [r7, #19]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10b      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf64:	4b76      	ldr	r3, [pc, #472]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf72:	4973      	ldr	r1, [pc, #460]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bf7a:	e001      	b.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7c:	7cfb      	ldrb	r3, [r7, #19]
 800bf7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d041      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf94:	d02a      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800bf96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf9a:	d824      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bf9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfa0:	d008      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bfa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfa6:	d81e      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00a      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800bfac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfb0:	d010      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800bfb2:	e018      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bfb4:	4b62      	ldr	r3, [pc, #392]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	4a61      	ldr	r2, [pc, #388]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bfba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bfc0:	e015      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 fa73 	bl	800c4b4 <RCCEx_PLLSAI1_Config>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bfd2:	e00c      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3320      	adds	r3, #32
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fb5e 	bl	800c69c <RCCEx_PLLSAI2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bfe4:	e003      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	74fb      	strb	r3, [r7, #19]
      break;
 800bfea:	e000      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800bfec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfee:	7cfb      	ldrb	r3, [r7, #19]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10b      	bne.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bff4:	4b52      	ldr	r3, [pc, #328]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bffa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c002:	494f      	ldr	r1, [pc, #316]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c004:	4313      	orrs	r3, r2
 800c006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c00a:	e001      	b.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00c:	7cfb      	ldrb	r3, [r7, #19]
 800c00e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 80a0 	beq.w	800c15e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c01e:	2300      	movs	r3, #0
 800c020:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c022:	4b47      	ldr	r3, [pc, #284]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800c02e:	2301      	movs	r3, #1
 800c030:	e000      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800c032:	2300      	movs	r3, #0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00d      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c038:	4b41      	ldr	r3, [pc, #260]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c03c:	4a40      	ldr	r2, [pc, #256]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c03e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c042:	6593      	str	r3, [r2, #88]	; 0x58
 800c044:	4b3e      	ldr	r3, [pc, #248]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c04c:	60bb      	str	r3, [r7, #8]
 800c04e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c050:	2301      	movs	r3, #1
 800c052:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c054:	4b3b      	ldr	r3, [pc, #236]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a3a      	ldr	r2, [pc, #232]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c05a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c05e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c060:	f7fd fdd2 	bl	8009c08 <HAL_GetTick>
 800c064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c066:	e009      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c068:	f7fd fdce 	bl	8009c08 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	2b02      	cmp	r3, #2
 800c074:	d902      	bls.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	74fb      	strb	r3, [r7, #19]
        break;
 800c07a:	e005      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c07c:	4b31      	ldr	r3, [pc, #196]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0ef      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800c088:	7cfb      	ldrb	r3, [r7, #19]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d15c      	bne.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c08e:	4b2c      	ldr	r3, [pc, #176]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01f      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d019      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c0ac:	4b24      	ldr	r3, [pc, #144]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0b8:	4b21      	ldr	r3, [pc, #132]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0be:	4a20      	ldr	r2, [pc, #128]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ce:	4a1c      	ldr	r2, [pc, #112]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c0d8:	4a19      	ldr	r2, [pc, #100]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d016      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0ea:	f7fd fd8d 	bl	8009c08 <HAL_GetTick>
 800c0ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0f0:	e00b      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0f2:	f7fd fd89 	bl	8009c08 <HAL_GetTick>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c100:	4293      	cmp	r3, r2
 800c102:	d902      	bls.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	74fb      	strb	r3, [r7, #19]
            break;
 800c108:	e006      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c10a:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c110:	f003 0302 	and.w	r3, r3, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0ec      	beq.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800c118:	7cfb      	ldrb	r3, [r7, #19]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10c      	bne.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c12e:	4904      	ldr	r1, [pc, #16]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c130:	4313      	orrs	r3, r2
 800c132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c136:	e009      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c138:	7cfb      	ldrb	r3, [r7, #19]
 800c13a:	74bb      	strb	r3, [r7, #18]
 800c13c:	e006      	b.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800c13e:	bf00      	nop
 800c140:	40021000 	.word	0x40021000
 800c144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c148:	7cfb      	ldrb	r3, [r7, #19]
 800c14a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c14c:	7c7b      	ldrb	r3, [r7, #17]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d105      	bne.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c152:	4b9e      	ldr	r3, [pc, #632]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c156:	4a9d      	ldr	r2, [pc, #628]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c15c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c16a:	4b98      	ldr	r3, [pc, #608]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c170:	f023 0203 	bic.w	r2, r3, #3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	4994      	ldr	r1, [pc, #592]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0302 	and.w	r3, r3, #2
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00a      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c18c:	4b8f      	ldr	r3, [pc, #572]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c192:	f023 020c 	bic.w	r2, r3, #12
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19a:	498c      	ldr	r1, [pc, #560]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0304 	and.w	r3, r3, #4
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00a      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c1ae:	4b87      	ldr	r3, [pc, #540]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	4983      	ldr	r1, [pc, #524]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 0308 	and.w	r3, r3, #8
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00a      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c1d0:	4b7e      	ldr	r3, [pc, #504]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1de:	497b      	ldr	r1, [pc, #492]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 0310 	and.w	r3, r3, #16
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00a      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c1f2:	4b76      	ldr	r3, [pc, #472]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c200:	4972      	ldr	r1, [pc, #456]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c202:	4313      	orrs	r3, r2
 800c204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 0320 	and.w	r3, r3, #32
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00a      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c214:	4b6d      	ldr	r3, [pc, #436]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c21a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c222:	496a      	ldr	r1, [pc, #424]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c224:	4313      	orrs	r3, r2
 800c226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c236:	4b65      	ldr	r3, [pc, #404]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c23c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c244:	4961      	ldr	r1, [pc, #388]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c246:	4313      	orrs	r3, r2
 800c248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00a      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c258:	4b5c      	ldr	r3, [pc, #368]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c266:	4959      	ldr	r1, [pc, #356]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c27a:	4b54      	ldr	r3, [pc, #336]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c288:	4950      	ldr	r1, [pc, #320]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00a      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c29c:	4b4b      	ldr	r3, [pc, #300]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	4948      	ldr	r1, [pc, #288]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00a      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c2be:	4b43      	ldr	r3, [pc, #268]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2cc:	493f      	ldr	r1, [pc, #252]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d028      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c2e0:	4b3a      	ldr	r3, [pc, #232]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ee:	4937      	ldr	r1, [pc, #220]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2fe:	d106      	bne.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c300:	4b32      	ldr	r3, [pc, #200]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	4a31      	ldr	r2, [pc, #196]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c30a:	60d3      	str	r3, [r2, #12]
 800c30c:	e011      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c316:	d10c      	bne.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3304      	adds	r3, #4
 800c31c:	2101      	movs	r1, #1
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 f8c8 	bl	800c4b4 <RCCEx_PLLSAI1_Config>
 800c324:	4603      	mov	r3, r0
 800c326:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c328:	7cfb      	ldrb	r3, [r7, #19]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800c32e:	7cfb      	ldrb	r3, [r7, #19]
 800c330:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d028      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c33e:	4b23      	ldr	r3, [pc, #140]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c344:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34c:	491f      	ldr	r1, [pc, #124]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c35c:	d106      	bne.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c35e:	4b1b      	ldr	r3, [pc, #108]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4a1a      	ldr	r2, [pc, #104]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c368:	60d3      	str	r3, [r2, #12]
 800c36a:	e011      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c374:	d10c      	bne.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3304      	adds	r3, #4
 800c37a:	2101      	movs	r1, #1
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 f899 	bl	800c4b4 <RCCEx_PLLSAI1_Config>
 800c382:	4603      	mov	r3, r0
 800c384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c386:	7cfb      	ldrb	r3, [r7, #19]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800c38c:	7cfb      	ldrb	r3, [r7, #19]
 800c38e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d02b      	beq.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c39c:	4b0b      	ldr	r3, [pc, #44]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3aa:	4908      	ldr	r1, [pc, #32]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ba:	d109      	bne.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c3bc:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	4a02      	ldr	r2, [pc, #8]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3c6:	60d3      	str	r3, [r2, #12]
 800c3c8:	e014      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800c3ca:	bf00      	nop
 800c3cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3d8:	d10c      	bne.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	2101      	movs	r1, #1
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 f867 	bl	800c4b4 <RCCEx_PLLSAI1_Config>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c3ea:	7cfb      	ldrb	r3, [r7, #19]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800c3f0:	7cfb      	ldrb	r3, [r7, #19]
 800c3f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d02f      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c400:	4b2b      	ldr	r3, [pc, #172]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c406:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c40e:	4928      	ldr	r1, [pc, #160]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c410:	4313      	orrs	r3, r2
 800c412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c41a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c41e:	d10d      	bne.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3304      	adds	r3, #4
 800c424:	2102      	movs	r1, #2
 800c426:	4618      	mov	r0, r3
 800c428:	f000 f844 	bl	800c4b4 <RCCEx_PLLSAI1_Config>
 800c42c:	4603      	mov	r3, r0
 800c42e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c430:	7cfb      	ldrb	r3, [r7, #19]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d014      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c436:	7cfb      	ldrb	r3, [r7, #19]
 800c438:	74bb      	strb	r3, [r7, #18]
 800c43a:	e011      	b.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c444:	d10c      	bne.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3320      	adds	r3, #32
 800c44a:	2102      	movs	r1, #2
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 f925 	bl	800c69c <RCCEx_PLLSAI2_Config>
 800c452:	4603      	mov	r3, r0
 800c454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c456:	7cfb      	ldrb	r3, [r7, #19]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c45c:	7cfb      	ldrb	r3, [r7, #19]
 800c45e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00a      	beq.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c46c:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c472:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47a:	490d      	ldr	r1, [pc, #52]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c47c:	4313      	orrs	r3, r2
 800c47e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00b      	beq.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c48e:	4b08      	ldr	r3, [pc, #32]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c49e:	4904      	ldr	r1, [pc, #16]	; (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c4a6:	7cbb      	ldrb	r3, [r7, #18]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	40021000 	.word	0x40021000

0800c4b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c4c2:	4b75      	ldr	r3, [pc, #468]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	f003 0303 	and.w	r3, r3, #3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d018      	beq.n	800c500 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c4ce:	4b72      	ldr	r3, [pc, #456]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	f003 0203 	and.w	r2, r3, #3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d10d      	bne.n	800c4fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
       ||
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d009      	beq.n	800c4fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c4e6:	4b6c      	ldr	r3, [pc, #432]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	091b      	lsrs	r3, r3, #4
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
       ||
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d047      	beq.n	800c58a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	73fb      	strb	r3, [r7, #15]
 800c4fe:	e044      	b.n	800c58a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b03      	cmp	r3, #3
 800c506:	d018      	beq.n	800c53a <RCCEx_PLLSAI1_Config+0x86>
 800c508:	2b03      	cmp	r3, #3
 800c50a:	d825      	bhi.n	800c558 <RCCEx_PLLSAI1_Config+0xa4>
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d002      	beq.n	800c516 <RCCEx_PLLSAI1_Config+0x62>
 800c510:	2b02      	cmp	r3, #2
 800c512:	d009      	beq.n	800c528 <RCCEx_PLLSAI1_Config+0x74>
 800c514:	e020      	b.n	800c558 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c516:	4b60      	ldr	r3, [pc, #384]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 0302 	and.w	r3, r3, #2
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d11d      	bne.n	800c55e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c526:	e01a      	b.n	800c55e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c528:	4b5b      	ldr	r3, [pc, #364]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c530:	2b00      	cmp	r3, #0
 800c532:	d116      	bne.n	800c562 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c538:	e013      	b.n	800c562 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c53a:	4b57      	ldr	r3, [pc, #348]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10f      	bne.n	800c566 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c546:	4b54      	ldr	r3, [pc, #336]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d109      	bne.n	800c566 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c556:	e006      	b.n	800c566 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	73fb      	strb	r3, [r7, #15]
      break;
 800c55c:	e004      	b.n	800c568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c55e:	bf00      	nop
 800c560:	e002      	b.n	800c568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c562:	bf00      	nop
 800c564:	e000      	b.n	800c568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c566:	bf00      	nop
    }

    if(status == HAL_OK)
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10d      	bne.n	800c58a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c56e:	4b4a      	ldr	r3, [pc, #296]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6819      	ldr	r1, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	3b01      	subs	r3, #1
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	430b      	orrs	r3, r1
 800c584:	4944      	ldr	r1, [pc, #272]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c586:	4313      	orrs	r3, r2
 800c588:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d17d      	bne.n	800c68c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c590:	4b41      	ldr	r3, [pc, #260]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a40      	ldr	r2, [pc, #256]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c59a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c59c:	f7fd fb34 	bl	8009c08 <HAL_GetTick>
 800c5a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c5a2:	e009      	b.n	800c5b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c5a4:	f7fd fb30 	bl	8009c08 <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d902      	bls.n	800c5b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	73fb      	strb	r3, [r7, #15]
        break;
 800c5b6:	e005      	b.n	800c5c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c5b8:	4b37      	ldr	r3, [pc, #220]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1ef      	bne.n	800c5a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d160      	bne.n	800c68c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d111      	bne.n	800c5f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c5d0:	4b31      	ldr	r3, [pc, #196]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c5d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6892      	ldr	r2, [r2, #8]
 800c5e0:	0211      	lsls	r1, r2, #8
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	68d2      	ldr	r2, [r2, #12]
 800c5e6:	0912      	lsrs	r2, r2, #4
 800c5e8:	0452      	lsls	r2, r2, #17
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	492a      	ldr	r1, [pc, #168]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	610b      	str	r3, [r1, #16]
 800c5f2:	e027      	b.n	800c644 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d112      	bne.n	800c620 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c5fa:	4b27      	ldr	r3, [pc, #156]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c602:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	6892      	ldr	r2, [r2, #8]
 800c60a:	0211      	lsls	r1, r2, #8
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	6912      	ldr	r2, [r2, #16]
 800c610:	0852      	lsrs	r2, r2, #1
 800c612:	3a01      	subs	r2, #1
 800c614:	0552      	lsls	r2, r2, #21
 800c616:	430a      	orrs	r2, r1
 800c618:	491f      	ldr	r1, [pc, #124]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	610b      	str	r3, [r1, #16]
 800c61e:	e011      	b.n	800c644 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c620:	4b1d      	ldr	r3, [pc, #116]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	6892      	ldr	r2, [r2, #8]
 800c630:	0211      	lsls	r1, r2, #8
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6952      	ldr	r2, [r2, #20]
 800c636:	0852      	lsrs	r2, r2, #1
 800c638:	3a01      	subs	r2, #1
 800c63a:	0652      	lsls	r2, r2, #25
 800c63c:	430a      	orrs	r2, r1
 800c63e:	4916      	ldr	r1, [pc, #88]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c640:	4313      	orrs	r3, r2
 800c642:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c644:	4b14      	ldr	r3, [pc, #80]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a13      	ldr	r2, [pc, #76]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c64a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c64e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c650:	f7fd fada 	bl	8009c08 <HAL_GetTick>
 800c654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c656:	e009      	b.n	800c66c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c658:	f7fd fad6 	bl	8009c08 <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	2b02      	cmp	r3, #2
 800c664:	d902      	bls.n	800c66c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800c666:	2303      	movs	r3, #3
 800c668:	73fb      	strb	r3, [r7, #15]
          break;
 800c66a:	e005      	b.n	800c678 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0ef      	beq.n	800c658 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d106      	bne.n	800c68c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c67e:	4b06      	ldr	r3, [pc, #24]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c680:	691a      	ldr	r2, [r3, #16]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	4904      	ldr	r1, [pc, #16]	; (800c698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c688:	4313      	orrs	r3, r2
 800c68a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	40021000 	.word	0x40021000

0800c69c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c6aa:	4b6a      	ldr	r3, [pc, #424]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d018      	beq.n	800c6e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c6b6:	4b67      	ldr	r3, [pc, #412]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	f003 0203 	and.w	r2, r3, #3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d10d      	bne.n	800c6e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
       ||
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d009      	beq.n	800c6e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c6ce:	4b61      	ldr	r3, [pc, #388]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	091b      	lsrs	r3, r3, #4
 800c6d4:	f003 0307 	and.w	r3, r3, #7
 800c6d8:	1c5a      	adds	r2, r3, #1
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
       ||
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d047      	beq.n	800c772 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	73fb      	strb	r3, [r7, #15]
 800c6e6:	e044      	b.n	800c772 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b03      	cmp	r3, #3
 800c6ee:	d018      	beq.n	800c722 <RCCEx_PLLSAI2_Config+0x86>
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	d825      	bhi.n	800c740 <RCCEx_PLLSAI2_Config+0xa4>
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d002      	beq.n	800c6fe <RCCEx_PLLSAI2_Config+0x62>
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d009      	beq.n	800c710 <RCCEx_PLLSAI2_Config+0x74>
 800c6fc:	e020      	b.n	800c740 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c6fe:	4b55      	ldr	r3, [pc, #340]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d11d      	bne.n	800c746 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c70e:	e01a      	b.n	800c746 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c710:	4b50      	ldr	r3, [pc, #320]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d116      	bne.n	800c74a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c720:	e013      	b.n	800c74a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c722:	4b4c      	ldr	r3, [pc, #304]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10f      	bne.n	800c74e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c72e:	4b49      	ldr	r3, [pc, #292]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d109      	bne.n	800c74e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c73e:	e006      	b.n	800c74e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	73fb      	strb	r3, [r7, #15]
      break;
 800c744:	e004      	b.n	800c750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c746:	bf00      	nop
 800c748:	e002      	b.n	800c750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c74a:	bf00      	nop
 800c74c:	e000      	b.n	800c750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c74e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10d      	bne.n	800c772 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c756:	4b3f      	ldr	r3, [pc, #252]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6819      	ldr	r1, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	3b01      	subs	r3, #1
 800c768:	011b      	lsls	r3, r3, #4
 800c76a:	430b      	orrs	r3, r1
 800c76c:	4939      	ldr	r1, [pc, #228]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d167      	bne.n	800c848 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c778:	4b36      	ldr	r3, [pc, #216]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a35      	ldr	r2, [pc, #212]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c77e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c784:	f7fd fa40 	bl	8009c08 <HAL_GetTick>
 800c788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c78a:	e009      	b.n	800c7a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c78c:	f7fd fa3c 	bl	8009c08 <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b02      	cmp	r3, #2
 800c798:	d902      	bls.n	800c7a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	73fb      	strb	r3, [r7, #15]
        break;
 800c79e:	e005      	b.n	800c7ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c7a0:	4b2c      	ldr	r3, [pc, #176]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1ef      	bne.n	800c78c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d14a      	bne.n	800c848 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d111      	bne.n	800c7dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c7b8:	4b26      	ldr	r3, [pc, #152]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7ba:	695b      	ldr	r3, [r3, #20]
 800c7bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c7c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	6892      	ldr	r2, [r2, #8]
 800c7c8:	0211      	lsls	r1, r2, #8
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	68d2      	ldr	r2, [r2, #12]
 800c7ce:	0912      	lsrs	r2, r2, #4
 800c7d0:	0452      	lsls	r2, r2, #17
 800c7d2:	430a      	orrs	r2, r1
 800c7d4:	491f      	ldr	r1, [pc, #124]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	614b      	str	r3, [r1, #20]
 800c7da:	e011      	b.n	800c800 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c7dc:	4b1d      	ldr	r3, [pc, #116]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c7e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	6892      	ldr	r2, [r2, #8]
 800c7ec:	0211      	lsls	r1, r2, #8
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	6912      	ldr	r2, [r2, #16]
 800c7f2:	0852      	lsrs	r2, r2, #1
 800c7f4:	3a01      	subs	r2, #1
 800c7f6:	0652      	lsls	r2, r2, #25
 800c7f8:	430a      	orrs	r2, r1
 800c7fa:	4916      	ldr	r1, [pc, #88]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c800:	4b14      	ldr	r3, [pc, #80]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a13      	ldr	r2, [pc, #76]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c80a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c80c:	f7fd f9fc 	bl	8009c08 <HAL_GetTick>
 800c810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c812:	e009      	b.n	800c828 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c814:	f7fd f9f8 	bl	8009c08 <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d902      	bls.n	800c828 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	73fb      	strb	r3, [r7, #15]
          break;
 800c826:	e005      	b.n	800c834 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d0ef      	beq.n	800c814 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c83a:	4b06      	ldr	r3, [pc, #24]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c83c:	695a      	ldr	r2, [r3, #20]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	4904      	ldr	r1, [pc, #16]	; (800c854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c844:	4313      	orrs	r3, r2
 800c846:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c848:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	40021000 	.word	0x40021000

0800c858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e040      	b.n	800c8ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7f5 f916 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2224      	movs	r2, #36	; 0x24
 800c884:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f022 0201 	bic.w	r2, r2, #1
 800c894:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d002      	beq.n	800c8a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fc34 	bl	800d10c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f979 	bl	800cb9c <UART_SetConfig>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d101      	bne.n	800c8b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e01b      	b.n	800c8ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	685a      	ldr	r2, [r3, #4]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689a      	ldr	r2, [r3, #8]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f042 0201 	orr.w	r2, r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fcb3 	bl	800d250 <UART_CheckIdleState>
 800c8ea:	4603      	mov	r3, r0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08a      	sub	sp, #40	; 0x28
 800c8f8:	af02      	add	r7, sp, #8
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	4613      	mov	r3, r2
 800c902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c908:	2b20      	cmp	r3, #32
 800c90a:	d178      	bne.n	800c9fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d002      	beq.n	800c918 <HAL_UART_Transmit+0x24>
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e071      	b.n	800ca00 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2221      	movs	r2, #33	; 0x21
 800c928:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c92a:	f7fd f96d 	bl	8009c08 <HAL_GetTick>
 800c92e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	88fa      	ldrh	r2, [r7, #6]
 800c934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	88fa      	ldrh	r2, [r7, #6]
 800c93c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c948:	d108      	bne.n	800c95c <HAL_UART_Transmit+0x68>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d104      	bne.n	800c95c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	61bb      	str	r3, [r7, #24]
 800c95a:	e003      	b.n	800c964 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c964:	e030      	b.n	800c9c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2200      	movs	r2, #0
 800c96e:	2180      	movs	r1, #128	; 0x80
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fd15 	bl	800d3a0 <UART_WaitOnFlagUntilTimeout>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d004      	beq.n	800c986 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2220      	movs	r2, #32
 800c980:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c982:	2303      	movs	r3, #3
 800c984:	e03c      	b.n	800ca00 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10b      	bne.n	800c9a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	881a      	ldrh	r2, [r3, #0]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c998:	b292      	uxth	r2, r2
 800c99a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	3302      	adds	r3, #2
 800c9a0:	61bb      	str	r3, [r7, #24]
 800c9a2:	e008      	b.n	800c9b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	781a      	ldrb	r2, [r3, #0]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	b292      	uxth	r2, r2
 800c9ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1c8      	bne.n	800c966 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2140      	movs	r1, #64	; 0x40
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fcde 	bl	800d3a0 <UART_WaitOnFlagUntilTimeout>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d004      	beq.n	800c9f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	e005      	b.n	800ca00 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e000      	b.n	800ca00 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c9fe:	2302      	movs	r3, #2
  }
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08a      	sub	sp, #40	; 0x28
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	603b      	str	r3, [r7, #0]
 800ca14:	4613      	mov	r3, r2
 800ca16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca1e:	2b20      	cmp	r3, #32
 800ca20:	f040 80b6 	bne.w	800cb90 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d002      	beq.n	800ca30 <HAL_UART_Receive+0x28>
 800ca2a:	88fb      	ldrh	r3, [r7, #6]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e0ae      	b.n	800cb92 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2222      	movs	r2, #34	; 0x22
 800ca40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca4a:	f7fd f8dd 	bl	8009c08 <HAL_GetTick>
 800ca4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	88fa      	ldrh	r2, [r7, #6]
 800ca54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	88fa      	ldrh	r2, [r7, #6]
 800ca5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca68:	d10e      	bne.n	800ca88 <HAL_UART_Receive+0x80>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d105      	bne.n	800ca7e <HAL_UART_Receive+0x76>
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ca78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ca7c:	e02d      	b.n	800cada <HAL_UART_Receive+0xd2>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	22ff      	movs	r2, #255	; 0xff
 800ca82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ca86:	e028      	b.n	800cada <HAL_UART_Receive+0xd2>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10d      	bne.n	800caac <HAL_UART_Receive+0xa4>
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d104      	bne.n	800caa2 <HAL_UART_Receive+0x9a>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	22ff      	movs	r2, #255	; 0xff
 800ca9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800caa0:	e01b      	b.n	800cada <HAL_UART_Receive+0xd2>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	227f      	movs	r2, #127	; 0x7f
 800caa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800caaa:	e016      	b.n	800cada <HAL_UART_Receive+0xd2>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cab4:	d10d      	bne.n	800cad2 <HAL_UART_Receive+0xca>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d104      	bne.n	800cac8 <HAL_UART_Receive+0xc0>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	227f      	movs	r2, #127	; 0x7f
 800cac2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cac6:	e008      	b.n	800cada <HAL_UART_Receive+0xd2>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	223f      	movs	r2, #63	; 0x3f
 800cacc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cad0:	e003      	b.n	800cada <HAL_UART_Receive+0xd2>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cae0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caea:	d108      	bne.n	800cafe <HAL_UART_Receive+0xf6>
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800caf4:	2300      	movs	r3, #0
 800caf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	e003      	b.n	800cb06 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cb06:	e037      	b.n	800cb78 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	2120      	movs	r1, #32
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f000 fc44 	bl	800d3a0 <UART_WaitOnFlagUntilTimeout>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d005      	beq.n	800cb2a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2220      	movs	r2, #32
 800cb22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e033      	b.n	800cb92 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10c      	bne.n	800cb4a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	8a7b      	ldrh	r3, [r7, #18]
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	3302      	adds	r3, #2
 800cb46:	61bb      	str	r3, [r7, #24]
 800cb48:	e00d      	b.n	800cb66 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	8a7b      	ldrh	r3, [r7, #18]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	4013      	ands	r3, r2
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	3301      	adds	r3, #1
 800cb64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1c1      	bne.n	800cb08 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2220      	movs	r2, #32
 800cb88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e000      	b.n	800cb92 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800cb90:	2302      	movs	r3, #2
  }
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3720      	adds	r7, #32
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cba0:	b08a      	sub	sp, #40	; 0x28
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cba6:	2300      	movs	r3, #0
 800cba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	431a      	orrs	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	431a      	orrs	r2, r3
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	69db      	ldr	r3, [r3, #28]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	4ba4      	ldr	r3, [pc, #656]	; (800ce5c <UART_SetConfig+0x2c0>)
 800cbcc:	4013      	ands	r3, r2
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	6812      	ldr	r2, [r2, #0]
 800cbd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbd4:	430b      	orrs	r3, r1
 800cbd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	68da      	ldr	r2, [r3, #12]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	430a      	orrs	r2, r1
 800cbec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a99      	ldr	r2, [pc, #612]	; (800ce60 <UART_SetConfig+0x2c4>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d004      	beq.n	800cc08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc04:	4313      	orrs	r3, r2
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc18:	430a      	orrs	r2, r1
 800cc1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a90      	ldr	r2, [pc, #576]	; (800ce64 <UART_SetConfig+0x2c8>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d126      	bne.n	800cc74 <UART_SetConfig+0xd8>
 800cc26:	4b90      	ldr	r3, [pc, #576]	; (800ce68 <UART_SetConfig+0x2cc>)
 800cc28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d81b      	bhi.n	800cc6c <UART_SetConfig+0xd0>
 800cc34:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <UART_SetConfig+0xa0>)
 800cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3a:	bf00      	nop
 800cc3c:	0800cc4d 	.word	0x0800cc4d
 800cc40:	0800cc5d 	.word	0x0800cc5d
 800cc44:	0800cc55 	.word	0x0800cc55
 800cc48:	0800cc65 	.word	0x0800cc65
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc52:	e116      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cc54:	2302      	movs	r3, #2
 800cc56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc5a:	e112      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc62:	e10e      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cc64:	2308      	movs	r3, #8
 800cc66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc6a:	e10a      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cc6c:	2310      	movs	r3, #16
 800cc6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc72:	e106      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a7c      	ldr	r2, [pc, #496]	; (800ce6c <UART_SetConfig+0x2d0>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d138      	bne.n	800ccf0 <UART_SetConfig+0x154>
 800cc7e:	4b7a      	ldr	r3, [pc, #488]	; (800ce68 <UART_SetConfig+0x2cc>)
 800cc80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc84:	f003 030c 	and.w	r3, r3, #12
 800cc88:	2b0c      	cmp	r3, #12
 800cc8a:	d82d      	bhi.n	800cce8 <UART_SetConfig+0x14c>
 800cc8c:	a201      	add	r2, pc, #4	; (adr r2, 800cc94 <UART_SetConfig+0xf8>)
 800cc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc92:	bf00      	nop
 800cc94:	0800ccc9 	.word	0x0800ccc9
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800cce9 	.word	0x0800cce9
 800cca0:	0800cce9 	.word	0x0800cce9
 800cca4:	0800ccd9 	.word	0x0800ccd9
 800cca8:	0800cce9 	.word	0x0800cce9
 800ccac:	0800cce9 	.word	0x0800cce9
 800ccb0:	0800cce9 	.word	0x0800cce9
 800ccb4:	0800ccd1 	.word	0x0800ccd1
 800ccb8:	0800cce9 	.word	0x0800cce9
 800ccbc:	0800cce9 	.word	0x0800cce9
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800cce1 	.word	0x0800cce1
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccce:	e0d8      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccd6:	e0d4      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccde:	e0d0      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cce0:	2308      	movs	r3, #8
 800cce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cce6:	e0cc      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cce8:	2310      	movs	r3, #16
 800ccea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccee:	e0c8      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a5e      	ldr	r2, [pc, #376]	; (800ce70 <UART_SetConfig+0x2d4>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d125      	bne.n	800cd46 <UART_SetConfig+0x1aa>
 800ccfa:	4b5b      	ldr	r3, [pc, #364]	; (800ce68 <UART_SetConfig+0x2cc>)
 800ccfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd04:	2b30      	cmp	r3, #48	; 0x30
 800cd06:	d016      	beq.n	800cd36 <UART_SetConfig+0x19a>
 800cd08:	2b30      	cmp	r3, #48	; 0x30
 800cd0a:	d818      	bhi.n	800cd3e <UART_SetConfig+0x1a2>
 800cd0c:	2b20      	cmp	r3, #32
 800cd0e:	d00a      	beq.n	800cd26 <UART_SetConfig+0x18a>
 800cd10:	2b20      	cmp	r3, #32
 800cd12:	d814      	bhi.n	800cd3e <UART_SetConfig+0x1a2>
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <UART_SetConfig+0x182>
 800cd18:	2b10      	cmp	r3, #16
 800cd1a:	d008      	beq.n	800cd2e <UART_SetConfig+0x192>
 800cd1c:	e00f      	b.n	800cd3e <UART_SetConfig+0x1a2>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd24:	e0ad      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd26:	2302      	movs	r3, #2
 800cd28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd2c:	e0a9      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd2e:	2304      	movs	r3, #4
 800cd30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd34:	e0a5      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd36:	2308      	movs	r3, #8
 800cd38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd3c:	e0a1      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd3e:	2310      	movs	r3, #16
 800cd40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd44:	e09d      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a4a      	ldr	r2, [pc, #296]	; (800ce74 <UART_SetConfig+0x2d8>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d125      	bne.n	800cd9c <UART_SetConfig+0x200>
 800cd50:	4b45      	ldr	r3, [pc, #276]	; (800ce68 <UART_SetConfig+0x2cc>)
 800cd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cd5a:	2bc0      	cmp	r3, #192	; 0xc0
 800cd5c:	d016      	beq.n	800cd8c <UART_SetConfig+0x1f0>
 800cd5e:	2bc0      	cmp	r3, #192	; 0xc0
 800cd60:	d818      	bhi.n	800cd94 <UART_SetConfig+0x1f8>
 800cd62:	2b80      	cmp	r3, #128	; 0x80
 800cd64:	d00a      	beq.n	800cd7c <UART_SetConfig+0x1e0>
 800cd66:	2b80      	cmp	r3, #128	; 0x80
 800cd68:	d814      	bhi.n	800cd94 <UART_SetConfig+0x1f8>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <UART_SetConfig+0x1d8>
 800cd6e:	2b40      	cmp	r3, #64	; 0x40
 800cd70:	d008      	beq.n	800cd84 <UART_SetConfig+0x1e8>
 800cd72:	e00f      	b.n	800cd94 <UART_SetConfig+0x1f8>
 800cd74:	2300      	movs	r3, #0
 800cd76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd7a:	e082      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd82:	e07e      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd84:	2304      	movs	r3, #4
 800cd86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd8a:	e07a      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd8c:	2308      	movs	r3, #8
 800cd8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd92:	e076      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd94:	2310      	movs	r3, #16
 800cd96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd9a:	e072      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a35      	ldr	r2, [pc, #212]	; (800ce78 <UART_SetConfig+0x2dc>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d12a      	bne.n	800cdfc <UART_SetConfig+0x260>
 800cda6:	4b30      	ldr	r3, [pc, #192]	; (800ce68 <UART_SetConfig+0x2cc>)
 800cda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdb4:	d01a      	beq.n	800cdec <UART_SetConfig+0x250>
 800cdb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdba:	d81b      	bhi.n	800cdf4 <UART_SetConfig+0x258>
 800cdbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc0:	d00c      	beq.n	800cddc <UART_SetConfig+0x240>
 800cdc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc6:	d815      	bhi.n	800cdf4 <UART_SetConfig+0x258>
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <UART_SetConfig+0x238>
 800cdcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdd0:	d008      	beq.n	800cde4 <UART_SetConfig+0x248>
 800cdd2:	e00f      	b.n	800cdf4 <UART_SetConfig+0x258>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdda:	e052      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cddc:	2302      	movs	r3, #2
 800cdde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cde2:	e04e      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cde4:	2304      	movs	r3, #4
 800cde6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdea:	e04a      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cdec:	2308      	movs	r3, #8
 800cdee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdf2:	e046      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdfa:	e042      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a17      	ldr	r2, [pc, #92]	; (800ce60 <UART_SetConfig+0x2c4>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d13a      	bne.n	800ce7c <UART_SetConfig+0x2e0>
 800ce06:	4b18      	ldr	r3, [pc, #96]	; (800ce68 <UART_SetConfig+0x2cc>)
 800ce08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ce10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce14:	d01a      	beq.n	800ce4c <UART_SetConfig+0x2b0>
 800ce16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce1a:	d81b      	bhi.n	800ce54 <UART_SetConfig+0x2b8>
 800ce1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce20:	d00c      	beq.n	800ce3c <UART_SetConfig+0x2a0>
 800ce22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce26:	d815      	bhi.n	800ce54 <UART_SetConfig+0x2b8>
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d003      	beq.n	800ce34 <UART_SetConfig+0x298>
 800ce2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce30:	d008      	beq.n	800ce44 <UART_SetConfig+0x2a8>
 800ce32:	e00f      	b.n	800ce54 <UART_SetConfig+0x2b8>
 800ce34:	2300      	movs	r3, #0
 800ce36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce3a:	e022      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce42:	e01e      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ce44:	2304      	movs	r3, #4
 800ce46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce4a:	e01a      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce52:	e016      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ce54:	2310      	movs	r3, #16
 800ce56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ce5a:	e012      	b.n	800ce82 <UART_SetConfig+0x2e6>
 800ce5c:	efff69f3 	.word	0xefff69f3
 800ce60:	40008000 	.word	0x40008000
 800ce64:	40013800 	.word	0x40013800
 800ce68:	40021000 	.word	0x40021000
 800ce6c:	40004400 	.word	0x40004400
 800ce70:	40004800 	.word	0x40004800
 800ce74:	40004c00 	.word	0x40004c00
 800ce78:	40005000 	.word	0x40005000
 800ce7c:	2310      	movs	r3, #16
 800ce7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a9f      	ldr	r2, [pc, #636]	; (800d104 <UART_SetConfig+0x568>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d17a      	bne.n	800cf82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d824      	bhi.n	800cede <UART_SetConfig+0x342>
 800ce94:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <UART_SetConfig+0x300>)
 800ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9a:	bf00      	nop
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cedf 	.word	0x0800cedf
 800cea4:	0800cec9 	.word	0x0800cec9
 800cea8:	0800cedf 	.word	0x0800cedf
 800ceac:	0800cecf 	.word	0x0800cecf
 800ceb0:	0800cedf 	.word	0x0800cedf
 800ceb4:	0800cedf 	.word	0x0800cedf
 800ceb8:	0800cedf 	.word	0x0800cedf
 800cebc:	0800ced7 	.word	0x0800ced7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cec0:	f7fe ff82 	bl	800bdc8 <HAL_RCC_GetPCLK1Freq>
 800cec4:	61f8      	str	r0, [r7, #28]
        break;
 800cec6:	e010      	b.n	800ceea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cec8:	4b8f      	ldr	r3, [pc, #572]	; (800d108 <UART_SetConfig+0x56c>)
 800ceca:	61fb      	str	r3, [r7, #28]
        break;
 800cecc:	e00d      	b.n	800ceea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cece:	f7fe fee3 	bl	800bc98 <HAL_RCC_GetSysClockFreq>
 800ced2:	61f8      	str	r0, [r7, #28]
        break;
 800ced4:	e009      	b.n	800ceea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ced6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceda:	61fb      	str	r3, [r7, #28]
        break;
 800cedc:	e005      	b.n	800ceea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800cede:	2300      	movs	r3, #0
 800cee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cee8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 80fb 	beq.w	800d0e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	4613      	mov	r3, r2
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	4413      	add	r3, r2
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d305      	bcc.n	800cf0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cf08:	69fa      	ldr	r2, [r7, #28]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d903      	bls.n	800cf16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cf14:	e0e8      	b.n	800d0e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	4615      	mov	r5, r2
 800cf1e:	f04f 0200 	mov.w	r2, #0
 800cf22:	f04f 0300 	mov.w	r3, #0
 800cf26:	022b      	lsls	r3, r5, #8
 800cf28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cf2c:	0222      	lsls	r2, r4, #8
 800cf2e:	68f9      	ldr	r1, [r7, #12]
 800cf30:	6849      	ldr	r1, [r1, #4]
 800cf32:	0849      	lsrs	r1, r1, #1
 800cf34:	2000      	movs	r0, #0
 800cf36:	4688      	mov	r8, r1
 800cf38:	4681      	mov	r9, r0
 800cf3a:	eb12 0a08 	adds.w	sl, r2, r8
 800cf3e:	eb43 0b09 	adc.w	fp, r3, r9
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	603b      	str	r3, [r7, #0]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf50:	4650      	mov	r0, sl
 800cf52:	4659      	mov	r1, fp
 800cf54:	f7f3 fe98 	bl	8000c88 <__aeabi_uldivmod>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf66:	d308      	bcc.n	800cf7a <UART_SetConfig+0x3de>
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf6e:	d204      	bcs.n	800cf7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	69ba      	ldr	r2, [r7, #24]
 800cf76:	60da      	str	r2, [r3, #12]
 800cf78:	e0b6      	b.n	800d0e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cf80:	e0b2      	b.n	800d0e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	69db      	ldr	r3, [r3, #28]
 800cf86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf8a:	d15e      	bne.n	800d04a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cf8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf90:	2b08      	cmp	r3, #8
 800cf92:	d828      	bhi.n	800cfe6 <UART_SetConfig+0x44a>
 800cf94:	a201      	add	r2, pc, #4	; (adr r2, 800cf9c <UART_SetConfig+0x400>)
 800cf96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9a:	bf00      	nop
 800cf9c:	0800cfc1 	.word	0x0800cfc1
 800cfa0:	0800cfc9 	.word	0x0800cfc9
 800cfa4:	0800cfd1 	.word	0x0800cfd1
 800cfa8:	0800cfe7 	.word	0x0800cfe7
 800cfac:	0800cfd7 	.word	0x0800cfd7
 800cfb0:	0800cfe7 	.word	0x0800cfe7
 800cfb4:	0800cfe7 	.word	0x0800cfe7
 800cfb8:	0800cfe7 	.word	0x0800cfe7
 800cfbc:	0800cfdf 	.word	0x0800cfdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfc0:	f7fe ff02 	bl	800bdc8 <HAL_RCC_GetPCLK1Freq>
 800cfc4:	61f8      	str	r0, [r7, #28]
        break;
 800cfc6:	e014      	b.n	800cff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfc8:	f7fe ff14 	bl	800bdf4 <HAL_RCC_GetPCLK2Freq>
 800cfcc:	61f8      	str	r0, [r7, #28]
        break;
 800cfce:	e010      	b.n	800cff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfd0:	4b4d      	ldr	r3, [pc, #308]	; (800d108 <UART_SetConfig+0x56c>)
 800cfd2:	61fb      	str	r3, [r7, #28]
        break;
 800cfd4:	e00d      	b.n	800cff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfd6:	f7fe fe5f 	bl	800bc98 <HAL_RCC_GetSysClockFreq>
 800cfda:	61f8      	str	r0, [r7, #28]
        break;
 800cfdc:	e009      	b.n	800cff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfe2:	61fb      	str	r3, [r7, #28]
        break;
 800cfe4:	e005      	b.n	800cff2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d077      	beq.n	800d0e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	005a      	lsls	r2, r3, #1
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	085b      	lsrs	r3, r3, #1
 800d002:	441a      	add	r2, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	2b0f      	cmp	r3, #15
 800d012:	d916      	bls.n	800d042 <UART_SetConfig+0x4a6>
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d01a:	d212      	bcs.n	800d042 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	f023 030f 	bic.w	r3, r3, #15
 800d024:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	085b      	lsrs	r3, r3, #1
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	f003 0307 	and.w	r3, r3, #7
 800d030:	b29a      	uxth	r2, r3
 800d032:	8afb      	ldrh	r3, [r7, #22]
 800d034:	4313      	orrs	r3, r2
 800d036:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	8afa      	ldrh	r2, [r7, #22]
 800d03e:	60da      	str	r2, [r3, #12]
 800d040:	e052      	b.n	800d0e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d048:	e04e      	b.n	800d0e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d04a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d04e:	2b08      	cmp	r3, #8
 800d050:	d827      	bhi.n	800d0a2 <UART_SetConfig+0x506>
 800d052:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <UART_SetConfig+0x4bc>)
 800d054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d058:	0800d07d 	.word	0x0800d07d
 800d05c:	0800d085 	.word	0x0800d085
 800d060:	0800d08d 	.word	0x0800d08d
 800d064:	0800d0a3 	.word	0x0800d0a3
 800d068:	0800d093 	.word	0x0800d093
 800d06c:	0800d0a3 	.word	0x0800d0a3
 800d070:	0800d0a3 	.word	0x0800d0a3
 800d074:	0800d0a3 	.word	0x0800d0a3
 800d078:	0800d09b 	.word	0x0800d09b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d07c:	f7fe fea4 	bl	800bdc8 <HAL_RCC_GetPCLK1Freq>
 800d080:	61f8      	str	r0, [r7, #28]
        break;
 800d082:	e014      	b.n	800d0ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d084:	f7fe feb6 	bl	800bdf4 <HAL_RCC_GetPCLK2Freq>
 800d088:	61f8      	str	r0, [r7, #28]
        break;
 800d08a:	e010      	b.n	800d0ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d08c:	4b1e      	ldr	r3, [pc, #120]	; (800d108 <UART_SetConfig+0x56c>)
 800d08e:	61fb      	str	r3, [r7, #28]
        break;
 800d090:	e00d      	b.n	800d0ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d092:	f7fe fe01 	bl	800bc98 <HAL_RCC_GetSysClockFreq>
 800d096:	61f8      	str	r0, [r7, #28]
        break;
 800d098:	e009      	b.n	800d0ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d09e:	61fb      	str	r3, [r7, #28]
        break;
 800d0a0:	e005      	b.n	800d0ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d0ac:	bf00      	nop
    }

    if (pclk != 0U)
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d019      	beq.n	800d0e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	085a      	lsrs	r2, r3, #1
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	441a      	add	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	2b0f      	cmp	r3, #15
 800d0cc:	d909      	bls.n	800d0e2 <UART_SetConfig+0x546>
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0d4:	d205      	bcs.n	800d0e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	60da      	str	r2, [r3, #12]
 800d0e0:	e002      	b.n	800d0e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d0f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3728      	adds	r7, #40	; 0x28
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d102:	bf00      	nop
 800d104:	40008000 	.word	0x40008000
 800d108:	00f42400 	.word	0x00f42400

0800d10c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00a      	beq.n	800d136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00a      	beq.n	800d158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	430a      	orrs	r2, r1
 800d156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15c:	f003 0302 	and.w	r3, r3, #2
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00a      	beq.n	800d17a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	430a      	orrs	r2, r1
 800d178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	f003 0304 	and.w	r3, r3, #4
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a0:	f003 0310 	and.w	r3, r3, #16
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00a      	beq.n	800d1be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c2:	f003 0320 	and.w	r3, r3, #32
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01a      	beq.n	800d222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	430a      	orrs	r2, r1
 800d200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d20a:	d10a      	bne.n	800d222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	430a      	orrs	r2, r1
 800d220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	430a      	orrs	r2, r1
 800d242:	605a      	str	r2, [r3, #4]
  }
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b098      	sub	sp, #96	; 0x60
 800d254:	af02      	add	r7, sp, #8
 800d256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d260:	f7fc fcd2 	bl	8009c08 <HAL_GetTick>
 800d264:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0308 	and.w	r3, r3, #8
 800d270:	2b08      	cmp	r3, #8
 800d272:	d12e      	bne.n	800d2d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d27c:	2200      	movs	r2, #0
 800d27e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f88c 	bl	800d3a0 <UART_WaitOnFlagUntilTimeout>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d021      	beq.n	800d2d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	e853 3f00 	ldrex	r3, [r3]
 800d29a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2a2:	653b      	str	r3, [r7, #80]	; 0x50
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800d2ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e6      	bne.n	800d28e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2220      	movs	r2, #32
 800d2c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	e062      	b.n	800d398 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 0304 	and.w	r3, r3, #4
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	d149      	bne.n	800d374 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f856 	bl	800d3a0 <UART_WaitOnFlagUntilTimeout>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d03c      	beq.n	800d374 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	e853 3f00 	ldrex	r3, [r3]
 800d306:	623b      	str	r3, [r7, #32]
   return(result);
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d30e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	461a      	mov	r2, r3
 800d316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d318:	633b      	str	r3, [r7, #48]	; 0x30
 800d31a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d320:	e841 2300 	strex	r3, r2, [r1]
 800d324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1e6      	bne.n	800d2fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3308      	adds	r3, #8
 800d332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	e853 3f00 	ldrex	r3, [r3]
 800d33a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 0301 	bic.w	r3, r3, #1
 800d342:	64bb      	str	r3, [r7, #72]	; 0x48
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3308      	adds	r3, #8
 800d34a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d34c:	61fa      	str	r2, [r7, #28]
 800d34e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d350:	69b9      	ldr	r1, [r7, #24]
 800d352:	69fa      	ldr	r2, [r7, #28]
 800d354:	e841 2300 	strex	r3, r2, [r1]
 800d358:	617b      	str	r3, [r7, #20]
   return(result);
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e5      	bne.n	800d32c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2220      	movs	r2, #32
 800d364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d370:	2303      	movs	r3, #3
 800d372:	e011      	b.n	800d398 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2220      	movs	r2, #32
 800d378:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3758      	adds	r7, #88	; 0x58
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	603b      	str	r3, [r7, #0]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3b0:	e049      	b.n	800d446 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b8:	d045      	beq.n	800d446 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3ba:	f7fc fc25 	bl	8009c08 <HAL_GetTick>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d302      	bcc.n	800d3d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	e048      	b.n	800d466 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0304 	and.w	r3, r3, #4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d031      	beq.n	800d446 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	f003 0308 	and.w	r3, r3, #8
 800d3ec:	2b08      	cmp	r3, #8
 800d3ee:	d110      	bne.n	800d412 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2208      	movs	r2, #8
 800d3f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f000 f838 	bl	800d46e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2208      	movs	r2, #8
 800d402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e029      	b.n	800d466 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	69db      	ldr	r3, [r3, #28]
 800d418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d41c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d420:	d111      	bne.n	800d446 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d42a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 f81e 	bl	800d46e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2220      	movs	r2, #32
 800d436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e00f      	b.n	800d466 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	69da      	ldr	r2, [r3, #28]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4013      	ands	r3, r2
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	429a      	cmp	r2, r3
 800d454:	bf0c      	ite	eq
 800d456:	2301      	moveq	r3, #1
 800d458:	2300      	movne	r3, #0
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	461a      	mov	r2, r3
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	429a      	cmp	r2, r3
 800d462:	d0a6      	beq.n	800d3b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d46e:	b480      	push	{r7}
 800d470:	b095      	sub	sp, #84	; 0x54
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47e:	e853 3f00 	ldrex	r3, [r3]
 800d482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d48a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d494:	643b      	str	r3, [r7, #64]	; 0x40
 800d496:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d49a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d49c:	e841 2300 	strex	r3, r2, [r1]
 800d4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1e6      	bne.n	800d476 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3308      	adds	r3, #8
 800d4ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	f023 0301 	bic.w	r3, r3, #1
 800d4be:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3308      	adds	r3, #8
 800d4c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4d0:	e841 2300 	strex	r3, r2, [r1]
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1e5      	bne.n	800d4a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d118      	bne.n	800d516 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	e853 3f00 	ldrex	r3, [r3]
 800d4f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	f023 0310 	bic.w	r3, r3, #16
 800d4f8:	647b      	str	r3, [r7, #68]	; 0x44
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d502:	61bb      	str	r3, [r7, #24]
 800d504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d506:	6979      	ldr	r1, [r7, #20]
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	e841 2300 	strex	r3, r2, [r1]
 800d50e:	613b      	str	r3, [r7, #16]
   return(result);
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1e6      	bne.n	800d4e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2220      	movs	r2, #32
 800d51a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d52a:	bf00      	nop
 800d52c:	3754      	adds	r7, #84	; 0x54
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <__cvt>:
 800d536:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d53a:	ec55 4b10 	vmov	r4, r5, d0
 800d53e:	2d00      	cmp	r5, #0
 800d540:	460e      	mov	r6, r1
 800d542:	4619      	mov	r1, r3
 800d544:	462b      	mov	r3, r5
 800d546:	bfbb      	ittet	lt
 800d548:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d54c:	461d      	movlt	r5, r3
 800d54e:	2300      	movge	r3, #0
 800d550:	232d      	movlt	r3, #45	; 0x2d
 800d552:	700b      	strb	r3, [r1, #0]
 800d554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d556:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d55a:	4691      	mov	r9, r2
 800d55c:	f023 0820 	bic.w	r8, r3, #32
 800d560:	bfbc      	itt	lt
 800d562:	4622      	movlt	r2, r4
 800d564:	4614      	movlt	r4, r2
 800d566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d56a:	d005      	beq.n	800d578 <__cvt+0x42>
 800d56c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d570:	d100      	bne.n	800d574 <__cvt+0x3e>
 800d572:	3601      	adds	r6, #1
 800d574:	2102      	movs	r1, #2
 800d576:	e000      	b.n	800d57a <__cvt+0x44>
 800d578:	2103      	movs	r1, #3
 800d57a:	ab03      	add	r3, sp, #12
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	ab02      	add	r3, sp, #8
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	ec45 4b10 	vmov	d0, r4, r5
 800d586:	4653      	mov	r3, sl
 800d588:	4632      	mov	r2, r6
 800d58a:	f001 f8c5 	bl	800e718 <_dtoa_r>
 800d58e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d592:	4607      	mov	r7, r0
 800d594:	d102      	bne.n	800d59c <__cvt+0x66>
 800d596:	f019 0f01 	tst.w	r9, #1
 800d59a:	d022      	beq.n	800d5e2 <__cvt+0xac>
 800d59c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5a0:	eb07 0906 	add.w	r9, r7, r6
 800d5a4:	d110      	bne.n	800d5c8 <__cvt+0x92>
 800d5a6:	783b      	ldrb	r3, [r7, #0]
 800d5a8:	2b30      	cmp	r3, #48	; 0x30
 800d5aa:	d10a      	bne.n	800d5c2 <__cvt+0x8c>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	f7f3 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5b8:	b918      	cbnz	r0, 800d5c2 <__cvt+0x8c>
 800d5ba:	f1c6 0601 	rsb	r6, r6, #1
 800d5be:	f8ca 6000 	str.w	r6, [sl]
 800d5c2:	f8da 3000 	ldr.w	r3, [sl]
 800d5c6:	4499      	add	r9, r3
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f3 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5d4:	b108      	cbz	r0, 800d5da <__cvt+0xa4>
 800d5d6:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5da:	2230      	movs	r2, #48	; 0x30
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	454b      	cmp	r3, r9
 800d5e0:	d307      	bcc.n	800d5f2 <__cvt+0xbc>
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5e6:	1bdb      	subs	r3, r3, r7
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	6013      	str	r3, [r2, #0]
 800d5ec:	b004      	add	sp, #16
 800d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f2:	1c59      	adds	r1, r3, #1
 800d5f4:	9103      	str	r1, [sp, #12]
 800d5f6:	701a      	strb	r2, [r3, #0]
 800d5f8:	e7f0      	b.n	800d5dc <__cvt+0xa6>

0800d5fa <__exponent>:
 800d5fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2900      	cmp	r1, #0
 800d600:	bfb8      	it	lt
 800d602:	4249      	neglt	r1, r1
 800d604:	f803 2b02 	strb.w	r2, [r3], #2
 800d608:	bfb4      	ite	lt
 800d60a:	222d      	movlt	r2, #45	; 0x2d
 800d60c:	222b      	movge	r2, #43	; 0x2b
 800d60e:	2909      	cmp	r1, #9
 800d610:	7042      	strb	r2, [r0, #1]
 800d612:	dd2a      	ble.n	800d66a <__exponent+0x70>
 800d614:	f10d 0207 	add.w	r2, sp, #7
 800d618:	4617      	mov	r7, r2
 800d61a:	260a      	movs	r6, #10
 800d61c:	4694      	mov	ip, r2
 800d61e:	fb91 f5f6 	sdiv	r5, r1, r6
 800d622:	fb06 1415 	mls	r4, r6, r5, r1
 800d626:	3430      	adds	r4, #48	; 0x30
 800d628:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d62c:	460c      	mov	r4, r1
 800d62e:	2c63      	cmp	r4, #99	; 0x63
 800d630:	f102 32ff 	add.w	r2, r2, #4294967295
 800d634:	4629      	mov	r1, r5
 800d636:	dcf1      	bgt.n	800d61c <__exponent+0x22>
 800d638:	3130      	adds	r1, #48	; 0x30
 800d63a:	f1ac 0402 	sub.w	r4, ip, #2
 800d63e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d642:	1c41      	adds	r1, r0, #1
 800d644:	4622      	mov	r2, r4
 800d646:	42ba      	cmp	r2, r7
 800d648:	d30a      	bcc.n	800d660 <__exponent+0x66>
 800d64a:	f10d 0209 	add.w	r2, sp, #9
 800d64e:	eba2 020c 	sub.w	r2, r2, ip
 800d652:	42bc      	cmp	r4, r7
 800d654:	bf88      	it	hi
 800d656:	2200      	movhi	r2, #0
 800d658:	4413      	add	r3, r2
 800d65a:	1a18      	subs	r0, r3, r0
 800d65c:	b003      	add	sp, #12
 800d65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d660:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d664:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d668:	e7ed      	b.n	800d646 <__exponent+0x4c>
 800d66a:	2330      	movs	r3, #48	; 0x30
 800d66c:	3130      	adds	r1, #48	; 0x30
 800d66e:	7083      	strb	r3, [r0, #2]
 800d670:	70c1      	strb	r1, [r0, #3]
 800d672:	1d03      	adds	r3, r0, #4
 800d674:	e7f1      	b.n	800d65a <__exponent+0x60>
	...

0800d678 <_printf_float>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	ed2d 8b02 	vpush	{d8}
 800d680:	b08d      	sub	sp, #52	; 0x34
 800d682:	460c      	mov	r4, r1
 800d684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d688:	4616      	mov	r6, r2
 800d68a:	461f      	mov	r7, r3
 800d68c:	4605      	mov	r5, r0
 800d68e:	f000 ff3d 	bl	800e50c <_localeconv_r>
 800d692:	f8d0 a000 	ldr.w	sl, [r0]
 800d696:	4650      	mov	r0, sl
 800d698:	f7f2 fdea 	bl	8000270 <strlen>
 800d69c:	2300      	movs	r3, #0
 800d69e:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	9305      	str	r3, [sp, #20]
 800d6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d6a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d6ac:	3307      	adds	r3, #7
 800d6ae:	f023 0307 	bic.w	r3, r3, #7
 800d6b2:	f103 0208 	add.w	r2, r3, #8
 800d6b6:	f8c8 2000 	str.w	r2, [r8]
 800d6ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d6c2:	9307      	str	r3, [sp, #28]
 800d6c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6c8:	ee08 0a10 	vmov	s16, r0
 800d6cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d6d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6d4:	4b9e      	ldr	r3, [pc, #632]	; (800d950 <_printf_float+0x2d8>)
 800d6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6da:	f7f3 fa27 	bl	8000b2c <__aeabi_dcmpun>
 800d6de:	bb88      	cbnz	r0, 800d744 <_printf_float+0xcc>
 800d6e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6e4:	4b9a      	ldr	r3, [pc, #616]	; (800d950 <_printf_float+0x2d8>)
 800d6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ea:	f7f3 fa01 	bl	8000af0 <__aeabi_dcmple>
 800d6ee:	bb48      	cbnz	r0, 800d744 <_printf_float+0xcc>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	f7f3 f9f0 	bl	8000adc <__aeabi_dcmplt>
 800d6fc:	b110      	cbz	r0, 800d704 <_printf_float+0x8c>
 800d6fe:	232d      	movs	r3, #45	; 0x2d
 800d700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d704:	4a93      	ldr	r2, [pc, #588]	; (800d954 <_printf_float+0x2dc>)
 800d706:	4b94      	ldr	r3, [pc, #592]	; (800d958 <_printf_float+0x2e0>)
 800d708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d70c:	bf94      	ite	ls
 800d70e:	4690      	movls	r8, r2
 800d710:	4698      	movhi	r8, r3
 800d712:	2303      	movs	r3, #3
 800d714:	6123      	str	r3, [r4, #16]
 800d716:	9b05      	ldr	r3, [sp, #20]
 800d718:	f023 0304 	bic.w	r3, r3, #4
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	f04f 0900 	mov.w	r9, #0
 800d722:	9700      	str	r7, [sp, #0]
 800d724:	4633      	mov	r3, r6
 800d726:	aa0b      	add	r2, sp, #44	; 0x2c
 800d728:	4621      	mov	r1, r4
 800d72a:	4628      	mov	r0, r5
 800d72c:	f000 f9da 	bl	800dae4 <_printf_common>
 800d730:	3001      	adds	r0, #1
 800d732:	f040 8090 	bne.w	800d856 <_printf_float+0x1de>
 800d736:	f04f 30ff 	mov.w	r0, #4294967295
 800d73a:	b00d      	add	sp, #52	; 0x34
 800d73c:	ecbd 8b02 	vpop	{d8}
 800d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d744:	4642      	mov	r2, r8
 800d746:	464b      	mov	r3, r9
 800d748:	4640      	mov	r0, r8
 800d74a:	4649      	mov	r1, r9
 800d74c:	f7f3 f9ee 	bl	8000b2c <__aeabi_dcmpun>
 800d750:	b140      	cbz	r0, 800d764 <_printf_float+0xec>
 800d752:	464b      	mov	r3, r9
 800d754:	2b00      	cmp	r3, #0
 800d756:	bfbc      	itt	lt
 800d758:	232d      	movlt	r3, #45	; 0x2d
 800d75a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d75e:	4a7f      	ldr	r2, [pc, #508]	; (800d95c <_printf_float+0x2e4>)
 800d760:	4b7f      	ldr	r3, [pc, #508]	; (800d960 <_printf_float+0x2e8>)
 800d762:	e7d1      	b.n	800d708 <_printf_float+0x90>
 800d764:	6863      	ldr	r3, [r4, #4]
 800d766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d76a:	9206      	str	r2, [sp, #24]
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	d13f      	bne.n	800d7f0 <_printf_float+0x178>
 800d770:	2306      	movs	r3, #6
 800d772:	6063      	str	r3, [r4, #4]
 800d774:	9b05      	ldr	r3, [sp, #20]
 800d776:	6861      	ldr	r1, [r4, #4]
 800d778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d77c:	2300      	movs	r3, #0
 800d77e:	9303      	str	r3, [sp, #12]
 800d780:	ab0a      	add	r3, sp, #40	; 0x28
 800d782:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d786:	ab09      	add	r3, sp, #36	; 0x24
 800d788:	ec49 8b10 	vmov	d0, r8, r9
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	6022      	str	r2, [r4, #0]
 800d790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d794:	4628      	mov	r0, r5
 800d796:	f7ff fece 	bl	800d536 <__cvt>
 800d79a:	9b06      	ldr	r3, [sp, #24]
 800d79c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d79e:	2b47      	cmp	r3, #71	; 0x47
 800d7a0:	4680      	mov	r8, r0
 800d7a2:	d108      	bne.n	800d7b6 <_printf_float+0x13e>
 800d7a4:	1cc8      	adds	r0, r1, #3
 800d7a6:	db02      	blt.n	800d7ae <_printf_float+0x136>
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	4299      	cmp	r1, r3
 800d7ac:	dd41      	ble.n	800d832 <_printf_float+0x1ba>
 800d7ae:	f1ab 0302 	sub.w	r3, fp, #2
 800d7b2:	fa5f fb83 	uxtb.w	fp, r3
 800d7b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7ba:	d820      	bhi.n	800d7fe <_printf_float+0x186>
 800d7bc:	3901      	subs	r1, #1
 800d7be:	465a      	mov	r2, fp
 800d7c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d7c4:	9109      	str	r1, [sp, #36]	; 0x24
 800d7c6:	f7ff ff18 	bl	800d5fa <__exponent>
 800d7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7cc:	1813      	adds	r3, r2, r0
 800d7ce:	2a01      	cmp	r2, #1
 800d7d0:	4681      	mov	r9, r0
 800d7d2:	6123      	str	r3, [r4, #16]
 800d7d4:	dc02      	bgt.n	800d7dc <_printf_float+0x164>
 800d7d6:	6822      	ldr	r2, [r4, #0]
 800d7d8:	07d2      	lsls	r2, r2, #31
 800d7da:	d501      	bpl.n	800d7e0 <_printf_float+0x168>
 800d7dc:	3301      	adds	r3, #1
 800d7de:	6123      	str	r3, [r4, #16]
 800d7e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d09c      	beq.n	800d722 <_printf_float+0xaa>
 800d7e8:	232d      	movs	r3, #45	; 0x2d
 800d7ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ee:	e798      	b.n	800d722 <_printf_float+0xaa>
 800d7f0:	9a06      	ldr	r2, [sp, #24]
 800d7f2:	2a47      	cmp	r2, #71	; 0x47
 800d7f4:	d1be      	bne.n	800d774 <_printf_float+0xfc>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1bc      	bne.n	800d774 <_printf_float+0xfc>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e7b9      	b.n	800d772 <_printf_float+0xfa>
 800d7fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d802:	d118      	bne.n	800d836 <_printf_float+0x1be>
 800d804:	2900      	cmp	r1, #0
 800d806:	6863      	ldr	r3, [r4, #4]
 800d808:	dd0b      	ble.n	800d822 <_printf_float+0x1aa>
 800d80a:	6121      	str	r1, [r4, #16]
 800d80c:	b913      	cbnz	r3, 800d814 <_printf_float+0x19c>
 800d80e:	6822      	ldr	r2, [r4, #0]
 800d810:	07d0      	lsls	r0, r2, #31
 800d812:	d502      	bpl.n	800d81a <_printf_float+0x1a2>
 800d814:	3301      	adds	r3, #1
 800d816:	440b      	add	r3, r1
 800d818:	6123      	str	r3, [r4, #16]
 800d81a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d81c:	f04f 0900 	mov.w	r9, #0
 800d820:	e7de      	b.n	800d7e0 <_printf_float+0x168>
 800d822:	b913      	cbnz	r3, 800d82a <_printf_float+0x1b2>
 800d824:	6822      	ldr	r2, [r4, #0]
 800d826:	07d2      	lsls	r2, r2, #31
 800d828:	d501      	bpl.n	800d82e <_printf_float+0x1b6>
 800d82a:	3302      	adds	r3, #2
 800d82c:	e7f4      	b.n	800d818 <_printf_float+0x1a0>
 800d82e:	2301      	movs	r3, #1
 800d830:	e7f2      	b.n	800d818 <_printf_float+0x1a0>
 800d832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d838:	4299      	cmp	r1, r3
 800d83a:	db05      	blt.n	800d848 <_printf_float+0x1d0>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	6121      	str	r1, [r4, #16]
 800d840:	07d8      	lsls	r0, r3, #31
 800d842:	d5ea      	bpl.n	800d81a <_printf_float+0x1a2>
 800d844:	1c4b      	adds	r3, r1, #1
 800d846:	e7e7      	b.n	800d818 <_printf_float+0x1a0>
 800d848:	2900      	cmp	r1, #0
 800d84a:	bfd4      	ite	le
 800d84c:	f1c1 0202 	rsble	r2, r1, #2
 800d850:	2201      	movgt	r2, #1
 800d852:	4413      	add	r3, r2
 800d854:	e7e0      	b.n	800d818 <_printf_float+0x1a0>
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	055a      	lsls	r2, r3, #21
 800d85a:	d407      	bmi.n	800d86c <_printf_float+0x1f4>
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	4642      	mov	r2, r8
 800d860:	4631      	mov	r1, r6
 800d862:	4628      	mov	r0, r5
 800d864:	47b8      	blx	r7
 800d866:	3001      	adds	r0, #1
 800d868:	d12c      	bne.n	800d8c4 <_printf_float+0x24c>
 800d86a:	e764      	b.n	800d736 <_printf_float+0xbe>
 800d86c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d870:	f240 80e0 	bls.w	800da34 <_printf_float+0x3bc>
 800d874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d878:	2200      	movs	r2, #0
 800d87a:	2300      	movs	r3, #0
 800d87c:	f7f3 f924 	bl	8000ac8 <__aeabi_dcmpeq>
 800d880:	2800      	cmp	r0, #0
 800d882:	d034      	beq.n	800d8ee <_printf_float+0x276>
 800d884:	4a37      	ldr	r2, [pc, #220]	; (800d964 <_printf_float+0x2ec>)
 800d886:	2301      	movs	r3, #1
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f af51 	beq.w	800d736 <_printf_float+0xbe>
 800d894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d898:	429a      	cmp	r2, r3
 800d89a:	db02      	blt.n	800d8a2 <_printf_float+0x22a>
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	07d8      	lsls	r0, r3, #31
 800d8a0:	d510      	bpl.n	800d8c4 <_printf_float+0x24c>
 800d8a2:	ee18 3a10 	vmov	r3, s16
 800d8a6:	4652      	mov	r2, sl
 800d8a8:	4631      	mov	r1, r6
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	47b8      	blx	r7
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	f43f af41 	beq.w	800d736 <_printf_float+0xbe>
 800d8b4:	f04f 0800 	mov.w	r8, #0
 800d8b8:	f104 091a 	add.w	r9, r4, #26
 800d8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	4543      	cmp	r3, r8
 800d8c2:	dc09      	bgt.n	800d8d8 <_printf_float+0x260>
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	079b      	lsls	r3, r3, #30
 800d8c8:	f100 8107 	bmi.w	800dada <_printf_float+0x462>
 800d8cc:	68e0      	ldr	r0, [r4, #12]
 800d8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8d0:	4298      	cmp	r0, r3
 800d8d2:	bfb8      	it	lt
 800d8d4:	4618      	movlt	r0, r3
 800d8d6:	e730      	b.n	800d73a <_printf_float+0xc2>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	464a      	mov	r2, r9
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4628      	mov	r0, r5
 800d8e0:	47b8      	blx	r7
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	f43f af27 	beq.w	800d736 <_printf_float+0xbe>
 800d8e8:	f108 0801 	add.w	r8, r8, #1
 800d8ec:	e7e6      	b.n	800d8bc <_printf_float+0x244>
 800d8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	dc39      	bgt.n	800d968 <_printf_float+0x2f0>
 800d8f4:	4a1b      	ldr	r2, [pc, #108]	; (800d964 <_printf_float+0x2ec>)
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	4631      	mov	r1, r6
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	47b8      	blx	r7
 800d8fe:	3001      	adds	r0, #1
 800d900:	f43f af19 	beq.w	800d736 <_printf_float+0xbe>
 800d904:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d908:	4313      	orrs	r3, r2
 800d90a:	d102      	bne.n	800d912 <_printf_float+0x29a>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	07d9      	lsls	r1, r3, #31
 800d910:	d5d8      	bpl.n	800d8c4 <_printf_float+0x24c>
 800d912:	ee18 3a10 	vmov	r3, s16
 800d916:	4652      	mov	r2, sl
 800d918:	4631      	mov	r1, r6
 800d91a:	4628      	mov	r0, r5
 800d91c:	47b8      	blx	r7
 800d91e:	3001      	adds	r0, #1
 800d920:	f43f af09 	beq.w	800d736 <_printf_float+0xbe>
 800d924:	f04f 0900 	mov.w	r9, #0
 800d928:	f104 0a1a 	add.w	sl, r4, #26
 800d92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d92e:	425b      	negs	r3, r3
 800d930:	454b      	cmp	r3, r9
 800d932:	dc01      	bgt.n	800d938 <_printf_float+0x2c0>
 800d934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d936:	e792      	b.n	800d85e <_printf_float+0x1e6>
 800d938:	2301      	movs	r3, #1
 800d93a:	4652      	mov	r2, sl
 800d93c:	4631      	mov	r1, r6
 800d93e:	4628      	mov	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	3001      	adds	r0, #1
 800d944:	f43f aef7 	beq.w	800d736 <_printf_float+0xbe>
 800d948:	f109 0901 	add.w	r9, r9, #1
 800d94c:	e7ee      	b.n	800d92c <_printf_float+0x2b4>
 800d94e:	bf00      	nop
 800d950:	7fefffff 	.word	0x7fefffff
 800d954:	08012ea8 	.word	0x08012ea8
 800d958:	08012eac 	.word	0x08012eac
 800d95c:	08012eb0 	.word	0x08012eb0
 800d960:	08012eb4 	.word	0x08012eb4
 800d964:	08012eb8 	.word	0x08012eb8
 800d968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d96a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d96c:	429a      	cmp	r2, r3
 800d96e:	bfa8      	it	ge
 800d970:	461a      	movge	r2, r3
 800d972:	2a00      	cmp	r2, #0
 800d974:	4691      	mov	r9, r2
 800d976:	dc37      	bgt.n	800d9e8 <_printf_float+0x370>
 800d978:	f04f 0b00 	mov.w	fp, #0
 800d97c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d980:	f104 021a 	add.w	r2, r4, #26
 800d984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d986:	9305      	str	r3, [sp, #20]
 800d988:	eba3 0309 	sub.w	r3, r3, r9
 800d98c:	455b      	cmp	r3, fp
 800d98e:	dc33      	bgt.n	800d9f8 <_printf_float+0x380>
 800d990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d994:	429a      	cmp	r2, r3
 800d996:	db3b      	blt.n	800da10 <_printf_float+0x398>
 800d998:	6823      	ldr	r3, [r4, #0]
 800d99a:	07da      	lsls	r2, r3, #31
 800d99c:	d438      	bmi.n	800da10 <_printf_float+0x398>
 800d99e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9a2:	eba2 0903 	sub.w	r9, r2, r3
 800d9a6:	9b05      	ldr	r3, [sp, #20]
 800d9a8:	1ad2      	subs	r2, r2, r3
 800d9aa:	4591      	cmp	r9, r2
 800d9ac:	bfa8      	it	ge
 800d9ae:	4691      	movge	r9, r2
 800d9b0:	f1b9 0f00 	cmp.w	r9, #0
 800d9b4:	dc35      	bgt.n	800da22 <_printf_float+0x3aa>
 800d9b6:	f04f 0800 	mov.w	r8, #0
 800d9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9be:	f104 0a1a 	add.w	sl, r4, #26
 800d9c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9c6:	1a9b      	subs	r3, r3, r2
 800d9c8:	eba3 0309 	sub.w	r3, r3, r9
 800d9cc:	4543      	cmp	r3, r8
 800d9ce:	f77f af79 	ble.w	800d8c4 <_printf_float+0x24c>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	4652      	mov	r2, sl
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4628      	mov	r0, r5
 800d9da:	47b8      	blx	r7
 800d9dc:	3001      	adds	r0, #1
 800d9de:	f43f aeaa 	beq.w	800d736 <_printf_float+0xbe>
 800d9e2:	f108 0801 	add.w	r8, r8, #1
 800d9e6:	e7ec      	b.n	800d9c2 <_printf_float+0x34a>
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	4642      	mov	r2, r8
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	47b8      	blx	r7
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	d1c0      	bne.n	800d978 <_printf_float+0x300>
 800d9f6:	e69e      	b.n	800d736 <_printf_float+0xbe>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	9205      	str	r2, [sp, #20]
 800da00:	47b8      	blx	r7
 800da02:	3001      	adds	r0, #1
 800da04:	f43f ae97 	beq.w	800d736 <_printf_float+0xbe>
 800da08:	9a05      	ldr	r2, [sp, #20]
 800da0a:	f10b 0b01 	add.w	fp, fp, #1
 800da0e:	e7b9      	b.n	800d984 <_printf_float+0x30c>
 800da10:	ee18 3a10 	vmov	r3, s16
 800da14:	4652      	mov	r2, sl
 800da16:	4631      	mov	r1, r6
 800da18:	4628      	mov	r0, r5
 800da1a:	47b8      	blx	r7
 800da1c:	3001      	adds	r0, #1
 800da1e:	d1be      	bne.n	800d99e <_printf_float+0x326>
 800da20:	e689      	b.n	800d736 <_printf_float+0xbe>
 800da22:	9a05      	ldr	r2, [sp, #20]
 800da24:	464b      	mov	r3, r9
 800da26:	4442      	add	r2, r8
 800da28:	4631      	mov	r1, r6
 800da2a:	4628      	mov	r0, r5
 800da2c:	47b8      	blx	r7
 800da2e:	3001      	adds	r0, #1
 800da30:	d1c1      	bne.n	800d9b6 <_printf_float+0x33e>
 800da32:	e680      	b.n	800d736 <_printf_float+0xbe>
 800da34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da36:	2a01      	cmp	r2, #1
 800da38:	dc01      	bgt.n	800da3e <_printf_float+0x3c6>
 800da3a:	07db      	lsls	r3, r3, #31
 800da3c:	d53a      	bpl.n	800dab4 <_printf_float+0x43c>
 800da3e:	2301      	movs	r3, #1
 800da40:	4642      	mov	r2, r8
 800da42:	4631      	mov	r1, r6
 800da44:	4628      	mov	r0, r5
 800da46:	47b8      	blx	r7
 800da48:	3001      	adds	r0, #1
 800da4a:	f43f ae74 	beq.w	800d736 <_printf_float+0xbe>
 800da4e:	ee18 3a10 	vmov	r3, s16
 800da52:	4652      	mov	r2, sl
 800da54:	4631      	mov	r1, r6
 800da56:	4628      	mov	r0, r5
 800da58:	47b8      	blx	r7
 800da5a:	3001      	adds	r0, #1
 800da5c:	f43f ae6b 	beq.w	800d736 <_printf_float+0xbe>
 800da60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da64:	2200      	movs	r2, #0
 800da66:	2300      	movs	r3, #0
 800da68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800da6c:	f7f3 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 800da70:	b9d8      	cbnz	r0, 800daaa <_printf_float+0x432>
 800da72:	f10a 33ff 	add.w	r3, sl, #4294967295
 800da76:	f108 0201 	add.w	r2, r8, #1
 800da7a:	4631      	mov	r1, r6
 800da7c:	4628      	mov	r0, r5
 800da7e:	47b8      	blx	r7
 800da80:	3001      	adds	r0, #1
 800da82:	d10e      	bne.n	800daa2 <_printf_float+0x42a>
 800da84:	e657      	b.n	800d736 <_printf_float+0xbe>
 800da86:	2301      	movs	r3, #1
 800da88:	4652      	mov	r2, sl
 800da8a:	4631      	mov	r1, r6
 800da8c:	4628      	mov	r0, r5
 800da8e:	47b8      	blx	r7
 800da90:	3001      	adds	r0, #1
 800da92:	f43f ae50 	beq.w	800d736 <_printf_float+0xbe>
 800da96:	f108 0801 	add.w	r8, r8, #1
 800da9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da9c:	3b01      	subs	r3, #1
 800da9e:	4543      	cmp	r3, r8
 800daa0:	dcf1      	bgt.n	800da86 <_printf_float+0x40e>
 800daa2:	464b      	mov	r3, r9
 800daa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800daa8:	e6da      	b.n	800d860 <_printf_float+0x1e8>
 800daaa:	f04f 0800 	mov.w	r8, #0
 800daae:	f104 0a1a 	add.w	sl, r4, #26
 800dab2:	e7f2      	b.n	800da9a <_printf_float+0x422>
 800dab4:	2301      	movs	r3, #1
 800dab6:	4642      	mov	r2, r8
 800dab8:	e7df      	b.n	800da7a <_printf_float+0x402>
 800daba:	2301      	movs	r3, #1
 800dabc:	464a      	mov	r2, r9
 800dabe:	4631      	mov	r1, r6
 800dac0:	4628      	mov	r0, r5
 800dac2:	47b8      	blx	r7
 800dac4:	3001      	adds	r0, #1
 800dac6:	f43f ae36 	beq.w	800d736 <_printf_float+0xbe>
 800daca:	f108 0801 	add.w	r8, r8, #1
 800dace:	68e3      	ldr	r3, [r4, #12]
 800dad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dad2:	1a5b      	subs	r3, r3, r1
 800dad4:	4543      	cmp	r3, r8
 800dad6:	dcf0      	bgt.n	800daba <_printf_float+0x442>
 800dad8:	e6f8      	b.n	800d8cc <_printf_float+0x254>
 800dada:	f04f 0800 	mov.w	r8, #0
 800dade:	f104 0919 	add.w	r9, r4, #25
 800dae2:	e7f4      	b.n	800dace <_printf_float+0x456>

0800dae4 <_printf_common>:
 800dae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae8:	4616      	mov	r6, r2
 800daea:	4699      	mov	r9, r3
 800daec:	688a      	ldr	r2, [r1, #8]
 800daee:	690b      	ldr	r3, [r1, #16]
 800daf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800daf4:	4293      	cmp	r3, r2
 800daf6:	bfb8      	it	lt
 800daf8:	4613      	movlt	r3, r2
 800dafa:	6033      	str	r3, [r6, #0]
 800dafc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db00:	4607      	mov	r7, r0
 800db02:	460c      	mov	r4, r1
 800db04:	b10a      	cbz	r2, 800db0a <_printf_common+0x26>
 800db06:	3301      	adds	r3, #1
 800db08:	6033      	str	r3, [r6, #0]
 800db0a:	6823      	ldr	r3, [r4, #0]
 800db0c:	0699      	lsls	r1, r3, #26
 800db0e:	bf42      	ittt	mi
 800db10:	6833      	ldrmi	r3, [r6, #0]
 800db12:	3302      	addmi	r3, #2
 800db14:	6033      	strmi	r3, [r6, #0]
 800db16:	6825      	ldr	r5, [r4, #0]
 800db18:	f015 0506 	ands.w	r5, r5, #6
 800db1c:	d106      	bne.n	800db2c <_printf_common+0x48>
 800db1e:	f104 0a19 	add.w	sl, r4, #25
 800db22:	68e3      	ldr	r3, [r4, #12]
 800db24:	6832      	ldr	r2, [r6, #0]
 800db26:	1a9b      	subs	r3, r3, r2
 800db28:	42ab      	cmp	r3, r5
 800db2a:	dc26      	bgt.n	800db7a <_printf_common+0x96>
 800db2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db30:	1e13      	subs	r3, r2, #0
 800db32:	6822      	ldr	r2, [r4, #0]
 800db34:	bf18      	it	ne
 800db36:	2301      	movne	r3, #1
 800db38:	0692      	lsls	r2, r2, #26
 800db3a:	d42b      	bmi.n	800db94 <_printf_common+0xb0>
 800db3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db40:	4649      	mov	r1, r9
 800db42:	4638      	mov	r0, r7
 800db44:	47c0      	blx	r8
 800db46:	3001      	adds	r0, #1
 800db48:	d01e      	beq.n	800db88 <_printf_common+0xa4>
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	6922      	ldr	r2, [r4, #16]
 800db4e:	f003 0306 	and.w	r3, r3, #6
 800db52:	2b04      	cmp	r3, #4
 800db54:	bf02      	ittt	eq
 800db56:	68e5      	ldreq	r5, [r4, #12]
 800db58:	6833      	ldreq	r3, [r6, #0]
 800db5a:	1aed      	subeq	r5, r5, r3
 800db5c:	68a3      	ldr	r3, [r4, #8]
 800db5e:	bf0c      	ite	eq
 800db60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db64:	2500      	movne	r5, #0
 800db66:	4293      	cmp	r3, r2
 800db68:	bfc4      	itt	gt
 800db6a:	1a9b      	subgt	r3, r3, r2
 800db6c:	18ed      	addgt	r5, r5, r3
 800db6e:	2600      	movs	r6, #0
 800db70:	341a      	adds	r4, #26
 800db72:	42b5      	cmp	r5, r6
 800db74:	d11a      	bne.n	800dbac <_printf_common+0xc8>
 800db76:	2000      	movs	r0, #0
 800db78:	e008      	b.n	800db8c <_printf_common+0xa8>
 800db7a:	2301      	movs	r3, #1
 800db7c:	4652      	mov	r2, sl
 800db7e:	4649      	mov	r1, r9
 800db80:	4638      	mov	r0, r7
 800db82:	47c0      	blx	r8
 800db84:	3001      	adds	r0, #1
 800db86:	d103      	bne.n	800db90 <_printf_common+0xac>
 800db88:	f04f 30ff 	mov.w	r0, #4294967295
 800db8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db90:	3501      	adds	r5, #1
 800db92:	e7c6      	b.n	800db22 <_printf_common+0x3e>
 800db94:	18e1      	adds	r1, r4, r3
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	2030      	movs	r0, #48	; 0x30
 800db9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db9e:	4422      	add	r2, r4
 800dba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dba8:	3302      	adds	r3, #2
 800dbaa:	e7c7      	b.n	800db3c <_printf_common+0x58>
 800dbac:	2301      	movs	r3, #1
 800dbae:	4622      	mov	r2, r4
 800dbb0:	4649      	mov	r1, r9
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	47c0      	blx	r8
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	d0e6      	beq.n	800db88 <_printf_common+0xa4>
 800dbba:	3601      	adds	r6, #1
 800dbbc:	e7d9      	b.n	800db72 <_printf_common+0x8e>
	...

0800dbc0 <_printf_i>:
 800dbc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc4:	7e0f      	ldrb	r7, [r1, #24]
 800dbc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dbc8:	2f78      	cmp	r7, #120	; 0x78
 800dbca:	4691      	mov	r9, r2
 800dbcc:	4680      	mov	r8, r0
 800dbce:	460c      	mov	r4, r1
 800dbd0:	469a      	mov	sl, r3
 800dbd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dbd6:	d807      	bhi.n	800dbe8 <_printf_i+0x28>
 800dbd8:	2f62      	cmp	r7, #98	; 0x62
 800dbda:	d80a      	bhi.n	800dbf2 <_printf_i+0x32>
 800dbdc:	2f00      	cmp	r7, #0
 800dbde:	f000 80d4 	beq.w	800dd8a <_printf_i+0x1ca>
 800dbe2:	2f58      	cmp	r7, #88	; 0x58
 800dbe4:	f000 80c0 	beq.w	800dd68 <_printf_i+0x1a8>
 800dbe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dbf0:	e03a      	b.n	800dc68 <_printf_i+0xa8>
 800dbf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dbf6:	2b15      	cmp	r3, #21
 800dbf8:	d8f6      	bhi.n	800dbe8 <_printf_i+0x28>
 800dbfa:	a101      	add	r1, pc, #4	; (adr r1, 800dc00 <_printf_i+0x40>)
 800dbfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc00:	0800dc59 	.word	0x0800dc59
 800dc04:	0800dc6d 	.word	0x0800dc6d
 800dc08:	0800dbe9 	.word	0x0800dbe9
 800dc0c:	0800dbe9 	.word	0x0800dbe9
 800dc10:	0800dbe9 	.word	0x0800dbe9
 800dc14:	0800dbe9 	.word	0x0800dbe9
 800dc18:	0800dc6d 	.word	0x0800dc6d
 800dc1c:	0800dbe9 	.word	0x0800dbe9
 800dc20:	0800dbe9 	.word	0x0800dbe9
 800dc24:	0800dbe9 	.word	0x0800dbe9
 800dc28:	0800dbe9 	.word	0x0800dbe9
 800dc2c:	0800dd71 	.word	0x0800dd71
 800dc30:	0800dc99 	.word	0x0800dc99
 800dc34:	0800dd2b 	.word	0x0800dd2b
 800dc38:	0800dbe9 	.word	0x0800dbe9
 800dc3c:	0800dbe9 	.word	0x0800dbe9
 800dc40:	0800dd93 	.word	0x0800dd93
 800dc44:	0800dbe9 	.word	0x0800dbe9
 800dc48:	0800dc99 	.word	0x0800dc99
 800dc4c:	0800dbe9 	.word	0x0800dbe9
 800dc50:	0800dbe9 	.word	0x0800dbe9
 800dc54:	0800dd33 	.word	0x0800dd33
 800dc58:	682b      	ldr	r3, [r5, #0]
 800dc5a:	1d1a      	adds	r2, r3, #4
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	602a      	str	r2, [r5, #0]
 800dc60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e09f      	b.n	800ddac <_printf_i+0x1ec>
 800dc6c:	6820      	ldr	r0, [r4, #0]
 800dc6e:	682b      	ldr	r3, [r5, #0]
 800dc70:	0607      	lsls	r7, r0, #24
 800dc72:	f103 0104 	add.w	r1, r3, #4
 800dc76:	6029      	str	r1, [r5, #0]
 800dc78:	d501      	bpl.n	800dc7e <_printf_i+0xbe>
 800dc7a:	681e      	ldr	r6, [r3, #0]
 800dc7c:	e003      	b.n	800dc86 <_printf_i+0xc6>
 800dc7e:	0646      	lsls	r6, r0, #25
 800dc80:	d5fb      	bpl.n	800dc7a <_printf_i+0xba>
 800dc82:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dc86:	2e00      	cmp	r6, #0
 800dc88:	da03      	bge.n	800dc92 <_printf_i+0xd2>
 800dc8a:	232d      	movs	r3, #45	; 0x2d
 800dc8c:	4276      	negs	r6, r6
 800dc8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc92:	485a      	ldr	r0, [pc, #360]	; (800ddfc <_printf_i+0x23c>)
 800dc94:	230a      	movs	r3, #10
 800dc96:	e012      	b.n	800dcbe <_printf_i+0xfe>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	6820      	ldr	r0, [r4, #0]
 800dc9c:	1d19      	adds	r1, r3, #4
 800dc9e:	6029      	str	r1, [r5, #0]
 800dca0:	0605      	lsls	r5, r0, #24
 800dca2:	d501      	bpl.n	800dca8 <_printf_i+0xe8>
 800dca4:	681e      	ldr	r6, [r3, #0]
 800dca6:	e002      	b.n	800dcae <_printf_i+0xee>
 800dca8:	0641      	lsls	r1, r0, #25
 800dcaa:	d5fb      	bpl.n	800dca4 <_printf_i+0xe4>
 800dcac:	881e      	ldrh	r6, [r3, #0]
 800dcae:	4853      	ldr	r0, [pc, #332]	; (800ddfc <_printf_i+0x23c>)
 800dcb0:	2f6f      	cmp	r7, #111	; 0x6f
 800dcb2:	bf0c      	ite	eq
 800dcb4:	2308      	moveq	r3, #8
 800dcb6:	230a      	movne	r3, #10
 800dcb8:	2100      	movs	r1, #0
 800dcba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcbe:	6865      	ldr	r5, [r4, #4]
 800dcc0:	60a5      	str	r5, [r4, #8]
 800dcc2:	2d00      	cmp	r5, #0
 800dcc4:	bfa2      	ittt	ge
 800dcc6:	6821      	ldrge	r1, [r4, #0]
 800dcc8:	f021 0104 	bicge.w	r1, r1, #4
 800dccc:	6021      	strge	r1, [r4, #0]
 800dcce:	b90e      	cbnz	r6, 800dcd4 <_printf_i+0x114>
 800dcd0:	2d00      	cmp	r5, #0
 800dcd2:	d04b      	beq.n	800dd6c <_printf_i+0x1ac>
 800dcd4:	4615      	mov	r5, r2
 800dcd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dcda:	fb03 6711 	mls	r7, r3, r1, r6
 800dcde:	5dc7      	ldrb	r7, [r0, r7]
 800dce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dce4:	4637      	mov	r7, r6
 800dce6:	42bb      	cmp	r3, r7
 800dce8:	460e      	mov	r6, r1
 800dcea:	d9f4      	bls.n	800dcd6 <_printf_i+0x116>
 800dcec:	2b08      	cmp	r3, #8
 800dcee:	d10b      	bne.n	800dd08 <_printf_i+0x148>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	07de      	lsls	r6, r3, #31
 800dcf4:	d508      	bpl.n	800dd08 <_printf_i+0x148>
 800dcf6:	6923      	ldr	r3, [r4, #16]
 800dcf8:	6861      	ldr	r1, [r4, #4]
 800dcfa:	4299      	cmp	r1, r3
 800dcfc:	bfde      	ittt	le
 800dcfe:	2330      	movle	r3, #48	; 0x30
 800dd00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd08:	1b52      	subs	r2, r2, r5
 800dd0a:	6122      	str	r2, [r4, #16]
 800dd0c:	f8cd a000 	str.w	sl, [sp]
 800dd10:	464b      	mov	r3, r9
 800dd12:	aa03      	add	r2, sp, #12
 800dd14:	4621      	mov	r1, r4
 800dd16:	4640      	mov	r0, r8
 800dd18:	f7ff fee4 	bl	800dae4 <_printf_common>
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d14a      	bne.n	800ddb6 <_printf_i+0x1f6>
 800dd20:	f04f 30ff 	mov.w	r0, #4294967295
 800dd24:	b004      	add	sp, #16
 800dd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	f043 0320 	orr.w	r3, r3, #32
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	4833      	ldr	r0, [pc, #204]	; (800de00 <_printf_i+0x240>)
 800dd34:	2778      	movs	r7, #120	; 0x78
 800dd36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	6829      	ldr	r1, [r5, #0]
 800dd3e:	061f      	lsls	r7, r3, #24
 800dd40:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd44:	d402      	bmi.n	800dd4c <_printf_i+0x18c>
 800dd46:	065f      	lsls	r7, r3, #25
 800dd48:	bf48      	it	mi
 800dd4a:	b2b6      	uxthmi	r6, r6
 800dd4c:	07df      	lsls	r7, r3, #31
 800dd4e:	bf48      	it	mi
 800dd50:	f043 0320 	orrmi.w	r3, r3, #32
 800dd54:	6029      	str	r1, [r5, #0]
 800dd56:	bf48      	it	mi
 800dd58:	6023      	strmi	r3, [r4, #0]
 800dd5a:	b91e      	cbnz	r6, 800dd64 <_printf_i+0x1a4>
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	f023 0320 	bic.w	r3, r3, #32
 800dd62:	6023      	str	r3, [r4, #0]
 800dd64:	2310      	movs	r3, #16
 800dd66:	e7a7      	b.n	800dcb8 <_printf_i+0xf8>
 800dd68:	4824      	ldr	r0, [pc, #144]	; (800ddfc <_printf_i+0x23c>)
 800dd6a:	e7e4      	b.n	800dd36 <_printf_i+0x176>
 800dd6c:	4615      	mov	r5, r2
 800dd6e:	e7bd      	b.n	800dcec <_printf_i+0x12c>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	6826      	ldr	r6, [r4, #0]
 800dd74:	6961      	ldr	r1, [r4, #20]
 800dd76:	1d18      	adds	r0, r3, #4
 800dd78:	6028      	str	r0, [r5, #0]
 800dd7a:	0635      	lsls	r5, r6, #24
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	d501      	bpl.n	800dd84 <_printf_i+0x1c4>
 800dd80:	6019      	str	r1, [r3, #0]
 800dd82:	e002      	b.n	800dd8a <_printf_i+0x1ca>
 800dd84:	0670      	lsls	r0, r6, #25
 800dd86:	d5fb      	bpl.n	800dd80 <_printf_i+0x1c0>
 800dd88:	8019      	strh	r1, [r3, #0]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	4615      	mov	r5, r2
 800dd90:	e7bc      	b.n	800dd0c <_printf_i+0x14c>
 800dd92:	682b      	ldr	r3, [r5, #0]
 800dd94:	1d1a      	adds	r2, r3, #4
 800dd96:	602a      	str	r2, [r5, #0]
 800dd98:	681d      	ldr	r5, [r3, #0]
 800dd9a:	6862      	ldr	r2, [r4, #4]
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f7f2 fa16 	bl	80001d0 <memchr>
 800dda4:	b108      	cbz	r0, 800ddaa <_printf_i+0x1ea>
 800dda6:	1b40      	subs	r0, r0, r5
 800dda8:	6060      	str	r0, [r4, #4]
 800ddaa:	6863      	ldr	r3, [r4, #4]
 800ddac:	6123      	str	r3, [r4, #16]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddb4:	e7aa      	b.n	800dd0c <_printf_i+0x14c>
 800ddb6:	6923      	ldr	r3, [r4, #16]
 800ddb8:	462a      	mov	r2, r5
 800ddba:	4649      	mov	r1, r9
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	47d0      	blx	sl
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d0ad      	beq.n	800dd20 <_printf_i+0x160>
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	079b      	lsls	r3, r3, #30
 800ddc8:	d413      	bmi.n	800ddf2 <_printf_i+0x232>
 800ddca:	68e0      	ldr	r0, [r4, #12]
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	4298      	cmp	r0, r3
 800ddd0:	bfb8      	it	lt
 800ddd2:	4618      	movlt	r0, r3
 800ddd4:	e7a6      	b.n	800dd24 <_printf_i+0x164>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	4632      	mov	r2, r6
 800ddda:	4649      	mov	r1, r9
 800dddc:	4640      	mov	r0, r8
 800ddde:	47d0      	blx	sl
 800dde0:	3001      	adds	r0, #1
 800dde2:	d09d      	beq.n	800dd20 <_printf_i+0x160>
 800dde4:	3501      	adds	r5, #1
 800dde6:	68e3      	ldr	r3, [r4, #12]
 800dde8:	9903      	ldr	r1, [sp, #12]
 800ddea:	1a5b      	subs	r3, r3, r1
 800ddec:	42ab      	cmp	r3, r5
 800ddee:	dcf2      	bgt.n	800ddd6 <_printf_i+0x216>
 800ddf0:	e7eb      	b.n	800ddca <_printf_i+0x20a>
 800ddf2:	2500      	movs	r5, #0
 800ddf4:	f104 0619 	add.w	r6, r4, #25
 800ddf8:	e7f5      	b.n	800dde6 <_printf_i+0x226>
 800ddfa:	bf00      	nop
 800ddfc:	08012eba 	.word	0x08012eba
 800de00:	08012ecb 	.word	0x08012ecb

0800de04 <_scanf_float>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	b087      	sub	sp, #28
 800de0a:	4617      	mov	r7, r2
 800de0c:	9303      	str	r3, [sp, #12]
 800de0e:	688b      	ldr	r3, [r1, #8]
 800de10:	1e5a      	subs	r2, r3, #1
 800de12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de16:	bf83      	ittte	hi
 800de18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de1c:	195b      	addhi	r3, r3, r5
 800de1e:	9302      	strhi	r3, [sp, #8]
 800de20:	2300      	movls	r3, #0
 800de22:	bf86      	itte	hi
 800de24:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de28:	608b      	strhi	r3, [r1, #8]
 800de2a:	9302      	strls	r3, [sp, #8]
 800de2c:	680b      	ldr	r3, [r1, #0]
 800de2e:	468b      	mov	fp, r1
 800de30:	2500      	movs	r5, #0
 800de32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800de36:	f84b 3b1c 	str.w	r3, [fp], #28
 800de3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de3e:	4680      	mov	r8, r0
 800de40:	460c      	mov	r4, r1
 800de42:	465e      	mov	r6, fp
 800de44:	46aa      	mov	sl, r5
 800de46:	46a9      	mov	r9, r5
 800de48:	9501      	str	r5, [sp, #4]
 800de4a:	68a2      	ldr	r2, [r4, #8]
 800de4c:	b152      	cbz	r2, 800de64 <_scanf_float+0x60>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b4e      	cmp	r3, #78	; 0x4e
 800de54:	d864      	bhi.n	800df20 <_scanf_float+0x11c>
 800de56:	2b40      	cmp	r3, #64	; 0x40
 800de58:	d83c      	bhi.n	800ded4 <_scanf_float+0xd0>
 800de5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800de5e:	b2c8      	uxtb	r0, r1
 800de60:	280e      	cmp	r0, #14
 800de62:	d93a      	bls.n	800deda <_scanf_float+0xd6>
 800de64:	f1b9 0f00 	cmp.w	r9, #0
 800de68:	d003      	beq.n	800de72 <_scanf_float+0x6e>
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de76:	f1ba 0f01 	cmp.w	sl, #1
 800de7a:	f200 8113 	bhi.w	800e0a4 <_scanf_float+0x2a0>
 800de7e:	455e      	cmp	r6, fp
 800de80:	f200 8105 	bhi.w	800e08e <_scanf_float+0x28a>
 800de84:	2501      	movs	r5, #1
 800de86:	4628      	mov	r0, r5
 800de88:	b007      	add	sp, #28
 800de8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800de92:	2a0d      	cmp	r2, #13
 800de94:	d8e6      	bhi.n	800de64 <_scanf_float+0x60>
 800de96:	a101      	add	r1, pc, #4	; (adr r1, 800de9c <_scanf_float+0x98>)
 800de98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de9c:	0800dfdb 	.word	0x0800dfdb
 800dea0:	0800de65 	.word	0x0800de65
 800dea4:	0800de65 	.word	0x0800de65
 800dea8:	0800de65 	.word	0x0800de65
 800deac:	0800e03b 	.word	0x0800e03b
 800deb0:	0800e013 	.word	0x0800e013
 800deb4:	0800de65 	.word	0x0800de65
 800deb8:	0800de65 	.word	0x0800de65
 800debc:	0800dfe9 	.word	0x0800dfe9
 800dec0:	0800de65 	.word	0x0800de65
 800dec4:	0800de65 	.word	0x0800de65
 800dec8:	0800de65 	.word	0x0800de65
 800decc:	0800de65 	.word	0x0800de65
 800ded0:	0800dfa1 	.word	0x0800dfa1
 800ded4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ded8:	e7db      	b.n	800de92 <_scanf_float+0x8e>
 800deda:	290e      	cmp	r1, #14
 800dedc:	d8c2      	bhi.n	800de64 <_scanf_float+0x60>
 800dede:	a001      	add	r0, pc, #4	; (adr r0, 800dee4 <_scanf_float+0xe0>)
 800dee0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dee4:	0800df93 	.word	0x0800df93
 800dee8:	0800de65 	.word	0x0800de65
 800deec:	0800df93 	.word	0x0800df93
 800def0:	0800e027 	.word	0x0800e027
 800def4:	0800de65 	.word	0x0800de65
 800def8:	0800df41 	.word	0x0800df41
 800defc:	0800df7d 	.word	0x0800df7d
 800df00:	0800df7d 	.word	0x0800df7d
 800df04:	0800df7d 	.word	0x0800df7d
 800df08:	0800df7d 	.word	0x0800df7d
 800df0c:	0800df7d 	.word	0x0800df7d
 800df10:	0800df7d 	.word	0x0800df7d
 800df14:	0800df7d 	.word	0x0800df7d
 800df18:	0800df7d 	.word	0x0800df7d
 800df1c:	0800df7d 	.word	0x0800df7d
 800df20:	2b6e      	cmp	r3, #110	; 0x6e
 800df22:	d809      	bhi.n	800df38 <_scanf_float+0x134>
 800df24:	2b60      	cmp	r3, #96	; 0x60
 800df26:	d8b2      	bhi.n	800de8e <_scanf_float+0x8a>
 800df28:	2b54      	cmp	r3, #84	; 0x54
 800df2a:	d077      	beq.n	800e01c <_scanf_float+0x218>
 800df2c:	2b59      	cmp	r3, #89	; 0x59
 800df2e:	d199      	bne.n	800de64 <_scanf_float+0x60>
 800df30:	2d07      	cmp	r5, #7
 800df32:	d197      	bne.n	800de64 <_scanf_float+0x60>
 800df34:	2508      	movs	r5, #8
 800df36:	e029      	b.n	800df8c <_scanf_float+0x188>
 800df38:	2b74      	cmp	r3, #116	; 0x74
 800df3a:	d06f      	beq.n	800e01c <_scanf_float+0x218>
 800df3c:	2b79      	cmp	r3, #121	; 0x79
 800df3e:	e7f6      	b.n	800df2e <_scanf_float+0x12a>
 800df40:	6821      	ldr	r1, [r4, #0]
 800df42:	05c8      	lsls	r0, r1, #23
 800df44:	d51a      	bpl.n	800df7c <_scanf_float+0x178>
 800df46:	9b02      	ldr	r3, [sp, #8]
 800df48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800df4c:	6021      	str	r1, [r4, #0]
 800df4e:	f109 0901 	add.w	r9, r9, #1
 800df52:	b11b      	cbz	r3, 800df5c <_scanf_float+0x158>
 800df54:	3b01      	subs	r3, #1
 800df56:	3201      	adds	r2, #1
 800df58:	9302      	str	r3, [sp, #8]
 800df5a:	60a2      	str	r2, [r4, #8]
 800df5c:	68a3      	ldr	r3, [r4, #8]
 800df5e:	3b01      	subs	r3, #1
 800df60:	60a3      	str	r3, [r4, #8]
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	3301      	adds	r3, #1
 800df66:	6123      	str	r3, [r4, #16]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	607b      	str	r3, [r7, #4]
 800df70:	f340 8084 	ble.w	800e07c <_scanf_float+0x278>
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	603b      	str	r3, [r7, #0]
 800df7a:	e766      	b.n	800de4a <_scanf_float+0x46>
 800df7c:	eb1a 0f05 	cmn.w	sl, r5
 800df80:	f47f af70 	bne.w	800de64 <_scanf_float+0x60>
 800df84:	6822      	ldr	r2, [r4, #0]
 800df86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800df8a:	6022      	str	r2, [r4, #0]
 800df8c:	f806 3b01 	strb.w	r3, [r6], #1
 800df90:	e7e4      	b.n	800df5c <_scanf_float+0x158>
 800df92:	6822      	ldr	r2, [r4, #0]
 800df94:	0610      	lsls	r0, r2, #24
 800df96:	f57f af65 	bpl.w	800de64 <_scanf_float+0x60>
 800df9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df9e:	e7f4      	b.n	800df8a <_scanf_float+0x186>
 800dfa0:	f1ba 0f00 	cmp.w	sl, #0
 800dfa4:	d10e      	bne.n	800dfc4 <_scanf_float+0x1c0>
 800dfa6:	f1b9 0f00 	cmp.w	r9, #0
 800dfaa:	d10e      	bne.n	800dfca <_scanf_float+0x1c6>
 800dfac:	6822      	ldr	r2, [r4, #0]
 800dfae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dfb2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dfb6:	d108      	bne.n	800dfca <_scanf_float+0x1c6>
 800dfb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dfbc:	6022      	str	r2, [r4, #0]
 800dfbe:	f04f 0a01 	mov.w	sl, #1
 800dfc2:	e7e3      	b.n	800df8c <_scanf_float+0x188>
 800dfc4:	f1ba 0f02 	cmp.w	sl, #2
 800dfc8:	d055      	beq.n	800e076 <_scanf_float+0x272>
 800dfca:	2d01      	cmp	r5, #1
 800dfcc:	d002      	beq.n	800dfd4 <_scanf_float+0x1d0>
 800dfce:	2d04      	cmp	r5, #4
 800dfd0:	f47f af48 	bne.w	800de64 <_scanf_float+0x60>
 800dfd4:	3501      	adds	r5, #1
 800dfd6:	b2ed      	uxtb	r5, r5
 800dfd8:	e7d8      	b.n	800df8c <_scanf_float+0x188>
 800dfda:	f1ba 0f01 	cmp.w	sl, #1
 800dfde:	f47f af41 	bne.w	800de64 <_scanf_float+0x60>
 800dfe2:	f04f 0a02 	mov.w	sl, #2
 800dfe6:	e7d1      	b.n	800df8c <_scanf_float+0x188>
 800dfe8:	b97d      	cbnz	r5, 800e00a <_scanf_float+0x206>
 800dfea:	f1b9 0f00 	cmp.w	r9, #0
 800dfee:	f47f af3c 	bne.w	800de6a <_scanf_float+0x66>
 800dff2:	6822      	ldr	r2, [r4, #0]
 800dff4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dff8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dffc:	f47f af39 	bne.w	800de72 <_scanf_float+0x6e>
 800e000:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e004:	6022      	str	r2, [r4, #0]
 800e006:	2501      	movs	r5, #1
 800e008:	e7c0      	b.n	800df8c <_scanf_float+0x188>
 800e00a:	2d03      	cmp	r5, #3
 800e00c:	d0e2      	beq.n	800dfd4 <_scanf_float+0x1d0>
 800e00e:	2d05      	cmp	r5, #5
 800e010:	e7de      	b.n	800dfd0 <_scanf_float+0x1cc>
 800e012:	2d02      	cmp	r5, #2
 800e014:	f47f af26 	bne.w	800de64 <_scanf_float+0x60>
 800e018:	2503      	movs	r5, #3
 800e01a:	e7b7      	b.n	800df8c <_scanf_float+0x188>
 800e01c:	2d06      	cmp	r5, #6
 800e01e:	f47f af21 	bne.w	800de64 <_scanf_float+0x60>
 800e022:	2507      	movs	r5, #7
 800e024:	e7b2      	b.n	800df8c <_scanf_float+0x188>
 800e026:	6822      	ldr	r2, [r4, #0]
 800e028:	0591      	lsls	r1, r2, #22
 800e02a:	f57f af1b 	bpl.w	800de64 <_scanf_float+0x60>
 800e02e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e032:	6022      	str	r2, [r4, #0]
 800e034:	f8cd 9004 	str.w	r9, [sp, #4]
 800e038:	e7a8      	b.n	800df8c <_scanf_float+0x188>
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e040:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e044:	d006      	beq.n	800e054 <_scanf_float+0x250>
 800e046:	0550      	lsls	r0, r2, #21
 800e048:	f57f af0c 	bpl.w	800de64 <_scanf_float+0x60>
 800e04c:	f1b9 0f00 	cmp.w	r9, #0
 800e050:	f43f af0f 	beq.w	800de72 <_scanf_float+0x6e>
 800e054:	0591      	lsls	r1, r2, #22
 800e056:	bf58      	it	pl
 800e058:	9901      	ldrpl	r1, [sp, #4]
 800e05a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e05e:	bf58      	it	pl
 800e060:	eba9 0101 	subpl.w	r1, r9, r1
 800e064:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e068:	bf58      	it	pl
 800e06a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e06e:	6022      	str	r2, [r4, #0]
 800e070:	f04f 0900 	mov.w	r9, #0
 800e074:	e78a      	b.n	800df8c <_scanf_float+0x188>
 800e076:	f04f 0a03 	mov.w	sl, #3
 800e07a:	e787      	b.n	800df8c <_scanf_float+0x188>
 800e07c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e080:	4639      	mov	r1, r7
 800e082:	4640      	mov	r0, r8
 800e084:	4798      	blx	r3
 800e086:	2800      	cmp	r0, #0
 800e088:	f43f aedf 	beq.w	800de4a <_scanf_float+0x46>
 800e08c:	e6ea      	b.n	800de64 <_scanf_float+0x60>
 800e08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e096:	463a      	mov	r2, r7
 800e098:	4640      	mov	r0, r8
 800e09a:	4798      	blx	r3
 800e09c:	6923      	ldr	r3, [r4, #16]
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	6123      	str	r3, [r4, #16]
 800e0a2:	e6ec      	b.n	800de7e <_scanf_float+0x7a>
 800e0a4:	1e6b      	subs	r3, r5, #1
 800e0a6:	2b06      	cmp	r3, #6
 800e0a8:	d825      	bhi.n	800e0f6 <_scanf_float+0x2f2>
 800e0aa:	2d02      	cmp	r5, #2
 800e0ac:	d836      	bhi.n	800e11c <_scanf_float+0x318>
 800e0ae:	455e      	cmp	r6, fp
 800e0b0:	f67f aee8 	bls.w	800de84 <_scanf_float+0x80>
 800e0b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0bc:	463a      	mov	r2, r7
 800e0be:	4640      	mov	r0, r8
 800e0c0:	4798      	blx	r3
 800e0c2:	6923      	ldr	r3, [r4, #16]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	6123      	str	r3, [r4, #16]
 800e0c8:	e7f1      	b.n	800e0ae <_scanf_float+0x2aa>
 800e0ca:	9802      	ldr	r0, [sp, #8]
 800e0cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e0d4:	9002      	str	r0, [sp, #8]
 800e0d6:	463a      	mov	r2, r7
 800e0d8:	4640      	mov	r0, r8
 800e0da:	4798      	blx	r3
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	6123      	str	r3, [r4, #16]
 800e0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0e6:	fa5f fa8a 	uxtb.w	sl, sl
 800e0ea:	f1ba 0f02 	cmp.w	sl, #2
 800e0ee:	d1ec      	bne.n	800e0ca <_scanf_float+0x2c6>
 800e0f0:	3d03      	subs	r5, #3
 800e0f2:	b2ed      	uxtb	r5, r5
 800e0f4:	1b76      	subs	r6, r6, r5
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	05da      	lsls	r2, r3, #23
 800e0fa:	d52f      	bpl.n	800e15c <_scanf_float+0x358>
 800e0fc:	055b      	lsls	r3, r3, #21
 800e0fe:	d510      	bpl.n	800e122 <_scanf_float+0x31e>
 800e100:	455e      	cmp	r6, fp
 800e102:	f67f aebf 	bls.w	800de84 <_scanf_float+0x80>
 800e106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e10e:	463a      	mov	r2, r7
 800e110:	4640      	mov	r0, r8
 800e112:	4798      	blx	r3
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	3b01      	subs	r3, #1
 800e118:	6123      	str	r3, [r4, #16]
 800e11a:	e7f1      	b.n	800e100 <_scanf_float+0x2fc>
 800e11c:	46aa      	mov	sl, r5
 800e11e:	9602      	str	r6, [sp, #8]
 800e120:	e7df      	b.n	800e0e2 <_scanf_float+0x2de>
 800e122:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e126:	6923      	ldr	r3, [r4, #16]
 800e128:	2965      	cmp	r1, #101	; 0x65
 800e12a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e12e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e132:	6123      	str	r3, [r4, #16]
 800e134:	d00c      	beq.n	800e150 <_scanf_float+0x34c>
 800e136:	2945      	cmp	r1, #69	; 0x45
 800e138:	d00a      	beq.n	800e150 <_scanf_float+0x34c>
 800e13a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e13e:	463a      	mov	r2, r7
 800e140:	4640      	mov	r0, r8
 800e142:	4798      	blx	r3
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	1eb5      	subs	r5, r6, #2
 800e14e:	6123      	str	r3, [r4, #16]
 800e150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e154:	463a      	mov	r2, r7
 800e156:	4640      	mov	r0, r8
 800e158:	4798      	blx	r3
 800e15a:	462e      	mov	r6, r5
 800e15c:	6825      	ldr	r5, [r4, #0]
 800e15e:	f015 0510 	ands.w	r5, r5, #16
 800e162:	d158      	bne.n	800e216 <_scanf_float+0x412>
 800e164:	7035      	strb	r5, [r6, #0]
 800e166:	6823      	ldr	r3, [r4, #0]
 800e168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e170:	d11c      	bne.n	800e1ac <_scanf_float+0x3a8>
 800e172:	9b01      	ldr	r3, [sp, #4]
 800e174:	454b      	cmp	r3, r9
 800e176:	eba3 0209 	sub.w	r2, r3, r9
 800e17a:	d124      	bne.n	800e1c6 <_scanf_float+0x3c2>
 800e17c:	2200      	movs	r2, #0
 800e17e:	4659      	mov	r1, fp
 800e180:	4640      	mov	r0, r8
 800e182:	f002 fc75 	bl	8010a70 <_strtod_r>
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	6821      	ldr	r1, [r4, #0]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f011 0f02 	tst.w	r1, #2
 800e190:	ec57 6b10 	vmov	r6, r7, d0
 800e194:	f103 0204 	add.w	r2, r3, #4
 800e198:	d020      	beq.n	800e1dc <_scanf_float+0x3d8>
 800e19a:	9903      	ldr	r1, [sp, #12]
 800e19c:	600a      	str	r2, [r1, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	e9c3 6700 	strd	r6, r7, [r3]
 800e1a4:	68e3      	ldr	r3, [r4, #12]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	60e3      	str	r3, [r4, #12]
 800e1aa:	e66c      	b.n	800de86 <_scanf_float+0x82>
 800e1ac:	9b04      	ldr	r3, [sp, #16]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0e4      	beq.n	800e17c <_scanf_float+0x378>
 800e1b2:	9905      	ldr	r1, [sp, #20]
 800e1b4:	230a      	movs	r3, #10
 800e1b6:	462a      	mov	r2, r5
 800e1b8:	3101      	adds	r1, #1
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	f002 fce0 	bl	8010b80 <_strtol_r>
 800e1c0:	9b04      	ldr	r3, [sp, #16]
 800e1c2:	9e05      	ldr	r6, [sp, #20]
 800e1c4:	1ac2      	subs	r2, r0, r3
 800e1c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e1ca:	429e      	cmp	r6, r3
 800e1cc:	bf28      	it	cs
 800e1ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e1d2:	4912      	ldr	r1, [pc, #72]	; (800e21c <_scanf_float+0x418>)
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f000 f92d 	bl	800e434 <siprintf>
 800e1da:	e7cf      	b.n	800e17c <_scanf_float+0x378>
 800e1dc:	f011 0f04 	tst.w	r1, #4
 800e1e0:	9903      	ldr	r1, [sp, #12]
 800e1e2:	600a      	str	r2, [r1, #0]
 800e1e4:	d1db      	bne.n	800e19e <_scanf_float+0x39a>
 800e1e6:	f8d3 8000 	ldr.w	r8, [r3]
 800e1ea:	ee10 2a10 	vmov	r2, s0
 800e1ee:	ee10 0a10 	vmov	r0, s0
 800e1f2:	463b      	mov	r3, r7
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	f7f2 fc99 	bl	8000b2c <__aeabi_dcmpun>
 800e1fa:	b128      	cbz	r0, 800e208 <_scanf_float+0x404>
 800e1fc:	4808      	ldr	r0, [pc, #32]	; (800e220 <_scanf_float+0x41c>)
 800e1fe:	f000 f9fd 	bl	800e5fc <nanf>
 800e202:	ed88 0a00 	vstr	s0, [r8]
 800e206:	e7cd      	b.n	800e1a4 <_scanf_float+0x3a0>
 800e208:	4630      	mov	r0, r6
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 fcec 	bl	8000be8 <__aeabi_d2f>
 800e210:	f8c8 0000 	str.w	r0, [r8]
 800e214:	e7c6      	b.n	800e1a4 <_scanf_float+0x3a0>
 800e216:	2500      	movs	r5, #0
 800e218:	e635      	b.n	800de86 <_scanf_float+0x82>
 800e21a:	bf00      	nop
 800e21c:	08012edc 	.word	0x08012edc
 800e220:	0801326d 	.word	0x0801326d

0800e224 <std>:
 800e224:	2300      	movs	r3, #0
 800e226:	b510      	push	{r4, lr}
 800e228:	4604      	mov	r4, r0
 800e22a:	e9c0 3300 	strd	r3, r3, [r0]
 800e22e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e232:	6083      	str	r3, [r0, #8]
 800e234:	8181      	strh	r1, [r0, #12]
 800e236:	6643      	str	r3, [r0, #100]	; 0x64
 800e238:	81c2      	strh	r2, [r0, #14]
 800e23a:	6183      	str	r3, [r0, #24]
 800e23c:	4619      	mov	r1, r3
 800e23e:	2208      	movs	r2, #8
 800e240:	305c      	adds	r0, #92	; 0x5c
 800e242:	f000 f95a 	bl	800e4fa <memset>
 800e246:	4b0d      	ldr	r3, [pc, #52]	; (800e27c <std+0x58>)
 800e248:	6263      	str	r3, [r4, #36]	; 0x24
 800e24a:	4b0d      	ldr	r3, [pc, #52]	; (800e280 <std+0x5c>)
 800e24c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e24e:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <std+0x60>)
 800e250:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e252:	4b0d      	ldr	r3, [pc, #52]	; (800e288 <std+0x64>)
 800e254:	6323      	str	r3, [r4, #48]	; 0x30
 800e256:	4b0d      	ldr	r3, [pc, #52]	; (800e28c <std+0x68>)
 800e258:	6224      	str	r4, [r4, #32]
 800e25a:	429c      	cmp	r4, r3
 800e25c:	d006      	beq.n	800e26c <std+0x48>
 800e25e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e262:	4294      	cmp	r4, r2
 800e264:	d002      	beq.n	800e26c <std+0x48>
 800e266:	33d0      	adds	r3, #208	; 0xd0
 800e268:	429c      	cmp	r4, r3
 800e26a:	d105      	bne.n	800e278 <std+0x54>
 800e26c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e274:	f000 b9be 	b.w	800e5f4 <__retarget_lock_init_recursive>
 800e278:	bd10      	pop	{r4, pc}
 800e27a:	bf00      	nop
 800e27c:	0800e475 	.word	0x0800e475
 800e280:	0800e497 	.word	0x0800e497
 800e284:	0800e4cf 	.word	0x0800e4cf
 800e288:	0800e4f3 	.word	0x0800e4f3
 800e28c:	20000898 	.word	0x20000898

0800e290 <stdio_exit_handler>:
 800e290:	4a02      	ldr	r2, [pc, #8]	; (800e29c <stdio_exit_handler+0xc>)
 800e292:	4903      	ldr	r1, [pc, #12]	; (800e2a0 <stdio_exit_handler+0x10>)
 800e294:	4803      	ldr	r0, [pc, #12]	; (800e2a4 <stdio_exit_handler+0x14>)
 800e296:	f000 b869 	b.w	800e36c <_fwalk_sglue>
 800e29a:	bf00      	nop
 800e29c:	200001a8 	.word	0x200001a8
 800e2a0:	080111c9 	.word	0x080111c9
 800e2a4:	200001b4 	.word	0x200001b4

0800e2a8 <cleanup_stdio>:
 800e2a8:	6841      	ldr	r1, [r0, #4]
 800e2aa:	4b0c      	ldr	r3, [pc, #48]	; (800e2dc <cleanup_stdio+0x34>)
 800e2ac:	4299      	cmp	r1, r3
 800e2ae:	b510      	push	{r4, lr}
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	d001      	beq.n	800e2b8 <cleanup_stdio+0x10>
 800e2b4:	f002 ff88 	bl	80111c8 <_fflush_r>
 800e2b8:	68a1      	ldr	r1, [r4, #8]
 800e2ba:	4b09      	ldr	r3, [pc, #36]	; (800e2e0 <cleanup_stdio+0x38>)
 800e2bc:	4299      	cmp	r1, r3
 800e2be:	d002      	beq.n	800e2c6 <cleanup_stdio+0x1e>
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f002 ff81 	bl	80111c8 <_fflush_r>
 800e2c6:	68e1      	ldr	r1, [r4, #12]
 800e2c8:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <cleanup_stdio+0x3c>)
 800e2ca:	4299      	cmp	r1, r3
 800e2cc:	d004      	beq.n	800e2d8 <cleanup_stdio+0x30>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d4:	f002 bf78 	b.w	80111c8 <_fflush_r>
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	bf00      	nop
 800e2dc:	20000898 	.word	0x20000898
 800e2e0:	20000900 	.word	0x20000900
 800e2e4:	20000968 	.word	0x20000968

0800e2e8 <global_stdio_init.part.0>:
 800e2e8:	b510      	push	{r4, lr}
 800e2ea:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <global_stdio_init.part.0+0x30>)
 800e2ec:	4c0b      	ldr	r4, [pc, #44]	; (800e31c <global_stdio_init.part.0+0x34>)
 800e2ee:	4a0c      	ldr	r2, [pc, #48]	; (800e320 <global_stdio_init.part.0+0x38>)
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2104      	movs	r1, #4
 800e2f8:	f7ff ff94 	bl	800e224 <std>
 800e2fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e300:	2201      	movs	r2, #1
 800e302:	2109      	movs	r1, #9
 800e304:	f7ff ff8e 	bl	800e224 <std>
 800e308:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e30c:	2202      	movs	r2, #2
 800e30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e312:	2112      	movs	r1, #18
 800e314:	f7ff bf86 	b.w	800e224 <std>
 800e318:	200009d0 	.word	0x200009d0
 800e31c:	20000898 	.word	0x20000898
 800e320:	0800e291 	.word	0x0800e291

0800e324 <__sfp_lock_acquire>:
 800e324:	4801      	ldr	r0, [pc, #4]	; (800e32c <__sfp_lock_acquire+0x8>)
 800e326:	f000 b966 	b.w	800e5f6 <__retarget_lock_acquire_recursive>
 800e32a:	bf00      	nop
 800e32c:	200009d9 	.word	0x200009d9

0800e330 <__sfp_lock_release>:
 800e330:	4801      	ldr	r0, [pc, #4]	; (800e338 <__sfp_lock_release+0x8>)
 800e332:	f000 b961 	b.w	800e5f8 <__retarget_lock_release_recursive>
 800e336:	bf00      	nop
 800e338:	200009d9 	.word	0x200009d9

0800e33c <__sinit>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	4604      	mov	r4, r0
 800e340:	f7ff fff0 	bl	800e324 <__sfp_lock_acquire>
 800e344:	6a23      	ldr	r3, [r4, #32]
 800e346:	b11b      	cbz	r3, 800e350 <__sinit+0x14>
 800e348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e34c:	f7ff bff0 	b.w	800e330 <__sfp_lock_release>
 800e350:	4b04      	ldr	r3, [pc, #16]	; (800e364 <__sinit+0x28>)
 800e352:	6223      	str	r3, [r4, #32]
 800e354:	4b04      	ldr	r3, [pc, #16]	; (800e368 <__sinit+0x2c>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1f5      	bne.n	800e348 <__sinit+0xc>
 800e35c:	f7ff ffc4 	bl	800e2e8 <global_stdio_init.part.0>
 800e360:	e7f2      	b.n	800e348 <__sinit+0xc>
 800e362:	bf00      	nop
 800e364:	0800e2a9 	.word	0x0800e2a9
 800e368:	200009d0 	.word	0x200009d0

0800e36c <_fwalk_sglue>:
 800e36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e370:	4607      	mov	r7, r0
 800e372:	4688      	mov	r8, r1
 800e374:	4614      	mov	r4, r2
 800e376:	2600      	movs	r6, #0
 800e378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e37c:	f1b9 0901 	subs.w	r9, r9, #1
 800e380:	d505      	bpl.n	800e38e <_fwalk_sglue+0x22>
 800e382:	6824      	ldr	r4, [r4, #0]
 800e384:	2c00      	cmp	r4, #0
 800e386:	d1f7      	bne.n	800e378 <_fwalk_sglue+0xc>
 800e388:	4630      	mov	r0, r6
 800e38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38e:	89ab      	ldrh	r3, [r5, #12]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d907      	bls.n	800e3a4 <_fwalk_sglue+0x38>
 800e394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e398:	3301      	adds	r3, #1
 800e39a:	d003      	beq.n	800e3a4 <_fwalk_sglue+0x38>
 800e39c:	4629      	mov	r1, r5
 800e39e:	4638      	mov	r0, r7
 800e3a0:	47c0      	blx	r8
 800e3a2:	4306      	orrs	r6, r0
 800e3a4:	3568      	adds	r5, #104	; 0x68
 800e3a6:	e7e9      	b.n	800e37c <_fwalk_sglue+0x10>

0800e3a8 <iprintf>:
 800e3a8:	b40f      	push	{r0, r1, r2, r3}
 800e3aa:	b507      	push	{r0, r1, r2, lr}
 800e3ac:	4906      	ldr	r1, [pc, #24]	; (800e3c8 <iprintf+0x20>)
 800e3ae:	ab04      	add	r3, sp, #16
 800e3b0:	6808      	ldr	r0, [r1, #0]
 800e3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b6:	6881      	ldr	r1, [r0, #8]
 800e3b8:	9301      	str	r3, [sp, #4]
 800e3ba:	f002 fd65 	bl	8010e88 <_vfiprintf_r>
 800e3be:	b003      	add	sp, #12
 800e3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3c4:	b004      	add	sp, #16
 800e3c6:	4770      	bx	lr
 800e3c8:	20000200 	.word	0x20000200

0800e3cc <sniprintf>:
 800e3cc:	b40c      	push	{r2, r3}
 800e3ce:	b530      	push	{r4, r5, lr}
 800e3d0:	4b17      	ldr	r3, [pc, #92]	; (800e430 <sniprintf+0x64>)
 800e3d2:	1e0c      	subs	r4, r1, #0
 800e3d4:	681d      	ldr	r5, [r3, #0]
 800e3d6:	b09d      	sub	sp, #116	; 0x74
 800e3d8:	da08      	bge.n	800e3ec <sniprintf+0x20>
 800e3da:	238b      	movs	r3, #139	; 0x8b
 800e3dc:	602b      	str	r3, [r5, #0]
 800e3de:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e2:	b01d      	add	sp, #116	; 0x74
 800e3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3e8:	b002      	add	sp, #8
 800e3ea:	4770      	bx	lr
 800e3ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e3f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3f4:	bf14      	ite	ne
 800e3f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e3fa:	4623      	moveq	r3, r4
 800e3fc:	9304      	str	r3, [sp, #16]
 800e3fe:	9307      	str	r3, [sp, #28]
 800e400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e404:	9002      	str	r0, [sp, #8]
 800e406:	9006      	str	r0, [sp, #24]
 800e408:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e40c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e40e:	ab21      	add	r3, sp, #132	; 0x84
 800e410:	a902      	add	r1, sp, #8
 800e412:	4628      	mov	r0, r5
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	f002 fc0f 	bl	8010c38 <_svfiprintf_r>
 800e41a:	1c43      	adds	r3, r0, #1
 800e41c:	bfbc      	itt	lt
 800e41e:	238b      	movlt	r3, #139	; 0x8b
 800e420:	602b      	strlt	r3, [r5, #0]
 800e422:	2c00      	cmp	r4, #0
 800e424:	d0dd      	beq.n	800e3e2 <sniprintf+0x16>
 800e426:	9b02      	ldr	r3, [sp, #8]
 800e428:	2200      	movs	r2, #0
 800e42a:	701a      	strb	r2, [r3, #0]
 800e42c:	e7d9      	b.n	800e3e2 <sniprintf+0x16>
 800e42e:	bf00      	nop
 800e430:	20000200 	.word	0x20000200

0800e434 <siprintf>:
 800e434:	b40e      	push	{r1, r2, r3}
 800e436:	b500      	push	{lr}
 800e438:	b09c      	sub	sp, #112	; 0x70
 800e43a:	ab1d      	add	r3, sp, #116	; 0x74
 800e43c:	9002      	str	r0, [sp, #8]
 800e43e:	9006      	str	r0, [sp, #24]
 800e440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e444:	4809      	ldr	r0, [pc, #36]	; (800e46c <siprintf+0x38>)
 800e446:	9107      	str	r1, [sp, #28]
 800e448:	9104      	str	r1, [sp, #16]
 800e44a:	4909      	ldr	r1, [pc, #36]	; (800e470 <siprintf+0x3c>)
 800e44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e450:	9105      	str	r1, [sp, #20]
 800e452:	6800      	ldr	r0, [r0, #0]
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	a902      	add	r1, sp, #8
 800e458:	f002 fbee 	bl	8010c38 <_svfiprintf_r>
 800e45c:	9b02      	ldr	r3, [sp, #8]
 800e45e:	2200      	movs	r2, #0
 800e460:	701a      	strb	r2, [r3, #0]
 800e462:	b01c      	add	sp, #112	; 0x70
 800e464:	f85d eb04 	ldr.w	lr, [sp], #4
 800e468:	b003      	add	sp, #12
 800e46a:	4770      	bx	lr
 800e46c:	20000200 	.word	0x20000200
 800e470:	ffff0208 	.word	0xffff0208

0800e474 <__sread>:
 800e474:	b510      	push	{r4, lr}
 800e476:	460c      	mov	r4, r1
 800e478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e47c:	f000 f86c 	bl	800e558 <_read_r>
 800e480:	2800      	cmp	r0, #0
 800e482:	bfab      	itete	ge
 800e484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e486:	89a3      	ldrhlt	r3, [r4, #12]
 800e488:	181b      	addge	r3, r3, r0
 800e48a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e48e:	bfac      	ite	ge
 800e490:	6563      	strge	r3, [r4, #84]	; 0x54
 800e492:	81a3      	strhlt	r3, [r4, #12]
 800e494:	bd10      	pop	{r4, pc}

0800e496 <__swrite>:
 800e496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49a:	461f      	mov	r7, r3
 800e49c:	898b      	ldrh	r3, [r1, #12]
 800e49e:	05db      	lsls	r3, r3, #23
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	d505      	bpl.n	800e4b4 <__swrite+0x1e>
 800e4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ac:	2302      	movs	r3, #2
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f000 f840 	bl	800e534 <_lseek_r>
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	4632      	mov	r2, r6
 800e4c2:	463b      	mov	r3, r7
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ca:	f000 b857 	b.w	800e57c <_write_r>

0800e4ce <__sseek>:
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d6:	f000 f82d 	bl	800e534 <_lseek_r>
 800e4da:	1c43      	adds	r3, r0, #1
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	bf15      	itete	ne
 800e4e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4ea:	81a3      	strheq	r3, [r4, #12]
 800e4ec:	bf18      	it	ne
 800e4ee:	81a3      	strhne	r3, [r4, #12]
 800e4f0:	bd10      	pop	{r4, pc}

0800e4f2 <__sclose>:
 800e4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f6:	f000 b80d 	b.w	800e514 <_close_r>

0800e4fa <memset>:
 800e4fa:	4402      	add	r2, r0
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d100      	bne.n	800e504 <memset+0xa>
 800e502:	4770      	bx	lr
 800e504:	f803 1b01 	strb.w	r1, [r3], #1
 800e508:	e7f9      	b.n	800e4fe <memset+0x4>
	...

0800e50c <_localeconv_r>:
 800e50c:	4800      	ldr	r0, [pc, #0]	; (800e510 <_localeconv_r+0x4>)
 800e50e:	4770      	bx	lr
 800e510:	200002f4 	.word	0x200002f4

0800e514 <_close_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	4d06      	ldr	r5, [pc, #24]	; (800e530 <_close_r+0x1c>)
 800e518:	2300      	movs	r3, #0
 800e51a:	4604      	mov	r4, r0
 800e51c:	4608      	mov	r0, r1
 800e51e:	602b      	str	r3, [r5, #0]
 800e520:	f7f3 fd5d 	bl	8001fde <_close>
 800e524:	1c43      	adds	r3, r0, #1
 800e526:	d102      	bne.n	800e52e <_close_r+0x1a>
 800e528:	682b      	ldr	r3, [r5, #0]
 800e52a:	b103      	cbz	r3, 800e52e <_close_r+0x1a>
 800e52c:	6023      	str	r3, [r4, #0]
 800e52e:	bd38      	pop	{r3, r4, r5, pc}
 800e530:	200009d4 	.word	0x200009d4

0800e534 <_lseek_r>:
 800e534:	b538      	push	{r3, r4, r5, lr}
 800e536:	4d07      	ldr	r5, [pc, #28]	; (800e554 <_lseek_r+0x20>)
 800e538:	4604      	mov	r4, r0
 800e53a:	4608      	mov	r0, r1
 800e53c:	4611      	mov	r1, r2
 800e53e:	2200      	movs	r2, #0
 800e540:	602a      	str	r2, [r5, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	f7f3 fd72 	bl	800202c <_lseek>
 800e548:	1c43      	adds	r3, r0, #1
 800e54a:	d102      	bne.n	800e552 <_lseek_r+0x1e>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	b103      	cbz	r3, 800e552 <_lseek_r+0x1e>
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	bd38      	pop	{r3, r4, r5, pc}
 800e554:	200009d4 	.word	0x200009d4

0800e558 <_read_r>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	4d07      	ldr	r5, [pc, #28]	; (800e578 <_read_r+0x20>)
 800e55c:	4604      	mov	r4, r0
 800e55e:	4608      	mov	r0, r1
 800e560:	4611      	mov	r1, r2
 800e562:	2200      	movs	r2, #0
 800e564:	602a      	str	r2, [r5, #0]
 800e566:	461a      	mov	r2, r3
 800e568:	f7f3 fd00 	bl	8001f6c <_read>
 800e56c:	1c43      	adds	r3, r0, #1
 800e56e:	d102      	bne.n	800e576 <_read_r+0x1e>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	b103      	cbz	r3, 800e576 <_read_r+0x1e>
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	bd38      	pop	{r3, r4, r5, pc}
 800e578:	200009d4 	.word	0x200009d4

0800e57c <_write_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4d07      	ldr	r5, [pc, #28]	; (800e59c <_write_r+0x20>)
 800e580:	4604      	mov	r4, r0
 800e582:	4608      	mov	r0, r1
 800e584:	4611      	mov	r1, r2
 800e586:	2200      	movs	r2, #0
 800e588:	602a      	str	r2, [r5, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	f7f3 fd0b 	bl	8001fa6 <_write>
 800e590:	1c43      	adds	r3, r0, #1
 800e592:	d102      	bne.n	800e59a <_write_r+0x1e>
 800e594:	682b      	ldr	r3, [r5, #0]
 800e596:	b103      	cbz	r3, 800e59a <_write_r+0x1e>
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	bd38      	pop	{r3, r4, r5, pc}
 800e59c:	200009d4 	.word	0x200009d4

0800e5a0 <__errno>:
 800e5a0:	4b01      	ldr	r3, [pc, #4]	; (800e5a8 <__errno+0x8>)
 800e5a2:	6818      	ldr	r0, [r3, #0]
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	20000200 	.word	0x20000200

0800e5ac <__libc_init_array>:
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	4d0d      	ldr	r5, [pc, #52]	; (800e5e4 <__libc_init_array+0x38>)
 800e5b0:	4c0d      	ldr	r4, [pc, #52]	; (800e5e8 <__libc_init_array+0x3c>)
 800e5b2:	1b64      	subs	r4, r4, r5
 800e5b4:	10a4      	asrs	r4, r4, #2
 800e5b6:	2600      	movs	r6, #0
 800e5b8:	42a6      	cmp	r6, r4
 800e5ba:	d109      	bne.n	800e5d0 <__libc_init_array+0x24>
 800e5bc:	4d0b      	ldr	r5, [pc, #44]	; (800e5ec <__libc_init_array+0x40>)
 800e5be:	4c0c      	ldr	r4, [pc, #48]	; (800e5f0 <__libc_init_array+0x44>)
 800e5c0:	f004 fb4a 	bl	8012c58 <_init>
 800e5c4:	1b64      	subs	r4, r4, r5
 800e5c6:	10a4      	asrs	r4, r4, #2
 800e5c8:	2600      	movs	r6, #0
 800e5ca:	42a6      	cmp	r6, r4
 800e5cc:	d105      	bne.n	800e5da <__libc_init_array+0x2e>
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5d4:	4798      	blx	r3
 800e5d6:	3601      	adds	r6, #1
 800e5d8:	e7ee      	b.n	800e5b8 <__libc_init_array+0xc>
 800e5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5de:	4798      	blx	r3
 800e5e0:	3601      	adds	r6, #1
 800e5e2:	e7f2      	b.n	800e5ca <__libc_init_array+0x1e>
 800e5e4:	08013308 	.word	0x08013308
 800e5e8:	08013308 	.word	0x08013308
 800e5ec:	08013308 	.word	0x08013308
 800e5f0:	0801330c 	.word	0x0801330c

0800e5f4 <__retarget_lock_init_recursive>:
 800e5f4:	4770      	bx	lr

0800e5f6 <__retarget_lock_acquire_recursive>:
 800e5f6:	4770      	bx	lr

0800e5f8 <__retarget_lock_release_recursive>:
 800e5f8:	4770      	bx	lr
	...

0800e5fc <nanf>:
 800e5fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e604 <nanf+0x8>
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	7fc00000 	.word	0x7fc00000

0800e608 <quorem>:
 800e608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60c:	6903      	ldr	r3, [r0, #16]
 800e60e:	690c      	ldr	r4, [r1, #16]
 800e610:	42a3      	cmp	r3, r4
 800e612:	4607      	mov	r7, r0
 800e614:	db7e      	blt.n	800e714 <quorem+0x10c>
 800e616:	3c01      	subs	r4, #1
 800e618:	f101 0814 	add.w	r8, r1, #20
 800e61c:	f100 0514 	add.w	r5, r0, #20
 800e620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e624:	9301      	str	r3, [sp, #4]
 800e626:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e62a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e62e:	3301      	adds	r3, #1
 800e630:	429a      	cmp	r2, r3
 800e632:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e636:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e63a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e63e:	d331      	bcc.n	800e6a4 <quorem+0x9c>
 800e640:	f04f 0e00 	mov.w	lr, #0
 800e644:	4640      	mov	r0, r8
 800e646:	46ac      	mov	ip, r5
 800e648:	46f2      	mov	sl, lr
 800e64a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e64e:	b293      	uxth	r3, r2
 800e650:	fb06 e303 	mla	r3, r6, r3, lr
 800e654:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e658:	0c1a      	lsrs	r2, r3, #16
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	ebaa 0303 	sub.w	r3, sl, r3
 800e660:	f8dc a000 	ldr.w	sl, [ip]
 800e664:	fa13 f38a 	uxtah	r3, r3, sl
 800e668:	fb06 220e 	mla	r2, r6, lr, r2
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	9b00      	ldr	r3, [sp, #0]
 800e670:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e674:	b292      	uxth	r2, r2
 800e676:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e67a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e67e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e682:	4581      	cmp	r9, r0
 800e684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e688:	f84c 3b04 	str.w	r3, [ip], #4
 800e68c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e690:	d2db      	bcs.n	800e64a <quorem+0x42>
 800e692:	f855 300b 	ldr.w	r3, [r5, fp]
 800e696:	b92b      	cbnz	r3, 800e6a4 <quorem+0x9c>
 800e698:	9b01      	ldr	r3, [sp, #4]
 800e69a:	3b04      	subs	r3, #4
 800e69c:	429d      	cmp	r5, r3
 800e69e:	461a      	mov	r2, r3
 800e6a0:	d32c      	bcc.n	800e6fc <quorem+0xf4>
 800e6a2:	613c      	str	r4, [r7, #16]
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	f001 f9ef 	bl	800fa88 <__mcmp>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	db22      	blt.n	800e6f4 <quorem+0xec>
 800e6ae:	3601      	adds	r6, #1
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6b8:	f8d1 c000 	ldr.w	ip, [r1]
 800e6bc:	b293      	uxth	r3, r2
 800e6be:	1ac3      	subs	r3, r0, r3
 800e6c0:	0c12      	lsrs	r2, r2, #16
 800e6c2:	fa13 f38c 	uxtah	r3, r3, ip
 800e6c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e6ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6d4:	45c1      	cmp	r9, r8
 800e6d6:	f841 3b04 	str.w	r3, [r1], #4
 800e6da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e6de:	d2e9      	bcs.n	800e6b4 <quorem+0xac>
 800e6e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6e8:	b922      	cbnz	r2, 800e6f4 <quorem+0xec>
 800e6ea:	3b04      	subs	r3, #4
 800e6ec:	429d      	cmp	r5, r3
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	d30a      	bcc.n	800e708 <quorem+0x100>
 800e6f2:	613c      	str	r4, [r7, #16]
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	b003      	add	sp, #12
 800e6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	3b04      	subs	r3, #4
 800e700:	2a00      	cmp	r2, #0
 800e702:	d1ce      	bne.n	800e6a2 <quorem+0x9a>
 800e704:	3c01      	subs	r4, #1
 800e706:	e7c9      	b.n	800e69c <quorem+0x94>
 800e708:	6812      	ldr	r2, [r2, #0]
 800e70a:	3b04      	subs	r3, #4
 800e70c:	2a00      	cmp	r2, #0
 800e70e:	d1f0      	bne.n	800e6f2 <quorem+0xea>
 800e710:	3c01      	subs	r4, #1
 800e712:	e7eb      	b.n	800e6ec <quorem+0xe4>
 800e714:	2000      	movs	r0, #0
 800e716:	e7ee      	b.n	800e6f6 <quorem+0xee>

0800e718 <_dtoa_r>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	ed2d 8b04 	vpush	{d8-d9}
 800e720:	69c5      	ldr	r5, [r0, #28]
 800e722:	b093      	sub	sp, #76	; 0x4c
 800e724:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e728:	ec57 6b10 	vmov	r6, r7, d0
 800e72c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e730:	9107      	str	r1, [sp, #28]
 800e732:	4604      	mov	r4, r0
 800e734:	920a      	str	r2, [sp, #40]	; 0x28
 800e736:	930d      	str	r3, [sp, #52]	; 0x34
 800e738:	b975      	cbnz	r5, 800e758 <_dtoa_r+0x40>
 800e73a:	2010      	movs	r0, #16
 800e73c:	f000 fe2a 	bl	800f394 <malloc>
 800e740:	4602      	mov	r2, r0
 800e742:	61e0      	str	r0, [r4, #28]
 800e744:	b920      	cbnz	r0, 800e750 <_dtoa_r+0x38>
 800e746:	4bae      	ldr	r3, [pc, #696]	; (800ea00 <_dtoa_r+0x2e8>)
 800e748:	21ef      	movs	r1, #239	; 0xef
 800e74a:	48ae      	ldr	r0, [pc, #696]	; (800ea04 <_dtoa_r+0x2ec>)
 800e74c:	f002 fe4c 	bl	80113e8 <__assert_func>
 800e750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e754:	6005      	str	r5, [r0, #0]
 800e756:	60c5      	str	r5, [r0, #12]
 800e758:	69e3      	ldr	r3, [r4, #28]
 800e75a:	6819      	ldr	r1, [r3, #0]
 800e75c:	b151      	cbz	r1, 800e774 <_dtoa_r+0x5c>
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	604a      	str	r2, [r1, #4]
 800e762:	2301      	movs	r3, #1
 800e764:	4093      	lsls	r3, r2
 800e766:	608b      	str	r3, [r1, #8]
 800e768:	4620      	mov	r0, r4
 800e76a:	f000 ff07 	bl	800f57c <_Bfree>
 800e76e:	69e3      	ldr	r3, [r4, #28]
 800e770:	2200      	movs	r2, #0
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	1e3b      	subs	r3, r7, #0
 800e776:	bfbb      	ittet	lt
 800e778:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e77c:	9303      	strlt	r3, [sp, #12]
 800e77e:	2300      	movge	r3, #0
 800e780:	2201      	movlt	r2, #1
 800e782:	bfac      	ite	ge
 800e784:	f8c8 3000 	strge.w	r3, [r8]
 800e788:	f8c8 2000 	strlt.w	r2, [r8]
 800e78c:	4b9e      	ldr	r3, [pc, #632]	; (800ea08 <_dtoa_r+0x2f0>)
 800e78e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e792:	ea33 0308 	bics.w	r3, r3, r8
 800e796:	d11b      	bne.n	800e7d0 <_dtoa_r+0xb8>
 800e798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e79a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e79e:	6013      	str	r3, [r2, #0]
 800e7a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e7a4:	4333      	orrs	r3, r6
 800e7a6:	f000 8593 	beq.w	800f2d0 <_dtoa_r+0xbb8>
 800e7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ac:	b963      	cbnz	r3, 800e7c8 <_dtoa_r+0xb0>
 800e7ae:	4b97      	ldr	r3, [pc, #604]	; (800ea0c <_dtoa_r+0x2f4>)
 800e7b0:	e027      	b.n	800e802 <_dtoa_r+0xea>
 800e7b2:	4b97      	ldr	r3, [pc, #604]	; (800ea10 <_dtoa_r+0x2f8>)
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	9800      	ldr	r0, [sp, #0]
 800e7be:	b013      	add	sp, #76	; 0x4c
 800e7c0:	ecbd 8b04 	vpop	{d8-d9}
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	4b90      	ldr	r3, [pc, #576]	; (800ea0c <_dtoa_r+0x2f4>)
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	3303      	adds	r3, #3
 800e7ce:	e7f3      	b.n	800e7b8 <_dtoa_r+0xa0>
 800e7d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	ec51 0b17 	vmov	r0, r1, d7
 800e7da:	eeb0 8a47 	vmov.f32	s16, s14
 800e7de:	eef0 8a67 	vmov.f32	s17, s15
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f7f2 f970 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7e8:	4681      	mov	r9, r0
 800e7ea:	b160      	cbz	r0, 800e806 <_dtoa_r+0xee>
 800e7ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 8568 	beq.w	800f2ca <_dtoa_r+0xbb2>
 800e7fa:	4b86      	ldr	r3, [pc, #536]	; (800ea14 <_dtoa_r+0x2fc>)
 800e7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	3b01      	subs	r3, #1
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	e7da      	b.n	800e7bc <_dtoa_r+0xa4>
 800e806:	aa10      	add	r2, sp, #64	; 0x40
 800e808:	a911      	add	r1, sp, #68	; 0x44
 800e80a:	4620      	mov	r0, r4
 800e80c:	eeb0 0a48 	vmov.f32	s0, s16
 800e810:	eef0 0a68 	vmov.f32	s1, s17
 800e814:	f001 fa4e 	bl	800fcb4 <__d2b>
 800e818:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e81c:	4682      	mov	sl, r0
 800e81e:	2d00      	cmp	r5, #0
 800e820:	d07f      	beq.n	800e922 <_dtoa_r+0x20a>
 800e822:	ee18 3a90 	vmov	r3, s17
 800e826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e82a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e82e:	ec51 0b18 	vmov	r0, r1, d8
 800e832:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e83a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e83e:	4619      	mov	r1, r3
 800e840:	2200      	movs	r2, #0
 800e842:	4b75      	ldr	r3, [pc, #468]	; (800ea18 <_dtoa_r+0x300>)
 800e844:	f7f1 fd20 	bl	8000288 <__aeabi_dsub>
 800e848:	a367      	add	r3, pc, #412	; (adr r3, 800e9e8 <_dtoa_r+0x2d0>)
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	f7f1 fed3 	bl	80005f8 <__aeabi_dmul>
 800e852:	a367      	add	r3, pc, #412	; (adr r3, 800e9f0 <_dtoa_r+0x2d8>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fd18 	bl	800028c <__adddf3>
 800e85c:	4606      	mov	r6, r0
 800e85e:	4628      	mov	r0, r5
 800e860:	460f      	mov	r7, r1
 800e862:	f7f1 fe5f 	bl	8000524 <__aeabi_i2d>
 800e866:	a364      	add	r3, pc, #400	; (adr r3, 800e9f8 <_dtoa_r+0x2e0>)
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f7f1 fec4 	bl	80005f8 <__aeabi_dmul>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	4630      	mov	r0, r6
 800e876:	4639      	mov	r1, r7
 800e878:	f7f1 fd08 	bl	800028c <__adddf3>
 800e87c:	4606      	mov	r6, r0
 800e87e:	460f      	mov	r7, r1
 800e880:	f7f2 f96a 	bl	8000b58 <__aeabi_d2iz>
 800e884:	2200      	movs	r2, #0
 800e886:	4683      	mov	fp, r0
 800e888:	2300      	movs	r3, #0
 800e88a:	4630      	mov	r0, r6
 800e88c:	4639      	mov	r1, r7
 800e88e:	f7f2 f925 	bl	8000adc <__aeabi_dcmplt>
 800e892:	b148      	cbz	r0, 800e8a8 <_dtoa_r+0x190>
 800e894:	4658      	mov	r0, fp
 800e896:	f7f1 fe45 	bl	8000524 <__aeabi_i2d>
 800e89a:	4632      	mov	r2, r6
 800e89c:	463b      	mov	r3, r7
 800e89e:	f7f2 f913 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8a2:	b908      	cbnz	r0, 800e8a8 <_dtoa_r+0x190>
 800e8a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8a8:	f1bb 0f16 	cmp.w	fp, #22
 800e8ac:	d857      	bhi.n	800e95e <_dtoa_r+0x246>
 800e8ae:	4b5b      	ldr	r3, [pc, #364]	; (800ea1c <_dtoa_r+0x304>)
 800e8b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b8:	ec51 0b18 	vmov	r0, r1, d8
 800e8bc:	f7f2 f90e 	bl	8000adc <__aeabi_dcmplt>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d04e      	beq.n	800e962 <_dtoa_r+0x24a>
 800e8c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	930c      	str	r3, [sp, #48]	; 0x30
 800e8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8ce:	1b5b      	subs	r3, r3, r5
 800e8d0:	1e5a      	subs	r2, r3, #1
 800e8d2:	bf45      	ittet	mi
 800e8d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800e8d8:	9305      	strmi	r3, [sp, #20]
 800e8da:	2300      	movpl	r3, #0
 800e8dc:	2300      	movmi	r3, #0
 800e8de:	9206      	str	r2, [sp, #24]
 800e8e0:	bf54      	ite	pl
 800e8e2:	9305      	strpl	r3, [sp, #20]
 800e8e4:	9306      	strmi	r3, [sp, #24]
 800e8e6:	f1bb 0f00 	cmp.w	fp, #0
 800e8ea:	db3c      	blt.n	800e966 <_dtoa_r+0x24e>
 800e8ec:	9b06      	ldr	r3, [sp, #24]
 800e8ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e8f2:	445b      	add	r3, fp
 800e8f4:	9306      	str	r3, [sp, #24]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	9308      	str	r3, [sp, #32]
 800e8fa:	9b07      	ldr	r3, [sp, #28]
 800e8fc:	2b09      	cmp	r3, #9
 800e8fe:	d868      	bhi.n	800e9d2 <_dtoa_r+0x2ba>
 800e900:	2b05      	cmp	r3, #5
 800e902:	bfc4      	itt	gt
 800e904:	3b04      	subgt	r3, #4
 800e906:	9307      	strgt	r3, [sp, #28]
 800e908:	9b07      	ldr	r3, [sp, #28]
 800e90a:	f1a3 0302 	sub.w	r3, r3, #2
 800e90e:	bfcc      	ite	gt
 800e910:	2500      	movgt	r5, #0
 800e912:	2501      	movle	r5, #1
 800e914:	2b03      	cmp	r3, #3
 800e916:	f200 8085 	bhi.w	800ea24 <_dtoa_r+0x30c>
 800e91a:	e8df f003 	tbb	[pc, r3]
 800e91e:	3b2e      	.short	0x3b2e
 800e920:	5839      	.short	0x5839
 800e922:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e926:	441d      	add	r5, r3
 800e928:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e92c:	2b20      	cmp	r3, #32
 800e92e:	bfc1      	itttt	gt
 800e930:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e934:	fa08 f803 	lslgt.w	r8, r8, r3
 800e938:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e93c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e940:	bfd6      	itet	le
 800e942:	f1c3 0320 	rsble	r3, r3, #32
 800e946:	ea48 0003 	orrgt.w	r0, r8, r3
 800e94a:	fa06 f003 	lslle.w	r0, r6, r3
 800e94e:	f7f1 fdd9 	bl	8000504 <__aeabi_ui2d>
 800e952:	2201      	movs	r2, #1
 800e954:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e958:	3d01      	subs	r5, #1
 800e95a:	920e      	str	r2, [sp, #56]	; 0x38
 800e95c:	e76f      	b.n	800e83e <_dtoa_r+0x126>
 800e95e:	2301      	movs	r3, #1
 800e960:	e7b3      	b.n	800e8ca <_dtoa_r+0x1b2>
 800e962:	900c      	str	r0, [sp, #48]	; 0x30
 800e964:	e7b2      	b.n	800e8cc <_dtoa_r+0x1b4>
 800e966:	9b05      	ldr	r3, [sp, #20]
 800e968:	eba3 030b 	sub.w	r3, r3, fp
 800e96c:	9305      	str	r3, [sp, #20]
 800e96e:	f1cb 0300 	rsb	r3, fp, #0
 800e972:	9308      	str	r3, [sp, #32]
 800e974:	2300      	movs	r3, #0
 800e976:	930b      	str	r3, [sp, #44]	; 0x2c
 800e978:	e7bf      	b.n	800e8fa <_dtoa_r+0x1e2>
 800e97a:	2300      	movs	r3, #0
 800e97c:	9309      	str	r3, [sp, #36]	; 0x24
 800e97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e980:	2b00      	cmp	r3, #0
 800e982:	dc52      	bgt.n	800ea2a <_dtoa_r+0x312>
 800e984:	2301      	movs	r3, #1
 800e986:	9301      	str	r3, [sp, #4]
 800e988:	9304      	str	r3, [sp, #16]
 800e98a:	461a      	mov	r2, r3
 800e98c:	920a      	str	r2, [sp, #40]	; 0x28
 800e98e:	e00b      	b.n	800e9a8 <_dtoa_r+0x290>
 800e990:	2301      	movs	r3, #1
 800e992:	e7f3      	b.n	800e97c <_dtoa_r+0x264>
 800e994:	2300      	movs	r3, #0
 800e996:	9309      	str	r3, [sp, #36]	; 0x24
 800e998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e99a:	445b      	add	r3, fp
 800e99c:	9301      	str	r3, [sp, #4]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	9304      	str	r3, [sp, #16]
 800e9a4:	bfb8      	it	lt
 800e9a6:	2301      	movlt	r3, #1
 800e9a8:	69e0      	ldr	r0, [r4, #28]
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	2204      	movs	r2, #4
 800e9ae:	f102 0614 	add.w	r6, r2, #20
 800e9b2:	429e      	cmp	r6, r3
 800e9b4:	d93d      	bls.n	800ea32 <_dtoa_r+0x31a>
 800e9b6:	6041      	str	r1, [r0, #4]
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f000 fd9f 	bl	800f4fc <_Balloc>
 800e9be:	9000      	str	r0, [sp, #0]
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d139      	bne.n	800ea38 <_dtoa_r+0x320>
 800e9c4:	4b16      	ldr	r3, [pc, #88]	; (800ea20 <_dtoa_r+0x308>)
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	f240 11af 	movw	r1, #431	; 0x1af
 800e9cc:	e6bd      	b.n	800e74a <_dtoa_r+0x32>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e7e1      	b.n	800e996 <_dtoa_r+0x27e>
 800e9d2:	2501      	movs	r5, #1
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	9307      	str	r3, [sp, #28]
 800e9d8:	9509      	str	r5, [sp, #36]	; 0x24
 800e9da:	f04f 33ff 	mov.w	r3, #4294967295
 800e9de:	9301      	str	r3, [sp, #4]
 800e9e0:	9304      	str	r3, [sp, #16]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	2312      	movs	r3, #18
 800e9e6:	e7d1      	b.n	800e98c <_dtoa_r+0x274>
 800e9e8:	636f4361 	.word	0x636f4361
 800e9ec:	3fd287a7 	.word	0x3fd287a7
 800e9f0:	8b60c8b3 	.word	0x8b60c8b3
 800e9f4:	3fc68a28 	.word	0x3fc68a28
 800e9f8:	509f79fb 	.word	0x509f79fb
 800e9fc:	3fd34413 	.word	0x3fd34413
 800ea00:	08012eee 	.word	0x08012eee
 800ea04:	08012f05 	.word	0x08012f05
 800ea08:	7ff00000 	.word	0x7ff00000
 800ea0c:	08012eea 	.word	0x08012eea
 800ea10:	08012ee1 	.word	0x08012ee1
 800ea14:	08012eb9 	.word	0x08012eb9
 800ea18:	3ff80000 	.word	0x3ff80000
 800ea1c:	08012ff0 	.word	0x08012ff0
 800ea20:	08012f5d 	.word	0x08012f5d
 800ea24:	2301      	movs	r3, #1
 800ea26:	9309      	str	r3, [sp, #36]	; 0x24
 800ea28:	e7d7      	b.n	800e9da <_dtoa_r+0x2c2>
 800ea2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea2c:	9301      	str	r3, [sp, #4]
 800ea2e:	9304      	str	r3, [sp, #16]
 800ea30:	e7ba      	b.n	800e9a8 <_dtoa_r+0x290>
 800ea32:	3101      	adds	r1, #1
 800ea34:	0052      	lsls	r2, r2, #1
 800ea36:	e7ba      	b.n	800e9ae <_dtoa_r+0x296>
 800ea38:	69e3      	ldr	r3, [r4, #28]
 800ea3a:	9a00      	ldr	r2, [sp, #0]
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	9b04      	ldr	r3, [sp, #16]
 800ea40:	2b0e      	cmp	r3, #14
 800ea42:	f200 80a8 	bhi.w	800eb96 <_dtoa_r+0x47e>
 800ea46:	2d00      	cmp	r5, #0
 800ea48:	f000 80a5 	beq.w	800eb96 <_dtoa_r+0x47e>
 800ea4c:	f1bb 0f00 	cmp.w	fp, #0
 800ea50:	dd38      	ble.n	800eac4 <_dtoa_r+0x3ac>
 800ea52:	4bc0      	ldr	r3, [pc, #768]	; (800ed54 <_dtoa_r+0x63c>)
 800ea54:	f00b 020f 	and.w	r2, fp, #15
 800ea58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ea60:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ea64:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ea68:	d019      	beq.n	800ea9e <_dtoa_r+0x386>
 800ea6a:	4bbb      	ldr	r3, [pc, #748]	; (800ed58 <_dtoa_r+0x640>)
 800ea6c:	ec51 0b18 	vmov	r0, r1, d8
 800ea70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea74:	f7f1 feea 	bl	800084c <__aeabi_ddiv>
 800ea78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea7c:	f008 080f 	and.w	r8, r8, #15
 800ea80:	2503      	movs	r5, #3
 800ea82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ed58 <_dtoa_r+0x640>
 800ea86:	f1b8 0f00 	cmp.w	r8, #0
 800ea8a:	d10a      	bne.n	800eaa2 <_dtoa_r+0x38a>
 800ea8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea90:	4632      	mov	r2, r6
 800ea92:	463b      	mov	r3, r7
 800ea94:	f7f1 feda 	bl	800084c <__aeabi_ddiv>
 800ea98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea9c:	e02b      	b.n	800eaf6 <_dtoa_r+0x3de>
 800ea9e:	2502      	movs	r5, #2
 800eaa0:	e7ef      	b.n	800ea82 <_dtoa_r+0x36a>
 800eaa2:	f018 0f01 	tst.w	r8, #1
 800eaa6:	d008      	beq.n	800eaba <_dtoa_r+0x3a2>
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	4639      	mov	r1, r7
 800eaac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eab0:	f7f1 fda2 	bl	80005f8 <__aeabi_dmul>
 800eab4:	3501      	adds	r5, #1
 800eab6:	4606      	mov	r6, r0
 800eab8:	460f      	mov	r7, r1
 800eaba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eabe:	f109 0908 	add.w	r9, r9, #8
 800eac2:	e7e0      	b.n	800ea86 <_dtoa_r+0x36e>
 800eac4:	f000 809f 	beq.w	800ec06 <_dtoa_r+0x4ee>
 800eac8:	f1cb 0600 	rsb	r6, fp, #0
 800eacc:	4ba1      	ldr	r3, [pc, #644]	; (800ed54 <_dtoa_r+0x63c>)
 800eace:	4fa2      	ldr	r7, [pc, #648]	; (800ed58 <_dtoa_r+0x640>)
 800ead0:	f006 020f 	and.w	r2, r6, #15
 800ead4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	ec51 0b18 	vmov	r0, r1, d8
 800eae0:	f7f1 fd8a 	bl	80005f8 <__aeabi_dmul>
 800eae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eae8:	1136      	asrs	r6, r6, #4
 800eaea:	2300      	movs	r3, #0
 800eaec:	2502      	movs	r5, #2
 800eaee:	2e00      	cmp	r6, #0
 800eaf0:	d17e      	bne.n	800ebf0 <_dtoa_r+0x4d8>
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1d0      	bne.n	800ea98 <_dtoa_r+0x380>
 800eaf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaf8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f000 8084 	beq.w	800ec0a <_dtoa_r+0x4f2>
 800eb02:	4b96      	ldr	r3, [pc, #600]	; (800ed5c <_dtoa_r+0x644>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f1 ffe7 	bl	8000adc <__aeabi_dcmplt>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d07b      	beq.n	800ec0a <_dtoa_r+0x4f2>
 800eb12:	9b04      	ldr	r3, [sp, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d078      	beq.n	800ec0a <_dtoa_r+0x4f2>
 800eb18:	9b01      	ldr	r3, [sp, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	dd39      	ble.n	800eb92 <_dtoa_r+0x47a>
 800eb1e:	4b90      	ldr	r3, [pc, #576]	; (800ed60 <_dtoa_r+0x648>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	4640      	mov	r0, r8
 800eb24:	4649      	mov	r1, r9
 800eb26:	f7f1 fd67 	bl	80005f8 <__aeabi_dmul>
 800eb2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb2e:	9e01      	ldr	r6, [sp, #4]
 800eb30:	f10b 37ff 	add.w	r7, fp, #4294967295
 800eb34:	3501      	adds	r5, #1
 800eb36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f7f1 fcf2 	bl	8000524 <__aeabi_i2d>
 800eb40:	4642      	mov	r2, r8
 800eb42:	464b      	mov	r3, r9
 800eb44:	f7f1 fd58 	bl	80005f8 <__aeabi_dmul>
 800eb48:	4b86      	ldr	r3, [pc, #536]	; (800ed64 <_dtoa_r+0x64c>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f7f1 fb9e 	bl	800028c <__adddf3>
 800eb50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb58:	9303      	str	r3, [sp, #12]
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	d158      	bne.n	800ec10 <_dtoa_r+0x4f8>
 800eb5e:	4b82      	ldr	r3, [pc, #520]	; (800ed68 <_dtoa_r+0x650>)
 800eb60:	2200      	movs	r2, #0
 800eb62:	4640      	mov	r0, r8
 800eb64:	4649      	mov	r1, r9
 800eb66:	f7f1 fb8f 	bl	8000288 <__aeabi_dsub>
 800eb6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb6e:	4680      	mov	r8, r0
 800eb70:	4689      	mov	r9, r1
 800eb72:	f7f1 ffd1 	bl	8000b18 <__aeabi_dcmpgt>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	f040 8296 	bne.w	800f0a8 <_dtoa_r+0x990>
 800eb7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb80:	4640      	mov	r0, r8
 800eb82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb86:	4649      	mov	r1, r9
 800eb88:	f7f1 ffa8 	bl	8000adc <__aeabi_dcmplt>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	f040 8289 	bne.w	800f0a4 <_dtoa_r+0x98c>
 800eb92:	ed8d 8b02 	vstr	d8, [sp, #8]
 800eb96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f2c0 814e 	blt.w	800ee3a <_dtoa_r+0x722>
 800eb9e:	f1bb 0f0e 	cmp.w	fp, #14
 800eba2:	f300 814a 	bgt.w	800ee3a <_dtoa_r+0x722>
 800eba6:	4b6b      	ldr	r3, [pc, #428]	; (800ed54 <_dtoa_r+0x63c>)
 800eba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ebac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f280 80dc 	bge.w	800ed70 <_dtoa_r+0x658>
 800ebb8:	9b04      	ldr	r3, [sp, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f300 80d8 	bgt.w	800ed70 <_dtoa_r+0x658>
 800ebc0:	f040 826f 	bne.w	800f0a2 <_dtoa_r+0x98a>
 800ebc4:	4b68      	ldr	r3, [pc, #416]	; (800ed68 <_dtoa_r+0x650>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4640      	mov	r0, r8
 800ebca:	4649      	mov	r1, r9
 800ebcc:	f7f1 fd14 	bl	80005f8 <__aeabi_dmul>
 800ebd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebd4:	f7f1 ff96 	bl	8000b04 <__aeabi_dcmpge>
 800ebd8:	9e04      	ldr	r6, [sp, #16]
 800ebda:	4637      	mov	r7, r6
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f040 8245 	bne.w	800f06c <_dtoa_r+0x954>
 800ebe2:	9d00      	ldr	r5, [sp, #0]
 800ebe4:	2331      	movs	r3, #49	; 0x31
 800ebe6:	f805 3b01 	strb.w	r3, [r5], #1
 800ebea:	f10b 0b01 	add.w	fp, fp, #1
 800ebee:	e241      	b.n	800f074 <_dtoa_r+0x95c>
 800ebf0:	07f2      	lsls	r2, r6, #31
 800ebf2:	d505      	bpl.n	800ec00 <_dtoa_r+0x4e8>
 800ebf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebf8:	f7f1 fcfe 	bl	80005f8 <__aeabi_dmul>
 800ebfc:	3501      	adds	r5, #1
 800ebfe:	2301      	movs	r3, #1
 800ec00:	1076      	asrs	r6, r6, #1
 800ec02:	3708      	adds	r7, #8
 800ec04:	e773      	b.n	800eaee <_dtoa_r+0x3d6>
 800ec06:	2502      	movs	r5, #2
 800ec08:	e775      	b.n	800eaf6 <_dtoa_r+0x3de>
 800ec0a:	9e04      	ldr	r6, [sp, #16]
 800ec0c:	465f      	mov	r7, fp
 800ec0e:	e792      	b.n	800eb36 <_dtoa_r+0x41e>
 800ec10:	9900      	ldr	r1, [sp, #0]
 800ec12:	4b50      	ldr	r3, [pc, #320]	; (800ed54 <_dtoa_r+0x63c>)
 800ec14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec18:	4431      	add	r1, r6
 800ec1a:	9102      	str	r1, [sp, #8]
 800ec1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec1e:	eeb0 9a47 	vmov.f32	s18, s14
 800ec22:	eef0 9a67 	vmov.f32	s19, s15
 800ec26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec2e:	2900      	cmp	r1, #0
 800ec30:	d044      	beq.n	800ecbc <_dtoa_r+0x5a4>
 800ec32:	494e      	ldr	r1, [pc, #312]	; (800ed6c <_dtoa_r+0x654>)
 800ec34:	2000      	movs	r0, #0
 800ec36:	f7f1 fe09 	bl	800084c <__aeabi_ddiv>
 800ec3a:	ec53 2b19 	vmov	r2, r3, d9
 800ec3e:	f7f1 fb23 	bl	8000288 <__aeabi_dsub>
 800ec42:	9d00      	ldr	r5, [sp, #0]
 800ec44:	ec41 0b19 	vmov	d9, r0, r1
 800ec48:	4649      	mov	r1, r9
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	f7f1 ff84 	bl	8000b58 <__aeabi_d2iz>
 800ec50:	4606      	mov	r6, r0
 800ec52:	f7f1 fc67 	bl	8000524 <__aeabi_i2d>
 800ec56:	4602      	mov	r2, r0
 800ec58:	460b      	mov	r3, r1
 800ec5a:	4640      	mov	r0, r8
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	f7f1 fb13 	bl	8000288 <__aeabi_dsub>
 800ec62:	3630      	adds	r6, #48	; 0x30
 800ec64:	f805 6b01 	strb.w	r6, [r5], #1
 800ec68:	ec53 2b19 	vmov	r2, r3, d9
 800ec6c:	4680      	mov	r8, r0
 800ec6e:	4689      	mov	r9, r1
 800ec70:	f7f1 ff34 	bl	8000adc <__aeabi_dcmplt>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d164      	bne.n	800ed42 <_dtoa_r+0x62a>
 800ec78:	4642      	mov	r2, r8
 800ec7a:	464b      	mov	r3, r9
 800ec7c:	4937      	ldr	r1, [pc, #220]	; (800ed5c <_dtoa_r+0x644>)
 800ec7e:	2000      	movs	r0, #0
 800ec80:	f7f1 fb02 	bl	8000288 <__aeabi_dsub>
 800ec84:	ec53 2b19 	vmov	r2, r3, d9
 800ec88:	f7f1 ff28 	bl	8000adc <__aeabi_dcmplt>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f040 80b6 	bne.w	800edfe <_dtoa_r+0x6e6>
 800ec92:	9b02      	ldr	r3, [sp, #8]
 800ec94:	429d      	cmp	r5, r3
 800ec96:	f43f af7c 	beq.w	800eb92 <_dtoa_r+0x47a>
 800ec9a:	4b31      	ldr	r3, [pc, #196]	; (800ed60 <_dtoa_r+0x648>)
 800ec9c:	ec51 0b19 	vmov	r0, r1, d9
 800eca0:	2200      	movs	r2, #0
 800eca2:	f7f1 fca9 	bl	80005f8 <__aeabi_dmul>
 800eca6:	4b2e      	ldr	r3, [pc, #184]	; (800ed60 <_dtoa_r+0x648>)
 800eca8:	ec41 0b19 	vmov	d9, r0, r1
 800ecac:	2200      	movs	r2, #0
 800ecae:	4640      	mov	r0, r8
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	f7f1 fca1 	bl	80005f8 <__aeabi_dmul>
 800ecb6:	4680      	mov	r8, r0
 800ecb8:	4689      	mov	r9, r1
 800ecba:	e7c5      	b.n	800ec48 <_dtoa_r+0x530>
 800ecbc:	ec51 0b17 	vmov	r0, r1, d7
 800ecc0:	f7f1 fc9a 	bl	80005f8 <__aeabi_dmul>
 800ecc4:	9b02      	ldr	r3, [sp, #8]
 800ecc6:	9d00      	ldr	r5, [sp, #0]
 800ecc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecca:	ec41 0b19 	vmov	d9, r0, r1
 800ecce:	4649      	mov	r1, r9
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	f7f1 ff41 	bl	8000b58 <__aeabi_d2iz>
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	f7f1 fc24 	bl	8000524 <__aeabi_i2d>
 800ecdc:	3630      	adds	r6, #48	; 0x30
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	4640      	mov	r0, r8
 800ece4:	4649      	mov	r1, r9
 800ece6:	f7f1 facf 	bl	8000288 <__aeabi_dsub>
 800ecea:	f805 6b01 	strb.w	r6, [r5], #1
 800ecee:	9b02      	ldr	r3, [sp, #8]
 800ecf0:	429d      	cmp	r5, r3
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	4689      	mov	r9, r1
 800ecf6:	f04f 0200 	mov.w	r2, #0
 800ecfa:	d124      	bne.n	800ed46 <_dtoa_r+0x62e>
 800ecfc:	4b1b      	ldr	r3, [pc, #108]	; (800ed6c <_dtoa_r+0x654>)
 800ecfe:	ec51 0b19 	vmov	r0, r1, d9
 800ed02:	f7f1 fac3 	bl	800028c <__adddf3>
 800ed06:	4602      	mov	r2, r0
 800ed08:	460b      	mov	r3, r1
 800ed0a:	4640      	mov	r0, r8
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	f7f1 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d173      	bne.n	800edfe <_dtoa_r+0x6e6>
 800ed16:	ec53 2b19 	vmov	r2, r3, d9
 800ed1a:	4914      	ldr	r1, [pc, #80]	; (800ed6c <_dtoa_r+0x654>)
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	f7f1 fab3 	bl	8000288 <__aeabi_dsub>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	4640      	mov	r0, r8
 800ed28:	4649      	mov	r1, r9
 800ed2a:	f7f1 fed7 	bl	8000adc <__aeabi_dcmplt>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	f43f af2f 	beq.w	800eb92 <_dtoa_r+0x47a>
 800ed34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed36:	1e6b      	subs	r3, r5, #1
 800ed38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed3e:	2b30      	cmp	r3, #48	; 0x30
 800ed40:	d0f8      	beq.n	800ed34 <_dtoa_r+0x61c>
 800ed42:	46bb      	mov	fp, r7
 800ed44:	e04a      	b.n	800eddc <_dtoa_r+0x6c4>
 800ed46:	4b06      	ldr	r3, [pc, #24]	; (800ed60 <_dtoa_r+0x648>)
 800ed48:	f7f1 fc56 	bl	80005f8 <__aeabi_dmul>
 800ed4c:	4680      	mov	r8, r0
 800ed4e:	4689      	mov	r9, r1
 800ed50:	e7bd      	b.n	800ecce <_dtoa_r+0x5b6>
 800ed52:	bf00      	nop
 800ed54:	08012ff0 	.word	0x08012ff0
 800ed58:	08012fc8 	.word	0x08012fc8
 800ed5c:	3ff00000 	.word	0x3ff00000
 800ed60:	40240000 	.word	0x40240000
 800ed64:	401c0000 	.word	0x401c0000
 800ed68:	40140000 	.word	0x40140000
 800ed6c:	3fe00000 	.word	0x3fe00000
 800ed70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed74:	9d00      	ldr	r5, [sp, #0]
 800ed76:	4642      	mov	r2, r8
 800ed78:	464b      	mov	r3, r9
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	f7f1 fd65 	bl	800084c <__aeabi_ddiv>
 800ed82:	f7f1 fee9 	bl	8000b58 <__aeabi_d2iz>
 800ed86:	9001      	str	r0, [sp, #4]
 800ed88:	f7f1 fbcc 	bl	8000524 <__aeabi_i2d>
 800ed8c:	4642      	mov	r2, r8
 800ed8e:	464b      	mov	r3, r9
 800ed90:	f7f1 fc32 	bl	80005f8 <__aeabi_dmul>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	4630      	mov	r0, r6
 800ed9a:	4639      	mov	r1, r7
 800ed9c:	f7f1 fa74 	bl	8000288 <__aeabi_dsub>
 800eda0:	9e01      	ldr	r6, [sp, #4]
 800eda2:	9f04      	ldr	r7, [sp, #16]
 800eda4:	3630      	adds	r6, #48	; 0x30
 800eda6:	f805 6b01 	strb.w	r6, [r5], #1
 800edaa:	9e00      	ldr	r6, [sp, #0]
 800edac:	1bae      	subs	r6, r5, r6
 800edae:	42b7      	cmp	r7, r6
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	d134      	bne.n	800ee20 <_dtoa_r+0x708>
 800edb6:	f7f1 fa69 	bl	800028c <__adddf3>
 800edba:	4642      	mov	r2, r8
 800edbc:	464b      	mov	r3, r9
 800edbe:	4606      	mov	r6, r0
 800edc0:	460f      	mov	r7, r1
 800edc2:	f7f1 fea9 	bl	8000b18 <__aeabi_dcmpgt>
 800edc6:	b9c8      	cbnz	r0, 800edfc <_dtoa_r+0x6e4>
 800edc8:	4642      	mov	r2, r8
 800edca:	464b      	mov	r3, r9
 800edcc:	4630      	mov	r0, r6
 800edce:	4639      	mov	r1, r7
 800edd0:	f7f1 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800edd4:	b110      	cbz	r0, 800eddc <_dtoa_r+0x6c4>
 800edd6:	9b01      	ldr	r3, [sp, #4]
 800edd8:	07db      	lsls	r3, r3, #31
 800edda:	d40f      	bmi.n	800edfc <_dtoa_r+0x6e4>
 800eddc:	4651      	mov	r1, sl
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 fbcc 	bl	800f57c <_Bfree>
 800ede4:	2300      	movs	r3, #0
 800ede6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ede8:	702b      	strb	r3, [r5, #0]
 800edea:	f10b 0301 	add.w	r3, fp, #1
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f43f ace2 	beq.w	800e7bc <_dtoa_r+0xa4>
 800edf8:	601d      	str	r5, [r3, #0]
 800edfa:	e4df      	b.n	800e7bc <_dtoa_r+0xa4>
 800edfc:	465f      	mov	r7, fp
 800edfe:	462b      	mov	r3, r5
 800ee00:	461d      	mov	r5, r3
 800ee02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee06:	2a39      	cmp	r2, #57	; 0x39
 800ee08:	d106      	bne.n	800ee18 <_dtoa_r+0x700>
 800ee0a:	9a00      	ldr	r2, [sp, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d1f7      	bne.n	800ee00 <_dtoa_r+0x6e8>
 800ee10:	9900      	ldr	r1, [sp, #0]
 800ee12:	2230      	movs	r2, #48	; 0x30
 800ee14:	3701      	adds	r7, #1
 800ee16:	700a      	strb	r2, [r1, #0]
 800ee18:	781a      	ldrb	r2, [r3, #0]
 800ee1a:	3201      	adds	r2, #1
 800ee1c:	701a      	strb	r2, [r3, #0]
 800ee1e:	e790      	b.n	800ed42 <_dtoa_r+0x62a>
 800ee20:	4ba3      	ldr	r3, [pc, #652]	; (800f0b0 <_dtoa_r+0x998>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	f7f1 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ee28:	2200      	movs	r2, #0
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	460f      	mov	r7, r1
 800ee30:	f7f1 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d09e      	beq.n	800ed76 <_dtoa_r+0x65e>
 800ee38:	e7d0      	b.n	800eddc <_dtoa_r+0x6c4>
 800ee3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee3c:	2a00      	cmp	r2, #0
 800ee3e:	f000 80ca 	beq.w	800efd6 <_dtoa_r+0x8be>
 800ee42:	9a07      	ldr	r2, [sp, #28]
 800ee44:	2a01      	cmp	r2, #1
 800ee46:	f300 80ad 	bgt.w	800efa4 <_dtoa_r+0x88c>
 800ee4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee4c:	2a00      	cmp	r2, #0
 800ee4e:	f000 80a5 	beq.w	800ef9c <_dtoa_r+0x884>
 800ee52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee56:	9e08      	ldr	r6, [sp, #32]
 800ee58:	9d05      	ldr	r5, [sp, #20]
 800ee5a:	9a05      	ldr	r2, [sp, #20]
 800ee5c:	441a      	add	r2, r3
 800ee5e:	9205      	str	r2, [sp, #20]
 800ee60:	9a06      	ldr	r2, [sp, #24]
 800ee62:	2101      	movs	r1, #1
 800ee64:	441a      	add	r2, r3
 800ee66:	4620      	mov	r0, r4
 800ee68:	9206      	str	r2, [sp, #24]
 800ee6a:	f000 fc87 	bl	800f77c <__i2b>
 800ee6e:	4607      	mov	r7, r0
 800ee70:	b165      	cbz	r5, 800ee8c <_dtoa_r+0x774>
 800ee72:	9b06      	ldr	r3, [sp, #24]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	dd09      	ble.n	800ee8c <_dtoa_r+0x774>
 800ee78:	42ab      	cmp	r3, r5
 800ee7a:	9a05      	ldr	r2, [sp, #20]
 800ee7c:	bfa8      	it	ge
 800ee7e:	462b      	movge	r3, r5
 800ee80:	1ad2      	subs	r2, r2, r3
 800ee82:	9205      	str	r2, [sp, #20]
 800ee84:	9a06      	ldr	r2, [sp, #24]
 800ee86:	1aed      	subs	r5, r5, r3
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	9306      	str	r3, [sp, #24]
 800ee8c:	9b08      	ldr	r3, [sp, #32]
 800ee8e:	b1f3      	cbz	r3, 800eece <_dtoa_r+0x7b6>
 800ee90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 80a3 	beq.w	800efde <_dtoa_r+0x8c6>
 800ee98:	2e00      	cmp	r6, #0
 800ee9a:	dd10      	ble.n	800eebe <_dtoa_r+0x7a6>
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	4632      	mov	r2, r6
 800eea0:	4620      	mov	r0, r4
 800eea2:	f000 fd2b 	bl	800f8fc <__pow5mult>
 800eea6:	4652      	mov	r2, sl
 800eea8:	4601      	mov	r1, r0
 800eeaa:	4607      	mov	r7, r0
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fc7b 	bl	800f7a8 <__multiply>
 800eeb2:	4651      	mov	r1, sl
 800eeb4:	4680      	mov	r8, r0
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 fb60 	bl	800f57c <_Bfree>
 800eebc:	46c2      	mov	sl, r8
 800eebe:	9b08      	ldr	r3, [sp, #32]
 800eec0:	1b9a      	subs	r2, r3, r6
 800eec2:	d004      	beq.n	800eece <_dtoa_r+0x7b6>
 800eec4:	4651      	mov	r1, sl
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 fd18 	bl	800f8fc <__pow5mult>
 800eecc:	4682      	mov	sl, r0
 800eece:	2101      	movs	r1, #1
 800eed0:	4620      	mov	r0, r4
 800eed2:	f000 fc53 	bl	800f77c <__i2b>
 800eed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	4606      	mov	r6, r0
 800eedc:	f340 8081 	ble.w	800efe2 <_dtoa_r+0x8ca>
 800eee0:	461a      	mov	r2, r3
 800eee2:	4601      	mov	r1, r0
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fd09 	bl	800f8fc <__pow5mult>
 800eeea:	9b07      	ldr	r3, [sp, #28]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	4606      	mov	r6, r0
 800eef0:	dd7a      	ble.n	800efe8 <_dtoa_r+0x8d0>
 800eef2:	f04f 0800 	mov.w	r8, #0
 800eef6:	6933      	ldr	r3, [r6, #16]
 800eef8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eefc:	6918      	ldr	r0, [r3, #16]
 800eefe:	f000 fbef 	bl	800f6e0 <__hi0bits>
 800ef02:	f1c0 0020 	rsb	r0, r0, #32
 800ef06:	9b06      	ldr	r3, [sp, #24]
 800ef08:	4418      	add	r0, r3
 800ef0a:	f010 001f 	ands.w	r0, r0, #31
 800ef0e:	f000 8094 	beq.w	800f03a <_dtoa_r+0x922>
 800ef12:	f1c0 0320 	rsb	r3, r0, #32
 800ef16:	2b04      	cmp	r3, #4
 800ef18:	f340 8085 	ble.w	800f026 <_dtoa_r+0x90e>
 800ef1c:	9b05      	ldr	r3, [sp, #20]
 800ef1e:	f1c0 001c 	rsb	r0, r0, #28
 800ef22:	4403      	add	r3, r0
 800ef24:	9305      	str	r3, [sp, #20]
 800ef26:	9b06      	ldr	r3, [sp, #24]
 800ef28:	4403      	add	r3, r0
 800ef2a:	4405      	add	r5, r0
 800ef2c:	9306      	str	r3, [sp, #24]
 800ef2e:	9b05      	ldr	r3, [sp, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dd05      	ble.n	800ef40 <_dtoa_r+0x828>
 800ef34:	4651      	mov	r1, sl
 800ef36:	461a      	mov	r2, r3
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f000 fd39 	bl	800f9b0 <__lshift>
 800ef3e:	4682      	mov	sl, r0
 800ef40:	9b06      	ldr	r3, [sp, #24]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	dd05      	ble.n	800ef52 <_dtoa_r+0x83a>
 800ef46:	4631      	mov	r1, r6
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 fd30 	bl	800f9b0 <__lshift>
 800ef50:	4606      	mov	r6, r0
 800ef52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d072      	beq.n	800f03e <_dtoa_r+0x926>
 800ef58:	4631      	mov	r1, r6
 800ef5a:	4650      	mov	r0, sl
 800ef5c:	f000 fd94 	bl	800fa88 <__mcmp>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	da6c      	bge.n	800f03e <_dtoa_r+0x926>
 800ef64:	2300      	movs	r3, #0
 800ef66:	4651      	mov	r1, sl
 800ef68:	220a      	movs	r2, #10
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 fb28 	bl	800f5c0 <__multadd>
 800ef70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef76:	4682      	mov	sl, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 81b0 	beq.w	800f2de <_dtoa_r+0xbc6>
 800ef7e:	2300      	movs	r3, #0
 800ef80:	4639      	mov	r1, r7
 800ef82:	220a      	movs	r2, #10
 800ef84:	4620      	mov	r0, r4
 800ef86:	f000 fb1b 	bl	800f5c0 <__multadd>
 800ef8a:	9b01      	ldr	r3, [sp, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	4607      	mov	r7, r0
 800ef90:	f300 8096 	bgt.w	800f0c0 <_dtoa_r+0x9a8>
 800ef94:	9b07      	ldr	r3, [sp, #28]
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	dc59      	bgt.n	800f04e <_dtoa_r+0x936>
 800ef9a:	e091      	b.n	800f0c0 <_dtoa_r+0x9a8>
 800ef9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efa2:	e758      	b.n	800ee56 <_dtoa_r+0x73e>
 800efa4:	9b04      	ldr	r3, [sp, #16]
 800efa6:	1e5e      	subs	r6, r3, #1
 800efa8:	9b08      	ldr	r3, [sp, #32]
 800efaa:	42b3      	cmp	r3, r6
 800efac:	bfbf      	itttt	lt
 800efae:	9b08      	ldrlt	r3, [sp, #32]
 800efb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800efb2:	9608      	strlt	r6, [sp, #32]
 800efb4:	1af3      	sublt	r3, r6, r3
 800efb6:	bfb4      	ite	lt
 800efb8:	18d2      	addlt	r2, r2, r3
 800efba:	1b9e      	subge	r6, r3, r6
 800efbc:	9b04      	ldr	r3, [sp, #16]
 800efbe:	bfbc      	itt	lt
 800efc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800efc2:	2600      	movlt	r6, #0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bfb7      	itett	lt
 800efc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800efcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800efd0:	1a9d      	sublt	r5, r3, r2
 800efd2:	2300      	movlt	r3, #0
 800efd4:	e741      	b.n	800ee5a <_dtoa_r+0x742>
 800efd6:	9e08      	ldr	r6, [sp, #32]
 800efd8:	9d05      	ldr	r5, [sp, #20]
 800efda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800efdc:	e748      	b.n	800ee70 <_dtoa_r+0x758>
 800efde:	9a08      	ldr	r2, [sp, #32]
 800efe0:	e770      	b.n	800eec4 <_dtoa_r+0x7ac>
 800efe2:	9b07      	ldr	r3, [sp, #28]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	dc19      	bgt.n	800f01c <_dtoa_r+0x904>
 800efe8:	9b02      	ldr	r3, [sp, #8]
 800efea:	b9bb      	cbnz	r3, 800f01c <_dtoa_r+0x904>
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eff2:	b99b      	cbnz	r3, 800f01c <_dtoa_r+0x904>
 800eff4:	9b03      	ldr	r3, [sp, #12]
 800eff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800effa:	0d1b      	lsrs	r3, r3, #20
 800effc:	051b      	lsls	r3, r3, #20
 800effe:	b183      	cbz	r3, 800f022 <_dtoa_r+0x90a>
 800f000:	9b05      	ldr	r3, [sp, #20]
 800f002:	3301      	adds	r3, #1
 800f004:	9305      	str	r3, [sp, #20]
 800f006:	9b06      	ldr	r3, [sp, #24]
 800f008:	3301      	adds	r3, #1
 800f00a:	9306      	str	r3, [sp, #24]
 800f00c:	f04f 0801 	mov.w	r8, #1
 800f010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f012:	2b00      	cmp	r3, #0
 800f014:	f47f af6f 	bne.w	800eef6 <_dtoa_r+0x7de>
 800f018:	2001      	movs	r0, #1
 800f01a:	e774      	b.n	800ef06 <_dtoa_r+0x7ee>
 800f01c:	f04f 0800 	mov.w	r8, #0
 800f020:	e7f6      	b.n	800f010 <_dtoa_r+0x8f8>
 800f022:	4698      	mov	r8, r3
 800f024:	e7f4      	b.n	800f010 <_dtoa_r+0x8f8>
 800f026:	d082      	beq.n	800ef2e <_dtoa_r+0x816>
 800f028:	9a05      	ldr	r2, [sp, #20]
 800f02a:	331c      	adds	r3, #28
 800f02c:	441a      	add	r2, r3
 800f02e:	9205      	str	r2, [sp, #20]
 800f030:	9a06      	ldr	r2, [sp, #24]
 800f032:	441a      	add	r2, r3
 800f034:	441d      	add	r5, r3
 800f036:	9206      	str	r2, [sp, #24]
 800f038:	e779      	b.n	800ef2e <_dtoa_r+0x816>
 800f03a:	4603      	mov	r3, r0
 800f03c:	e7f4      	b.n	800f028 <_dtoa_r+0x910>
 800f03e:	9b04      	ldr	r3, [sp, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	dc37      	bgt.n	800f0b4 <_dtoa_r+0x99c>
 800f044:	9b07      	ldr	r3, [sp, #28]
 800f046:	2b02      	cmp	r3, #2
 800f048:	dd34      	ble.n	800f0b4 <_dtoa_r+0x99c>
 800f04a:	9b04      	ldr	r3, [sp, #16]
 800f04c:	9301      	str	r3, [sp, #4]
 800f04e:	9b01      	ldr	r3, [sp, #4]
 800f050:	b963      	cbnz	r3, 800f06c <_dtoa_r+0x954>
 800f052:	4631      	mov	r1, r6
 800f054:	2205      	movs	r2, #5
 800f056:	4620      	mov	r0, r4
 800f058:	f000 fab2 	bl	800f5c0 <__multadd>
 800f05c:	4601      	mov	r1, r0
 800f05e:	4606      	mov	r6, r0
 800f060:	4650      	mov	r0, sl
 800f062:	f000 fd11 	bl	800fa88 <__mcmp>
 800f066:	2800      	cmp	r0, #0
 800f068:	f73f adbb 	bgt.w	800ebe2 <_dtoa_r+0x4ca>
 800f06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f06e:	9d00      	ldr	r5, [sp, #0]
 800f070:	ea6f 0b03 	mvn.w	fp, r3
 800f074:	f04f 0800 	mov.w	r8, #0
 800f078:	4631      	mov	r1, r6
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 fa7e 	bl	800f57c <_Bfree>
 800f080:	2f00      	cmp	r7, #0
 800f082:	f43f aeab 	beq.w	800eddc <_dtoa_r+0x6c4>
 800f086:	f1b8 0f00 	cmp.w	r8, #0
 800f08a:	d005      	beq.n	800f098 <_dtoa_r+0x980>
 800f08c:	45b8      	cmp	r8, r7
 800f08e:	d003      	beq.n	800f098 <_dtoa_r+0x980>
 800f090:	4641      	mov	r1, r8
 800f092:	4620      	mov	r0, r4
 800f094:	f000 fa72 	bl	800f57c <_Bfree>
 800f098:	4639      	mov	r1, r7
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 fa6e 	bl	800f57c <_Bfree>
 800f0a0:	e69c      	b.n	800eddc <_dtoa_r+0x6c4>
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	4637      	mov	r7, r6
 800f0a6:	e7e1      	b.n	800f06c <_dtoa_r+0x954>
 800f0a8:	46bb      	mov	fp, r7
 800f0aa:	4637      	mov	r7, r6
 800f0ac:	e599      	b.n	800ebe2 <_dtoa_r+0x4ca>
 800f0ae:	bf00      	nop
 800f0b0:	40240000 	.word	0x40240000
 800f0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f000 80c8 	beq.w	800f24c <_dtoa_r+0xb34>
 800f0bc:	9b04      	ldr	r3, [sp, #16]
 800f0be:	9301      	str	r3, [sp, #4]
 800f0c0:	2d00      	cmp	r5, #0
 800f0c2:	dd05      	ble.n	800f0d0 <_dtoa_r+0x9b8>
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 fc71 	bl	800f9b0 <__lshift>
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	f1b8 0f00 	cmp.w	r8, #0
 800f0d4:	d05b      	beq.n	800f18e <_dtoa_r+0xa76>
 800f0d6:	6879      	ldr	r1, [r7, #4]
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 fa0f 	bl	800f4fc <_Balloc>
 800f0de:	4605      	mov	r5, r0
 800f0e0:	b928      	cbnz	r0, 800f0ee <_dtoa_r+0x9d6>
 800f0e2:	4b83      	ldr	r3, [pc, #524]	; (800f2f0 <_dtoa_r+0xbd8>)
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f0ea:	f7ff bb2e 	b.w	800e74a <_dtoa_r+0x32>
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	3202      	adds	r2, #2
 800f0f2:	0092      	lsls	r2, r2, #2
 800f0f4:	f107 010c 	add.w	r1, r7, #12
 800f0f8:	300c      	adds	r0, #12
 800f0fa:	f002 f95f 	bl	80113bc <memcpy>
 800f0fe:	2201      	movs	r2, #1
 800f100:	4629      	mov	r1, r5
 800f102:	4620      	mov	r0, r4
 800f104:	f000 fc54 	bl	800f9b0 <__lshift>
 800f108:	9b00      	ldr	r3, [sp, #0]
 800f10a:	3301      	adds	r3, #1
 800f10c:	9304      	str	r3, [sp, #16]
 800f10e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f112:	4413      	add	r3, r2
 800f114:	9308      	str	r3, [sp, #32]
 800f116:	9b02      	ldr	r3, [sp, #8]
 800f118:	f003 0301 	and.w	r3, r3, #1
 800f11c:	46b8      	mov	r8, r7
 800f11e:	9306      	str	r3, [sp, #24]
 800f120:	4607      	mov	r7, r0
 800f122:	9b04      	ldr	r3, [sp, #16]
 800f124:	4631      	mov	r1, r6
 800f126:	3b01      	subs	r3, #1
 800f128:	4650      	mov	r0, sl
 800f12a:	9301      	str	r3, [sp, #4]
 800f12c:	f7ff fa6c 	bl	800e608 <quorem>
 800f130:	4641      	mov	r1, r8
 800f132:	9002      	str	r0, [sp, #8]
 800f134:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f138:	4650      	mov	r0, sl
 800f13a:	f000 fca5 	bl	800fa88 <__mcmp>
 800f13e:	463a      	mov	r2, r7
 800f140:	9005      	str	r0, [sp, #20]
 800f142:	4631      	mov	r1, r6
 800f144:	4620      	mov	r0, r4
 800f146:	f000 fcbb 	bl	800fac0 <__mdiff>
 800f14a:	68c2      	ldr	r2, [r0, #12]
 800f14c:	4605      	mov	r5, r0
 800f14e:	bb02      	cbnz	r2, 800f192 <_dtoa_r+0xa7a>
 800f150:	4601      	mov	r1, r0
 800f152:	4650      	mov	r0, sl
 800f154:	f000 fc98 	bl	800fa88 <__mcmp>
 800f158:	4602      	mov	r2, r0
 800f15a:	4629      	mov	r1, r5
 800f15c:	4620      	mov	r0, r4
 800f15e:	9209      	str	r2, [sp, #36]	; 0x24
 800f160:	f000 fa0c 	bl	800f57c <_Bfree>
 800f164:	9b07      	ldr	r3, [sp, #28]
 800f166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f168:	9d04      	ldr	r5, [sp, #16]
 800f16a:	ea43 0102 	orr.w	r1, r3, r2
 800f16e:	9b06      	ldr	r3, [sp, #24]
 800f170:	4319      	orrs	r1, r3
 800f172:	d110      	bne.n	800f196 <_dtoa_r+0xa7e>
 800f174:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f178:	d029      	beq.n	800f1ce <_dtoa_r+0xab6>
 800f17a:	9b05      	ldr	r3, [sp, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	dd02      	ble.n	800f186 <_dtoa_r+0xa6e>
 800f180:	9b02      	ldr	r3, [sp, #8]
 800f182:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f186:	9b01      	ldr	r3, [sp, #4]
 800f188:	f883 9000 	strb.w	r9, [r3]
 800f18c:	e774      	b.n	800f078 <_dtoa_r+0x960>
 800f18e:	4638      	mov	r0, r7
 800f190:	e7ba      	b.n	800f108 <_dtoa_r+0x9f0>
 800f192:	2201      	movs	r2, #1
 800f194:	e7e1      	b.n	800f15a <_dtoa_r+0xa42>
 800f196:	9b05      	ldr	r3, [sp, #20]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	db04      	blt.n	800f1a6 <_dtoa_r+0xa8e>
 800f19c:	9907      	ldr	r1, [sp, #28]
 800f19e:	430b      	orrs	r3, r1
 800f1a0:	9906      	ldr	r1, [sp, #24]
 800f1a2:	430b      	orrs	r3, r1
 800f1a4:	d120      	bne.n	800f1e8 <_dtoa_r+0xad0>
 800f1a6:	2a00      	cmp	r2, #0
 800f1a8:	dded      	ble.n	800f186 <_dtoa_r+0xa6e>
 800f1aa:	4651      	mov	r1, sl
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 fbfe 	bl	800f9b0 <__lshift>
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4682      	mov	sl, r0
 800f1b8:	f000 fc66 	bl	800fa88 <__mcmp>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	dc03      	bgt.n	800f1c8 <_dtoa_r+0xab0>
 800f1c0:	d1e1      	bne.n	800f186 <_dtoa_r+0xa6e>
 800f1c2:	f019 0f01 	tst.w	r9, #1
 800f1c6:	d0de      	beq.n	800f186 <_dtoa_r+0xa6e>
 800f1c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f1cc:	d1d8      	bne.n	800f180 <_dtoa_r+0xa68>
 800f1ce:	9a01      	ldr	r2, [sp, #4]
 800f1d0:	2339      	movs	r3, #57	; 0x39
 800f1d2:	7013      	strb	r3, [r2, #0]
 800f1d4:	462b      	mov	r3, r5
 800f1d6:	461d      	mov	r5, r3
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1de:	2a39      	cmp	r2, #57	; 0x39
 800f1e0:	d06c      	beq.n	800f2bc <_dtoa_r+0xba4>
 800f1e2:	3201      	adds	r2, #1
 800f1e4:	701a      	strb	r2, [r3, #0]
 800f1e6:	e747      	b.n	800f078 <_dtoa_r+0x960>
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	dd07      	ble.n	800f1fc <_dtoa_r+0xae4>
 800f1ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f1f0:	d0ed      	beq.n	800f1ce <_dtoa_r+0xab6>
 800f1f2:	9a01      	ldr	r2, [sp, #4]
 800f1f4:	f109 0301 	add.w	r3, r9, #1
 800f1f8:	7013      	strb	r3, [r2, #0]
 800f1fa:	e73d      	b.n	800f078 <_dtoa_r+0x960>
 800f1fc:	9b04      	ldr	r3, [sp, #16]
 800f1fe:	9a08      	ldr	r2, [sp, #32]
 800f200:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f204:	4293      	cmp	r3, r2
 800f206:	d043      	beq.n	800f290 <_dtoa_r+0xb78>
 800f208:	4651      	mov	r1, sl
 800f20a:	2300      	movs	r3, #0
 800f20c:	220a      	movs	r2, #10
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 f9d6 	bl	800f5c0 <__multadd>
 800f214:	45b8      	cmp	r8, r7
 800f216:	4682      	mov	sl, r0
 800f218:	f04f 0300 	mov.w	r3, #0
 800f21c:	f04f 020a 	mov.w	r2, #10
 800f220:	4641      	mov	r1, r8
 800f222:	4620      	mov	r0, r4
 800f224:	d107      	bne.n	800f236 <_dtoa_r+0xb1e>
 800f226:	f000 f9cb 	bl	800f5c0 <__multadd>
 800f22a:	4680      	mov	r8, r0
 800f22c:	4607      	mov	r7, r0
 800f22e:	9b04      	ldr	r3, [sp, #16]
 800f230:	3301      	adds	r3, #1
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	e775      	b.n	800f122 <_dtoa_r+0xa0a>
 800f236:	f000 f9c3 	bl	800f5c0 <__multadd>
 800f23a:	4639      	mov	r1, r7
 800f23c:	4680      	mov	r8, r0
 800f23e:	2300      	movs	r3, #0
 800f240:	220a      	movs	r2, #10
 800f242:	4620      	mov	r0, r4
 800f244:	f000 f9bc 	bl	800f5c0 <__multadd>
 800f248:	4607      	mov	r7, r0
 800f24a:	e7f0      	b.n	800f22e <_dtoa_r+0xb16>
 800f24c:	9b04      	ldr	r3, [sp, #16]
 800f24e:	9301      	str	r3, [sp, #4]
 800f250:	9d00      	ldr	r5, [sp, #0]
 800f252:	4631      	mov	r1, r6
 800f254:	4650      	mov	r0, sl
 800f256:	f7ff f9d7 	bl	800e608 <quorem>
 800f25a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f25e:	9b00      	ldr	r3, [sp, #0]
 800f260:	f805 9b01 	strb.w	r9, [r5], #1
 800f264:	1aea      	subs	r2, r5, r3
 800f266:	9b01      	ldr	r3, [sp, #4]
 800f268:	4293      	cmp	r3, r2
 800f26a:	dd07      	ble.n	800f27c <_dtoa_r+0xb64>
 800f26c:	4651      	mov	r1, sl
 800f26e:	2300      	movs	r3, #0
 800f270:	220a      	movs	r2, #10
 800f272:	4620      	mov	r0, r4
 800f274:	f000 f9a4 	bl	800f5c0 <__multadd>
 800f278:	4682      	mov	sl, r0
 800f27a:	e7ea      	b.n	800f252 <_dtoa_r+0xb3a>
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	bfc8      	it	gt
 800f282:	461d      	movgt	r5, r3
 800f284:	9b00      	ldr	r3, [sp, #0]
 800f286:	bfd8      	it	le
 800f288:	2501      	movle	r5, #1
 800f28a:	441d      	add	r5, r3
 800f28c:	f04f 0800 	mov.w	r8, #0
 800f290:	4651      	mov	r1, sl
 800f292:	2201      	movs	r2, #1
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fb8b 	bl	800f9b0 <__lshift>
 800f29a:	4631      	mov	r1, r6
 800f29c:	4682      	mov	sl, r0
 800f29e:	f000 fbf3 	bl	800fa88 <__mcmp>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	dc96      	bgt.n	800f1d4 <_dtoa_r+0xabc>
 800f2a6:	d102      	bne.n	800f2ae <_dtoa_r+0xb96>
 800f2a8:	f019 0f01 	tst.w	r9, #1
 800f2ac:	d192      	bne.n	800f1d4 <_dtoa_r+0xabc>
 800f2ae:	462b      	mov	r3, r5
 800f2b0:	461d      	mov	r5, r3
 800f2b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2b6:	2a30      	cmp	r2, #48	; 0x30
 800f2b8:	d0fa      	beq.n	800f2b0 <_dtoa_r+0xb98>
 800f2ba:	e6dd      	b.n	800f078 <_dtoa_r+0x960>
 800f2bc:	9a00      	ldr	r2, [sp, #0]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d189      	bne.n	800f1d6 <_dtoa_r+0xabe>
 800f2c2:	f10b 0b01 	add.w	fp, fp, #1
 800f2c6:	2331      	movs	r3, #49	; 0x31
 800f2c8:	e796      	b.n	800f1f8 <_dtoa_r+0xae0>
 800f2ca:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <_dtoa_r+0xbdc>)
 800f2cc:	f7ff ba99 	b.w	800e802 <_dtoa_r+0xea>
 800f2d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f47f aa6d 	bne.w	800e7b2 <_dtoa_r+0x9a>
 800f2d8:	4b07      	ldr	r3, [pc, #28]	; (800f2f8 <_dtoa_r+0xbe0>)
 800f2da:	f7ff ba92 	b.w	800e802 <_dtoa_r+0xea>
 800f2de:	9b01      	ldr	r3, [sp, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dcb5      	bgt.n	800f250 <_dtoa_r+0xb38>
 800f2e4:	9b07      	ldr	r3, [sp, #28]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	f73f aeb1 	bgt.w	800f04e <_dtoa_r+0x936>
 800f2ec:	e7b0      	b.n	800f250 <_dtoa_r+0xb38>
 800f2ee:	bf00      	nop
 800f2f0:	08012f5d 	.word	0x08012f5d
 800f2f4:	08012eb8 	.word	0x08012eb8
 800f2f8:	08012ee1 	.word	0x08012ee1

0800f2fc <_free_r>:
 800f2fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2fe:	2900      	cmp	r1, #0
 800f300:	d044      	beq.n	800f38c <_free_r+0x90>
 800f302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f306:	9001      	str	r0, [sp, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f1a1 0404 	sub.w	r4, r1, #4
 800f30e:	bfb8      	it	lt
 800f310:	18e4      	addlt	r4, r4, r3
 800f312:	f000 f8e7 	bl	800f4e4 <__malloc_lock>
 800f316:	4a1e      	ldr	r2, [pc, #120]	; (800f390 <_free_r+0x94>)
 800f318:	9801      	ldr	r0, [sp, #4]
 800f31a:	6813      	ldr	r3, [r2, #0]
 800f31c:	b933      	cbnz	r3, 800f32c <_free_r+0x30>
 800f31e:	6063      	str	r3, [r4, #4]
 800f320:	6014      	str	r4, [r2, #0]
 800f322:	b003      	add	sp, #12
 800f324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f328:	f000 b8e2 	b.w	800f4f0 <__malloc_unlock>
 800f32c:	42a3      	cmp	r3, r4
 800f32e:	d908      	bls.n	800f342 <_free_r+0x46>
 800f330:	6825      	ldr	r5, [r4, #0]
 800f332:	1961      	adds	r1, r4, r5
 800f334:	428b      	cmp	r3, r1
 800f336:	bf01      	itttt	eq
 800f338:	6819      	ldreq	r1, [r3, #0]
 800f33a:	685b      	ldreq	r3, [r3, #4]
 800f33c:	1949      	addeq	r1, r1, r5
 800f33e:	6021      	streq	r1, [r4, #0]
 800f340:	e7ed      	b.n	800f31e <_free_r+0x22>
 800f342:	461a      	mov	r2, r3
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	b10b      	cbz	r3, 800f34c <_free_r+0x50>
 800f348:	42a3      	cmp	r3, r4
 800f34a:	d9fa      	bls.n	800f342 <_free_r+0x46>
 800f34c:	6811      	ldr	r1, [r2, #0]
 800f34e:	1855      	adds	r5, r2, r1
 800f350:	42a5      	cmp	r5, r4
 800f352:	d10b      	bne.n	800f36c <_free_r+0x70>
 800f354:	6824      	ldr	r4, [r4, #0]
 800f356:	4421      	add	r1, r4
 800f358:	1854      	adds	r4, r2, r1
 800f35a:	42a3      	cmp	r3, r4
 800f35c:	6011      	str	r1, [r2, #0]
 800f35e:	d1e0      	bne.n	800f322 <_free_r+0x26>
 800f360:	681c      	ldr	r4, [r3, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	6053      	str	r3, [r2, #4]
 800f366:	440c      	add	r4, r1
 800f368:	6014      	str	r4, [r2, #0]
 800f36a:	e7da      	b.n	800f322 <_free_r+0x26>
 800f36c:	d902      	bls.n	800f374 <_free_r+0x78>
 800f36e:	230c      	movs	r3, #12
 800f370:	6003      	str	r3, [r0, #0]
 800f372:	e7d6      	b.n	800f322 <_free_r+0x26>
 800f374:	6825      	ldr	r5, [r4, #0]
 800f376:	1961      	adds	r1, r4, r5
 800f378:	428b      	cmp	r3, r1
 800f37a:	bf04      	itt	eq
 800f37c:	6819      	ldreq	r1, [r3, #0]
 800f37e:	685b      	ldreq	r3, [r3, #4]
 800f380:	6063      	str	r3, [r4, #4]
 800f382:	bf04      	itt	eq
 800f384:	1949      	addeq	r1, r1, r5
 800f386:	6021      	streq	r1, [r4, #0]
 800f388:	6054      	str	r4, [r2, #4]
 800f38a:	e7ca      	b.n	800f322 <_free_r+0x26>
 800f38c:	b003      	add	sp, #12
 800f38e:	bd30      	pop	{r4, r5, pc}
 800f390:	200009dc 	.word	0x200009dc

0800f394 <malloc>:
 800f394:	4b02      	ldr	r3, [pc, #8]	; (800f3a0 <malloc+0xc>)
 800f396:	4601      	mov	r1, r0
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	f000 b823 	b.w	800f3e4 <_malloc_r>
 800f39e:	bf00      	nop
 800f3a0:	20000200 	.word	0x20000200

0800f3a4 <sbrk_aligned>:
 800f3a4:	b570      	push	{r4, r5, r6, lr}
 800f3a6:	4e0e      	ldr	r6, [pc, #56]	; (800f3e0 <sbrk_aligned+0x3c>)
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	6831      	ldr	r1, [r6, #0]
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	b911      	cbnz	r1, 800f3b6 <sbrk_aligned+0x12>
 800f3b0:	f001 fff4 	bl	801139c <_sbrk_r>
 800f3b4:	6030      	str	r0, [r6, #0]
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f001 ffef 	bl	801139c <_sbrk_r>
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	d00a      	beq.n	800f3d8 <sbrk_aligned+0x34>
 800f3c2:	1cc4      	adds	r4, r0, #3
 800f3c4:	f024 0403 	bic.w	r4, r4, #3
 800f3c8:	42a0      	cmp	r0, r4
 800f3ca:	d007      	beq.n	800f3dc <sbrk_aligned+0x38>
 800f3cc:	1a21      	subs	r1, r4, r0
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f001 ffe4 	bl	801139c <_sbrk_r>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d101      	bne.n	800f3dc <sbrk_aligned+0x38>
 800f3d8:	f04f 34ff 	mov.w	r4, #4294967295
 800f3dc:	4620      	mov	r0, r4
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	200009e0 	.word	0x200009e0

0800f3e4 <_malloc_r>:
 800f3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	1ccd      	adds	r5, r1, #3
 800f3ea:	f025 0503 	bic.w	r5, r5, #3
 800f3ee:	3508      	adds	r5, #8
 800f3f0:	2d0c      	cmp	r5, #12
 800f3f2:	bf38      	it	cc
 800f3f4:	250c      	movcc	r5, #12
 800f3f6:	2d00      	cmp	r5, #0
 800f3f8:	4607      	mov	r7, r0
 800f3fa:	db01      	blt.n	800f400 <_malloc_r+0x1c>
 800f3fc:	42a9      	cmp	r1, r5
 800f3fe:	d905      	bls.n	800f40c <_malloc_r+0x28>
 800f400:	230c      	movs	r3, #12
 800f402:	603b      	str	r3, [r7, #0]
 800f404:	2600      	movs	r6, #0
 800f406:	4630      	mov	r0, r6
 800f408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f40c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f4e0 <_malloc_r+0xfc>
 800f410:	f000 f868 	bl	800f4e4 <__malloc_lock>
 800f414:	f8d8 3000 	ldr.w	r3, [r8]
 800f418:	461c      	mov	r4, r3
 800f41a:	bb5c      	cbnz	r4, 800f474 <_malloc_r+0x90>
 800f41c:	4629      	mov	r1, r5
 800f41e:	4638      	mov	r0, r7
 800f420:	f7ff ffc0 	bl	800f3a4 <sbrk_aligned>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	4604      	mov	r4, r0
 800f428:	d155      	bne.n	800f4d6 <_malloc_r+0xf2>
 800f42a:	f8d8 4000 	ldr.w	r4, [r8]
 800f42e:	4626      	mov	r6, r4
 800f430:	2e00      	cmp	r6, #0
 800f432:	d145      	bne.n	800f4c0 <_malloc_r+0xdc>
 800f434:	2c00      	cmp	r4, #0
 800f436:	d048      	beq.n	800f4ca <_malloc_r+0xe6>
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	4631      	mov	r1, r6
 800f43c:	4638      	mov	r0, r7
 800f43e:	eb04 0903 	add.w	r9, r4, r3
 800f442:	f001 ffab 	bl	801139c <_sbrk_r>
 800f446:	4581      	cmp	r9, r0
 800f448:	d13f      	bne.n	800f4ca <_malloc_r+0xe6>
 800f44a:	6821      	ldr	r1, [r4, #0]
 800f44c:	1a6d      	subs	r5, r5, r1
 800f44e:	4629      	mov	r1, r5
 800f450:	4638      	mov	r0, r7
 800f452:	f7ff ffa7 	bl	800f3a4 <sbrk_aligned>
 800f456:	3001      	adds	r0, #1
 800f458:	d037      	beq.n	800f4ca <_malloc_r+0xe6>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	442b      	add	r3, r5
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	f8d8 3000 	ldr.w	r3, [r8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d038      	beq.n	800f4da <_malloc_r+0xf6>
 800f468:	685a      	ldr	r2, [r3, #4]
 800f46a:	42a2      	cmp	r2, r4
 800f46c:	d12b      	bne.n	800f4c6 <_malloc_r+0xe2>
 800f46e:	2200      	movs	r2, #0
 800f470:	605a      	str	r2, [r3, #4]
 800f472:	e00f      	b.n	800f494 <_malloc_r+0xb0>
 800f474:	6822      	ldr	r2, [r4, #0]
 800f476:	1b52      	subs	r2, r2, r5
 800f478:	d41f      	bmi.n	800f4ba <_malloc_r+0xd6>
 800f47a:	2a0b      	cmp	r2, #11
 800f47c:	d917      	bls.n	800f4ae <_malloc_r+0xca>
 800f47e:	1961      	adds	r1, r4, r5
 800f480:	42a3      	cmp	r3, r4
 800f482:	6025      	str	r5, [r4, #0]
 800f484:	bf18      	it	ne
 800f486:	6059      	strne	r1, [r3, #4]
 800f488:	6863      	ldr	r3, [r4, #4]
 800f48a:	bf08      	it	eq
 800f48c:	f8c8 1000 	streq.w	r1, [r8]
 800f490:	5162      	str	r2, [r4, r5]
 800f492:	604b      	str	r3, [r1, #4]
 800f494:	4638      	mov	r0, r7
 800f496:	f104 060b 	add.w	r6, r4, #11
 800f49a:	f000 f829 	bl	800f4f0 <__malloc_unlock>
 800f49e:	f026 0607 	bic.w	r6, r6, #7
 800f4a2:	1d23      	adds	r3, r4, #4
 800f4a4:	1af2      	subs	r2, r6, r3
 800f4a6:	d0ae      	beq.n	800f406 <_malloc_r+0x22>
 800f4a8:	1b9b      	subs	r3, r3, r6
 800f4aa:	50a3      	str	r3, [r4, r2]
 800f4ac:	e7ab      	b.n	800f406 <_malloc_r+0x22>
 800f4ae:	42a3      	cmp	r3, r4
 800f4b0:	6862      	ldr	r2, [r4, #4]
 800f4b2:	d1dd      	bne.n	800f470 <_malloc_r+0x8c>
 800f4b4:	f8c8 2000 	str.w	r2, [r8]
 800f4b8:	e7ec      	b.n	800f494 <_malloc_r+0xb0>
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	6864      	ldr	r4, [r4, #4]
 800f4be:	e7ac      	b.n	800f41a <_malloc_r+0x36>
 800f4c0:	4634      	mov	r4, r6
 800f4c2:	6876      	ldr	r6, [r6, #4]
 800f4c4:	e7b4      	b.n	800f430 <_malloc_r+0x4c>
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	e7cc      	b.n	800f464 <_malloc_r+0x80>
 800f4ca:	230c      	movs	r3, #12
 800f4cc:	603b      	str	r3, [r7, #0]
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	f000 f80e 	bl	800f4f0 <__malloc_unlock>
 800f4d4:	e797      	b.n	800f406 <_malloc_r+0x22>
 800f4d6:	6025      	str	r5, [r4, #0]
 800f4d8:	e7dc      	b.n	800f494 <_malloc_r+0xb0>
 800f4da:	605b      	str	r3, [r3, #4]
 800f4dc:	deff      	udf	#255	; 0xff
 800f4de:	bf00      	nop
 800f4e0:	200009dc 	.word	0x200009dc

0800f4e4 <__malloc_lock>:
 800f4e4:	4801      	ldr	r0, [pc, #4]	; (800f4ec <__malloc_lock+0x8>)
 800f4e6:	f7ff b886 	b.w	800e5f6 <__retarget_lock_acquire_recursive>
 800f4ea:	bf00      	nop
 800f4ec:	200009d8 	.word	0x200009d8

0800f4f0 <__malloc_unlock>:
 800f4f0:	4801      	ldr	r0, [pc, #4]	; (800f4f8 <__malloc_unlock+0x8>)
 800f4f2:	f7ff b881 	b.w	800e5f8 <__retarget_lock_release_recursive>
 800f4f6:	bf00      	nop
 800f4f8:	200009d8 	.word	0x200009d8

0800f4fc <_Balloc>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	69c6      	ldr	r6, [r0, #28]
 800f500:	4604      	mov	r4, r0
 800f502:	460d      	mov	r5, r1
 800f504:	b976      	cbnz	r6, 800f524 <_Balloc+0x28>
 800f506:	2010      	movs	r0, #16
 800f508:	f7ff ff44 	bl	800f394 <malloc>
 800f50c:	4602      	mov	r2, r0
 800f50e:	61e0      	str	r0, [r4, #28]
 800f510:	b920      	cbnz	r0, 800f51c <_Balloc+0x20>
 800f512:	4b18      	ldr	r3, [pc, #96]	; (800f574 <_Balloc+0x78>)
 800f514:	4818      	ldr	r0, [pc, #96]	; (800f578 <_Balloc+0x7c>)
 800f516:	216b      	movs	r1, #107	; 0x6b
 800f518:	f001 ff66 	bl	80113e8 <__assert_func>
 800f51c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f520:	6006      	str	r6, [r0, #0]
 800f522:	60c6      	str	r6, [r0, #12]
 800f524:	69e6      	ldr	r6, [r4, #28]
 800f526:	68f3      	ldr	r3, [r6, #12]
 800f528:	b183      	cbz	r3, 800f54c <_Balloc+0x50>
 800f52a:	69e3      	ldr	r3, [r4, #28]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f532:	b9b8      	cbnz	r0, 800f564 <_Balloc+0x68>
 800f534:	2101      	movs	r1, #1
 800f536:	fa01 f605 	lsl.w	r6, r1, r5
 800f53a:	1d72      	adds	r2, r6, #5
 800f53c:	0092      	lsls	r2, r2, #2
 800f53e:	4620      	mov	r0, r4
 800f540:	f001 ff70 	bl	8011424 <_calloc_r>
 800f544:	b160      	cbz	r0, 800f560 <_Balloc+0x64>
 800f546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f54a:	e00e      	b.n	800f56a <_Balloc+0x6e>
 800f54c:	2221      	movs	r2, #33	; 0x21
 800f54e:	2104      	movs	r1, #4
 800f550:	4620      	mov	r0, r4
 800f552:	f001 ff67 	bl	8011424 <_calloc_r>
 800f556:	69e3      	ldr	r3, [r4, #28]
 800f558:	60f0      	str	r0, [r6, #12]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e4      	bne.n	800f52a <_Balloc+0x2e>
 800f560:	2000      	movs	r0, #0
 800f562:	bd70      	pop	{r4, r5, r6, pc}
 800f564:	6802      	ldr	r2, [r0, #0]
 800f566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f56a:	2300      	movs	r3, #0
 800f56c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f570:	e7f7      	b.n	800f562 <_Balloc+0x66>
 800f572:	bf00      	nop
 800f574:	08012eee 	.word	0x08012eee
 800f578:	08012f6e 	.word	0x08012f6e

0800f57c <_Bfree>:
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	69c6      	ldr	r6, [r0, #28]
 800f580:	4605      	mov	r5, r0
 800f582:	460c      	mov	r4, r1
 800f584:	b976      	cbnz	r6, 800f5a4 <_Bfree+0x28>
 800f586:	2010      	movs	r0, #16
 800f588:	f7ff ff04 	bl	800f394 <malloc>
 800f58c:	4602      	mov	r2, r0
 800f58e:	61e8      	str	r0, [r5, #28]
 800f590:	b920      	cbnz	r0, 800f59c <_Bfree+0x20>
 800f592:	4b09      	ldr	r3, [pc, #36]	; (800f5b8 <_Bfree+0x3c>)
 800f594:	4809      	ldr	r0, [pc, #36]	; (800f5bc <_Bfree+0x40>)
 800f596:	218f      	movs	r1, #143	; 0x8f
 800f598:	f001 ff26 	bl	80113e8 <__assert_func>
 800f59c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5a0:	6006      	str	r6, [r0, #0]
 800f5a2:	60c6      	str	r6, [r0, #12]
 800f5a4:	b13c      	cbz	r4, 800f5b6 <_Bfree+0x3a>
 800f5a6:	69eb      	ldr	r3, [r5, #28]
 800f5a8:	6862      	ldr	r2, [r4, #4]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5b0:	6021      	str	r1, [r4, #0]
 800f5b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5b6:	bd70      	pop	{r4, r5, r6, pc}
 800f5b8:	08012eee 	.word	0x08012eee
 800f5bc:	08012f6e 	.word	0x08012f6e

0800f5c0 <__multadd>:
 800f5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c4:	690d      	ldr	r5, [r1, #16]
 800f5c6:	4607      	mov	r7, r0
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	461e      	mov	r6, r3
 800f5cc:	f101 0c14 	add.w	ip, r1, #20
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f5d6:	b299      	uxth	r1, r3
 800f5d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f5dc:	0c1e      	lsrs	r6, r3, #16
 800f5de:	0c0b      	lsrs	r3, r1, #16
 800f5e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f5e4:	b289      	uxth	r1, r1
 800f5e6:	3001      	adds	r0, #1
 800f5e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5ec:	4285      	cmp	r5, r0
 800f5ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f5f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5f6:	dcec      	bgt.n	800f5d2 <__multadd+0x12>
 800f5f8:	b30e      	cbz	r6, 800f63e <__multadd+0x7e>
 800f5fa:	68a3      	ldr	r3, [r4, #8]
 800f5fc:	42ab      	cmp	r3, r5
 800f5fe:	dc19      	bgt.n	800f634 <__multadd+0x74>
 800f600:	6861      	ldr	r1, [r4, #4]
 800f602:	4638      	mov	r0, r7
 800f604:	3101      	adds	r1, #1
 800f606:	f7ff ff79 	bl	800f4fc <_Balloc>
 800f60a:	4680      	mov	r8, r0
 800f60c:	b928      	cbnz	r0, 800f61a <__multadd+0x5a>
 800f60e:	4602      	mov	r2, r0
 800f610:	4b0c      	ldr	r3, [pc, #48]	; (800f644 <__multadd+0x84>)
 800f612:	480d      	ldr	r0, [pc, #52]	; (800f648 <__multadd+0x88>)
 800f614:	21ba      	movs	r1, #186	; 0xba
 800f616:	f001 fee7 	bl	80113e8 <__assert_func>
 800f61a:	6922      	ldr	r2, [r4, #16]
 800f61c:	3202      	adds	r2, #2
 800f61e:	f104 010c 	add.w	r1, r4, #12
 800f622:	0092      	lsls	r2, r2, #2
 800f624:	300c      	adds	r0, #12
 800f626:	f001 fec9 	bl	80113bc <memcpy>
 800f62a:	4621      	mov	r1, r4
 800f62c:	4638      	mov	r0, r7
 800f62e:	f7ff ffa5 	bl	800f57c <_Bfree>
 800f632:	4644      	mov	r4, r8
 800f634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f638:	3501      	adds	r5, #1
 800f63a:	615e      	str	r6, [r3, #20]
 800f63c:	6125      	str	r5, [r4, #16]
 800f63e:	4620      	mov	r0, r4
 800f640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f644:	08012f5d 	.word	0x08012f5d
 800f648:	08012f6e 	.word	0x08012f6e

0800f64c <__s2b>:
 800f64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f650:	460c      	mov	r4, r1
 800f652:	4615      	mov	r5, r2
 800f654:	461f      	mov	r7, r3
 800f656:	2209      	movs	r2, #9
 800f658:	3308      	adds	r3, #8
 800f65a:	4606      	mov	r6, r0
 800f65c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f660:	2100      	movs	r1, #0
 800f662:	2201      	movs	r2, #1
 800f664:	429a      	cmp	r2, r3
 800f666:	db09      	blt.n	800f67c <__s2b+0x30>
 800f668:	4630      	mov	r0, r6
 800f66a:	f7ff ff47 	bl	800f4fc <_Balloc>
 800f66e:	b940      	cbnz	r0, 800f682 <__s2b+0x36>
 800f670:	4602      	mov	r2, r0
 800f672:	4b19      	ldr	r3, [pc, #100]	; (800f6d8 <__s2b+0x8c>)
 800f674:	4819      	ldr	r0, [pc, #100]	; (800f6dc <__s2b+0x90>)
 800f676:	21d3      	movs	r1, #211	; 0xd3
 800f678:	f001 feb6 	bl	80113e8 <__assert_func>
 800f67c:	0052      	lsls	r2, r2, #1
 800f67e:	3101      	adds	r1, #1
 800f680:	e7f0      	b.n	800f664 <__s2b+0x18>
 800f682:	9b08      	ldr	r3, [sp, #32]
 800f684:	6143      	str	r3, [r0, #20]
 800f686:	2d09      	cmp	r5, #9
 800f688:	f04f 0301 	mov.w	r3, #1
 800f68c:	6103      	str	r3, [r0, #16]
 800f68e:	dd16      	ble.n	800f6be <__s2b+0x72>
 800f690:	f104 0909 	add.w	r9, r4, #9
 800f694:	46c8      	mov	r8, r9
 800f696:	442c      	add	r4, r5
 800f698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f69c:	4601      	mov	r1, r0
 800f69e:	3b30      	subs	r3, #48	; 0x30
 800f6a0:	220a      	movs	r2, #10
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f7ff ff8c 	bl	800f5c0 <__multadd>
 800f6a8:	45a0      	cmp	r8, r4
 800f6aa:	d1f5      	bne.n	800f698 <__s2b+0x4c>
 800f6ac:	f1a5 0408 	sub.w	r4, r5, #8
 800f6b0:	444c      	add	r4, r9
 800f6b2:	1b2d      	subs	r5, r5, r4
 800f6b4:	1963      	adds	r3, r4, r5
 800f6b6:	42bb      	cmp	r3, r7
 800f6b8:	db04      	blt.n	800f6c4 <__s2b+0x78>
 800f6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6be:	340a      	adds	r4, #10
 800f6c0:	2509      	movs	r5, #9
 800f6c2:	e7f6      	b.n	800f6b2 <__s2b+0x66>
 800f6c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6c8:	4601      	mov	r1, r0
 800f6ca:	3b30      	subs	r3, #48	; 0x30
 800f6cc:	220a      	movs	r2, #10
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	f7ff ff76 	bl	800f5c0 <__multadd>
 800f6d4:	e7ee      	b.n	800f6b4 <__s2b+0x68>
 800f6d6:	bf00      	nop
 800f6d8:	08012f5d 	.word	0x08012f5d
 800f6dc:	08012f6e 	.word	0x08012f6e

0800f6e0 <__hi0bits>:
 800f6e0:	0c03      	lsrs	r3, r0, #16
 800f6e2:	041b      	lsls	r3, r3, #16
 800f6e4:	b9d3      	cbnz	r3, 800f71c <__hi0bits+0x3c>
 800f6e6:	0400      	lsls	r0, r0, #16
 800f6e8:	2310      	movs	r3, #16
 800f6ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6ee:	bf04      	itt	eq
 800f6f0:	0200      	lsleq	r0, r0, #8
 800f6f2:	3308      	addeq	r3, #8
 800f6f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6f8:	bf04      	itt	eq
 800f6fa:	0100      	lsleq	r0, r0, #4
 800f6fc:	3304      	addeq	r3, #4
 800f6fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f702:	bf04      	itt	eq
 800f704:	0080      	lsleq	r0, r0, #2
 800f706:	3302      	addeq	r3, #2
 800f708:	2800      	cmp	r0, #0
 800f70a:	db05      	blt.n	800f718 <__hi0bits+0x38>
 800f70c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f710:	f103 0301 	add.w	r3, r3, #1
 800f714:	bf08      	it	eq
 800f716:	2320      	moveq	r3, #32
 800f718:	4618      	mov	r0, r3
 800f71a:	4770      	bx	lr
 800f71c:	2300      	movs	r3, #0
 800f71e:	e7e4      	b.n	800f6ea <__hi0bits+0xa>

0800f720 <__lo0bits>:
 800f720:	6803      	ldr	r3, [r0, #0]
 800f722:	f013 0207 	ands.w	r2, r3, #7
 800f726:	d00c      	beq.n	800f742 <__lo0bits+0x22>
 800f728:	07d9      	lsls	r1, r3, #31
 800f72a:	d422      	bmi.n	800f772 <__lo0bits+0x52>
 800f72c:	079a      	lsls	r2, r3, #30
 800f72e:	bf49      	itett	mi
 800f730:	085b      	lsrmi	r3, r3, #1
 800f732:	089b      	lsrpl	r3, r3, #2
 800f734:	6003      	strmi	r3, [r0, #0]
 800f736:	2201      	movmi	r2, #1
 800f738:	bf5c      	itt	pl
 800f73a:	6003      	strpl	r3, [r0, #0]
 800f73c:	2202      	movpl	r2, #2
 800f73e:	4610      	mov	r0, r2
 800f740:	4770      	bx	lr
 800f742:	b299      	uxth	r1, r3
 800f744:	b909      	cbnz	r1, 800f74a <__lo0bits+0x2a>
 800f746:	0c1b      	lsrs	r3, r3, #16
 800f748:	2210      	movs	r2, #16
 800f74a:	b2d9      	uxtb	r1, r3
 800f74c:	b909      	cbnz	r1, 800f752 <__lo0bits+0x32>
 800f74e:	3208      	adds	r2, #8
 800f750:	0a1b      	lsrs	r3, r3, #8
 800f752:	0719      	lsls	r1, r3, #28
 800f754:	bf04      	itt	eq
 800f756:	091b      	lsreq	r3, r3, #4
 800f758:	3204      	addeq	r2, #4
 800f75a:	0799      	lsls	r1, r3, #30
 800f75c:	bf04      	itt	eq
 800f75e:	089b      	lsreq	r3, r3, #2
 800f760:	3202      	addeq	r2, #2
 800f762:	07d9      	lsls	r1, r3, #31
 800f764:	d403      	bmi.n	800f76e <__lo0bits+0x4e>
 800f766:	085b      	lsrs	r3, r3, #1
 800f768:	f102 0201 	add.w	r2, r2, #1
 800f76c:	d003      	beq.n	800f776 <__lo0bits+0x56>
 800f76e:	6003      	str	r3, [r0, #0]
 800f770:	e7e5      	b.n	800f73e <__lo0bits+0x1e>
 800f772:	2200      	movs	r2, #0
 800f774:	e7e3      	b.n	800f73e <__lo0bits+0x1e>
 800f776:	2220      	movs	r2, #32
 800f778:	e7e1      	b.n	800f73e <__lo0bits+0x1e>
	...

0800f77c <__i2b>:
 800f77c:	b510      	push	{r4, lr}
 800f77e:	460c      	mov	r4, r1
 800f780:	2101      	movs	r1, #1
 800f782:	f7ff febb 	bl	800f4fc <_Balloc>
 800f786:	4602      	mov	r2, r0
 800f788:	b928      	cbnz	r0, 800f796 <__i2b+0x1a>
 800f78a:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <__i2b+0x24>)
 800f78c:	4805      	ldr	r0, [pc, #20]	; (800f7a4 <__i2b+0x28>)
 800f78e:	f240 1145 	movw	r1, #325	; 0x145
 800f792:	f001 fe29 	bl	80113e8 <__assert_func>
 800f796:	2301      	movs	r3, #1
 800f798:	6144      	str	r4, [r0, #20]
 800f79a:	6103      	str	r3, [r0, #16]
 800f79c:	bd10      	pop	{r4, pc}
 800f79e:	bf00      	nop
 800f7a0:	08012f5d 	.word	0x08012f5d
 800f7a4:	08012f6e 	.word	0x08012f6e

0800f7a8 <__multiply>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	4691      	mov	r9, r2
 800f7ae:	690a      	ldr	r2, [r1, #16]
 800f7b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	bfb8      	it	lt
 800f7b8:	460b      	movlt	r3, r1
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	bfbc      	itt	lt
 800f7be:	464c      	movlt	r4, r9
 800f7c0:	4699      	movlt	r9, r3
 800f7c2:	6927      	ldr	r7, [r4, #16]
 800f7c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	6861      	ldr	r1, [r4, #4]
 800f7cc:	eb07 060a 	add.w	r6, r7, sl
 800f7d0:	42b3      	cmp	r3, r6
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	bfb8      	it	lt
 800f7d6:	3101      	addlt	r1, #1
 800f7d8:	f7ff fe90 	bl	800f4fc <_Balloc>
 800f7dc:	b930      	cbnz	r0, 800f7ec <__multiply+0x44>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	4b44      	ldr	r3, [pc, #272]	; (800f8f4 <__multiply+0x14c>)
 800f7e2:	4845      	ldr	r0, [pc, #276]	; (800f8f8 <__multiply+0x150>)
 800f7e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f7e8:	f001 fdfe 	bl	80113e8 <__assert_func>
 800f7ec:	f100 0514 	add.w	r5, r0, #20
 800f7f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	4543      	cmp	r3, r8
 800f7fa:	d321      	bcc.n	800f840 <__multiply+0x98>
 800f7fc:	f104 0314 	add.w	r3, r4, #20
 800f800:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f804:	f109 0314 	add.w	r3, r9, #20
 800f808:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f80c:	9202      	str	r2, [sp, #8]
 800f80e:	1b3a      	subs	r2, r7, r4
 800f810:	3a15      	subs	r2, #21
 800f812:	f022 0203 	bic.w	r2, r2, #3
 800f816:	3204      	adds	r2, #4
 800f818:	f104 0115 	add.w	r1, r4, #21
 800f81c:	428f      	cmp	r7, r1
 800f81e:	bf38      	it	cc
 800f820:	2204      	movcc	r2, #4
 800f822:	9201      	str	r2, [sp, #4]
 800f824:	9a02      	ldr	r2, [sp, #8]
 800f826:	9303      	str	r3, [sp, #12]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d80c      	bhi.n	800f846 <__multiply+0x9e>
 800f82c:	2e00      	cmp	r6, #0
 800f82e:	dd03      	ble.n	800f838 <__multiply+0x90>
 800f830:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f834:	2b00      	cmp	r3, #0
 800f836:	d05b      	beq.n	800f8f0 <__multiply+0x148>
 800f838:	6106      	str	r6, [r0, #16]
 800f83a:	b005      	add	sp, #20
 800f83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f840:	f843 2b04 	str.w	r2, [r3], #4
 800f844:	e7d8      	b.n	800f7f8 <__multiply+0x50>
 800f846:	f8b3 a000 	ldrh.w	sl, [r3]
 800f84a:	f1ba 0f00 	cmp.w	sl, #0
 800f84e:	d024      	beq.n	800f89a <__multiply+0xf2>
 800f850:	f104 0e14 	add.w	lr, r4, #20
 800f854:	46a9      	mov	r9, r5
 800f856:	f04f 0c00 	mov.w	ip, #0
 800f85a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f85e:	f8d9 1000 	ldr.w	r1, [r9]
 800f862:	fa1f fb82 	uxth.w	fp, r2
 800f866:	b289      	uxth	r1, r1
 800f868:	fb0a 110b 	mla	r1, sl, fp, r1
 800f86c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f870:	f8d9 2000 	ldr.w	r2, [r9]
 800f874:	4461      	add	r1, ip
 800f876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f87a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f87e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f882:	b289      	uxth	r1, r1
 800f884:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f888:	4577      	cmp	r7, lr
 800f88a:	f849 1b04 	str.w	r1, [r9], #4
 800f88e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f892:	d8e2      	bhi.n	800f85a <__multiply+0xb2>
 800f894:	9a01      	ldr	r2, [sp, #4]
 800f896:	f845 c002 	str.w	ip, [r5, r2]
 800f89a:	9a03      	ldr	r2, [sp, #12]
 800f89c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	f1b9 0f00 	cmp.w	r9, #0
 800f8a6:	d021      	beq.n	800f8ec <__multiply+0x144>
 800f8a8:	6829      	ldr	r1, [r5, #0]
 800f8aa:	f104 0c14 	add.w	ip, r4, #20
 800f8ae:	46ae      	mov	lr, r5
 800f8b0:	f04f 0a00 	mov.w	sl, #0
 800f8b4:	f8bc b000 	ldrh.w	fp, [ip]
 800f8b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8bc:	fb09 220b 	mla	r2, r9, fp, r2
 800f8c0:	4452      	add	r2, sl
 800f8c2:	b289      	uxth	r1, r1
 800f8c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8c8:	f84e 1b04 	str.w	r1, [lr], #4
 800f8cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f8d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8d4:	f8be 1000 	ldrh.w	r1, [lr]
 800f8d8:	fb09 110a 	mla	r1, r9, sl, r1
 800f8dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f8e0:	4567      	cmp	r7, ip
 800f8e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8e6:	d8e5      	bhi.n	800f8b4 <__multiply+0x10c>
 800f8e8:	9a01      	ldr	r2, [sp, #4]
 800f8ea:	50a9      	str	r1, [r5, r2]
 800f8ec:	3504      	adds	r5, #4
 800f8ee:	e799      	b.n	800f824 <__multiply+0x7c>
 800f8f0:	3e01      	subs	r6, #1
 800f8f2:	e79b      	b.n	800f82c <__multiply+0x84>
 800f8f4:	08012f5d 	.word	0x08012f5d
 800f8f8:	08012f6e 	.word	0x08012f6e

0800f8fc <__pow5mult>:
 800f8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f900:	4615      	mov	r5, r2
 800f902:	f012 0203 	ands.w	r2, r2, #3
 800f906:	4606      	mov	r6, r0
 800f908:	460f      	mov	r7, r1
 800f90a:	d007      	beq.n	800f91c <__pow5mult+0x20>
 800f90c:	4c25      	ldr	r4, [pc, #148]	; (800f9a4 <__pow5mult+0xa8>)
 800f90e:	3a01      	subs	r2, #1
 800f910:	2300      	movs	r3, #0
 800f912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f916:	f7ff fe53 	bl	800f5c0 <__multadd>
 800f91a:	4607      	mov	r7, r0
 800f91c:	10ad      	asrs	r5, r5, #2
 800f91e:	d03d      	beq.n	800f99c <__pow5mult+0xa0>
 800f920:	69f4      	ldr	r4, [r6, #28]
 800f922:	b97c      	cbnz	r4, 800f944 <__pow5mult+0x48>
 800f924:	2010      	movs	r0, #16
 800f926:	f7ff fd35 	bl	800f394 <malloc>
 800f92a:	4602      	mov	r2, r0
 800f92c:	61f0      	str	r0, [r6, #28]
 800f92e:	b928      	cbnz	r0, 800f93c <__pow5mult+0x40>
 800f930:	4b1d      	ldr	r3, [pc, #116]	; (800f9a8 <__pow5mult+0xac>)
 800f932:	481e      	ldr	r0, [pc, #120]	; (800f9ac <__pow5mult+0xb0>)
 800f934:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f938:	f001 fd56 	bl	80113e8 <__assert_func>
 800f93c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f940:	6004      	str	r4, [r0, #0]
 800f942:	60c4      	str	r4, [r0, #12]
 800f944:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f94c:	b94c      	cbnz	r4, 800f962 <__pow5mult+0x66>
 800f94e:	f240 2171 	movw	r1, #625	; 0x271
 800f952:	4630      	mov	r0, r6
 800f954:	f7ff ff12 	bl	800f77c <__i2b>
 800f958:	2300      	movs	r3, #0
 800f95a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f95e:	4604      	mov	r4, r0
 800f960:	6003      	str	r3, [r0, #0]
 800f962:	f04f 0900 	mov.w	r9, #0
 800f966:	07eb      	lsls	r3, r5, #31
 800f968:	d50a      	bpl.n	800f980 <__pow5mult+0x84>
 800f96a:	4639      	mov	r1, r7
 800f96c:	4622      	mov	r2, r4
 800f96e:	4630      	mov	r0, r6
 800f970:	f7ff ff1a 	bl	800f7a8 <__multiply>
 800f974:	4639      	mov	r1, r7
 800f976:	4680      	mov	r8, r0
 800f978:	4630      	mov	r0, r6
 800f97a:	f7ff fdff 	bl	800f57c <_Bfree>
 800f97e:	4647      	mov	r7, r8
 800f980:	106d      	asrs	r5, r5, #1
 800f982:	d00b      	beq.n	800f99c <__pow5mult+0xa0>
 800f984:	6820      	ldr	r0, [r4, #0]
 800f986:	b938      	cbnz	r0, 800f998 <__pow5mult+0x9c>
 800f988:	4622      	mov	r2, r4
 800f98a:	4621      	mov	r1, r4
 800f98c:	4630      	mov	r0, r6
 800f98e:	f7ff ff0b 	bl	800f7a8 <__multiply>
 800f992:	6020      	str	r0, [r4, #0]
 800f994:	f8c0 9000 	str.w	r9, [r0]
 800f998:	4604      	mov	r4, r0
 800f99a:	e7e4      	b.n	800f966 <__pow5mult+0x6a>
 800f99c:	4638      	mov	r0, r7
 800f99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9a2:	bf00      	nop
 800f9a4:	080130b8 	.word	0x080130b8
 800f9a8:	08012eee 	.word	0x08012eee
 800f9ac:	08012f6e 	.word	0x08012f6e

0800f9b0 <__lshift>:
 800f9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	6849      	ldr	r1, [r1, #4]
 800f9b8:	6923      	ldr	r3, [r4, #16]
 800f9ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9be:	68a3      	ldr	r3, [r4, #8]
 800f9c0:	4607      	mov	r7, r0
 800f9c2:	4691      	mov	r9, r2
 800f9c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9c8:	f108 0601 	add.w	r6, r8, #1
 800f9cc:	42b3      	cmp	r3, r6
 800f9ce:	db0b      	blt.n	800f9e8 <__lshift+0x38>
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f7ff fd93 	bl	800f4fc <_Balloc>
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	b948      	cbnz	r0, 800f9ee <__lshift+0x3e>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	4b28      	ldr	r3, [pc, #160]	; (800fa80 <__lshift+0xd0>)
 800f9de:	4829      	ldr	r0, [pc, #164]	; (800fa84 <__lshift+0xd4>)
 800f9e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f9e4:	f001 fd00 	bl	80113e8 <__assert_func>
 800f9e8:	3101      	adds	r1, #1
 800f9ea:	005b      	lsls	r3, r3, #1
 800f9ec:	e7ee      	b.n	800f9cc <__lshift+0x1c>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	f100 0114 	add.w	r1, r0, #20
 800f9f4:	f100 0210 	add.w	r2, r0, #16
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	4553      	cmp	r3, sl
 800f9fc:	db33      	blt.n	800fa66 <__lshift+0xb6>
 800f9fe:	6920      	ldr	r0, [r4, #16]
 800fa00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa04:	f104 0314 	add.w	r3, r4, #20
 800fa08:	f019 091f 	ands.w	r9, r9, #31
 800fa0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa14:	d02b      	beq.n	800fa6e <__lshift+0xbe>
 800fa16:	f1c9 0e20 	rsb	lr, r9, #32
 800fa1a:	468a      	mov	sl, r1
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	6818      	ldr	r0, [r3, #0]
 800fa20:	fa00 f009 	lsl.w	r0, r0, r9
 800fa24:	4310      	orrs	r0, r2
 800fa26:	f84a 0b04 	str.w	r0, [sl], #4
 800fa2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa2e:	459c      	cmp	ip, r3
 800fa30:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa34:	d8f3      	bhi.n	800fa1e <__lshift+0x6e>
 800fa36:	ebac 0304 	sub.w	r3, ip, r4
 800fa3a:	3b15      	subs	r3, #21
 800fa3c:	f023 0303 	bic.w	r3, r3, #3
 800fa40:	3304      	adds	r3, #4
 800fa42:	f104 0015 	add.w	r0, r4, #21
 800fa46:	4584      	cmp	ip, r0
 800fa48:	bf38      	it	cc
 800fa4a:	2304      	movcc	r3, #4
 800fa4c:	50ca      	str	r2, [r1, r3]
 800fa4e:	b10a      	cbz	r2, 800fa54 <__lshift+0xa4>
 800fa50:	f108 0602 	add.w	r6, r8, #2
 800fa54:	3e01      	subs	r6, #1
 800fa56:	4638      	mov	r0, r7
 800fa58:	612e      	str	r6, [r5, #16]
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	f7ff fd8e 	bl	800f57c <_Bfree>
 800fa60:	4628      	mov	r0, r5
 800fa62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa66:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	e7c5      	b.n	800f9fa <__lshift+0x4a>
 800fa6e:	3904      	subs	r1, #4
 800fa70:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa74:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa78:	459c      	cmp	ip, r3
 800fa7a:	d8f9      	bhi.n	800fa70 <__lshift+0xc0>
 800fa7c:	e7ea      	b.n	800fa54 <__lshift+0xa4>
 800fa7e:	bf00      	nop
 800fa80:	08012f5d 	.word	0x08012f5d
 800fa84:	08012f6e 	.word	0x08012f6e

0800fa88 <__mcmp>:
 800fa88:	b530      	push	{r4, r5, lr}
 800fa8a:	6902      	ldr	r2, [r0, #16]
 800fa8c:	690c      	ldr	r4, [r1, #16]
 800fa8e:	1b12      	subs	r2, r2, r4
 800fa90:	d10e      	bne.n	800fab0 <__mcmp+0x28>
 800fa92:	f100 0314 	add.w	r3, r0, #20
 800fa96:	3114      	adds	r1, #20
 800fa98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800faa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800faa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800faa8:	42a5      	cmp	r5, r4
 800faaa:	d003      	beq.n	800fab4 <__mcmp+0x2c>
 800faac:	d305      	bcc.n	800faba <__mcmp+0x32>
 800faae:	2201      	movs	r2, #1
 800fab0:	4610      	mov	r0, r2
 800fab2:	bd30      	pop	{r4, r5, pc}
 800fab4:	4283      	cmp	r3, r0
 800fab6:	d3f3      	bcc.n	800faa0 <__mcmp+0x18>
 800fab8:	e7fa      	b.n	800fab0 <__mcmp+0x28>
 800faba:	f04f 32ff 	mov.w	r2, #4294967295
 800fabe:	e7f7      	b.n	800fab0 <__mcmp+0x28>

0800fac0 <__mdiff>:
 800fac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	460c      	mov	r4, r1
 800fac6:	4606      	mov	r6, r0
 800fac8:	4611      	mov	r1, r2
 800faca:	4620      	mov	r0, r4
 800facc:	4690      	mov	r8, r2
 800face:	f7ff ffdb 	bl	800fa88 <__mcmp>
 800fad2:	1e05      	subs	r5, r0, #0
 800fad4:	d110      	bne.n	800faf8 <__mdiff+0x38>
 800fad6:	4629      	mov	r1, r5
 800fad8:	4630      	mov	r0, r6
 800fada:	f7ff fd0f 	bl	800f4fc <_Balloc>
 800fade:	b930      	cbnz	r0, 800faee <__mdiff+0x2e>
 800fae0:	4b3a      	ldr	r3, [pc, #232]	; (800fbcc <__mdiff+0x10c>)
 800fae2:	4602      	mov	r2, r0
 800fae4:	f240 2137 	movw	r1, #567	; 0x237
 800fae8:	4839      	ldr	r0, [pc, #228]	; (800fbd0 <__mdiff+0x110>)
 800faea:	f001 fc7d 	bl	80113e8 <__assert_func>
 800faee:	2301      	movs	r3, #1
 800faf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800faf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	bfa4      	itt	ge
 800fafa:	4643      	movge	r3, r8
 800fafc:	46a0      	movge	r8, r4
 800fafe:	4630      	mov	r0, r6
 800fb00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb04:	bfa6      	itte	ge
 800fb06:	461c      	movge	r4, r3
 800fb08:	2500      	movge	r5, #0
 800fb0a:	2501      	movlt	r5, #1
 800fb0c:	f7ff fcf6 	bl	800f4fc <_Balloc>
 800fb10:	b920      	cbnz	r0, 800fb1c <__mdiff+0x5c>
 800fb12:	4b2e      	ldr	r3, [pc, #184]	; (800fbcc <__mdiff+0x10c>)
 800fb14:	4602      	mov	r2, r0
 800fb16:	f240 2145 	movw	r1, #581	; 0x245
 800fb1a:	e7e5      	b.n	800fae8 <__mdiff+0x28>
 800fb1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb20:	6926      	ldr	r6, [r4, #16]
 800fb22:	60c5      	str	r5, [r0, #12]
 800fb24:	f104 0914 	add.w	r9, r4, #20
 800fb28:	f108 0514 	add.w	r5, r8, #20
 800fb2c:	f100 0e14 	add.w	lr, r0, #20
 800fb30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb38:	f108 0210 	add.w	r2, r8, #16
 800fb3c:	46f2      	mov	sl, lr
 800fb3e:	2100      	movs	r1, #0
 800fb40:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb48:	fa11 f88b 	uxtah	r8, r1, fp
 800fb4c:	b299      	uxth	r1, r3
 800fb4e:	0c1b      	lsrs	r3, r3, #16
 800fb50:	eba8 0801 	sub.w	r8, r8, r1
 800fb54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb5c:	fa1f f888 	uxth.w	r8, r8
 800fb60:	1419      	asrs	r1, r3, #16
 800fb62:	454e      	cmp	r6, r9
 800fb64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb68:	f84a 3b04 	str.w	r3, [sl], #4
 800fb6c:	d8e8      	bhi.n	800fb40 <__mdiff+0x80>
 800fb6e:	1b33      	subs	r3, r6, r4
 800fb70:	3b15      	subs	r3, #21
 800fb72:	f023 0303 	bic.w	r3, r3, #3
 800fb76:	3304      	adds	r3, #4
 800fb78:	3415      	adds	r4, #21
 800fb7a:	42a6      	cmp	r6, r4
 800fb7c:	bf38      	it	cc
 800fb7e:	2304      	movcc	r3, #4
 800fb80:	441d      	add	r5, r3
 800fb82:	4473      	add	r3, lr
 800fb84:	469e      	mov	lr, r3
 800fb86:	462e      	mov	r6, r5
 800fb88:	4566      	cmp	r6, ip
 800fb8a:	d30e      	bcc.n	800fbaa <__mdiff+0xea>
 800fb8c:	f10c 0203 	add.w	r2, ip, #3
 800fb90:	1b52      	subs	r2, r2, r5
 800fb92:	f022 0203 	bic.w	r2, r2, #3
 800fb96:	3d03      	subs	r5, #3
 800fb98:	45ac      	cmp	ip, r5
 800fb9a:	bf38      	it	cc
 800fb9c:	2200      	movcc	r2, #0
 800fb9e:	4413      	add	r3, r2
 800fba0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fba4:	b17a      	cbz	r2, 800fbc6 <__mdiff+0x106>
 800fba6:	6107      	str	r7, [r0, #16]
 800fba8:	e7a4      	b.n	800faf4 <__mdiff+0x34>
 800fbaa:	f856 8b04 	ldr.w	r8, [r6], #4
 800fbae:	fa11 f288 	uxtah	r2, r1, r8
 800fbb2:	1414      	asrs	r4, r2, #16
 800fbb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbb8:	b292      	uxth	r2, r2
 800fbba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbbe:	f84e 2b04 	str.w	r2, [lr], #4
 800fbc2:	1421      	asrs	r1, r4, #16
 800fbc4:	e7e0      	b.n	800fb88 <__mdiff+0xc8>
 800fbc6:	3f01      	subs	r7, #1
 800fbc8:	e7ea      	b.n	800fba0 <__mdiff+0xe0>
 800fbca:	bf00      	nop
 800fbcc:	08012f5d 	.word	0x08012f5d
 800fbd0:	08012f6e 	.word	0x08012f6e

0800fbd4 <__ulp>:
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	ed8d 0b00 	vstr	d0, [sp]
 800fbda:	9a01      	ldr	r2, [sp, #4]
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <__ulp+0x48>)
 800fbde:	4013      	ands	r3, r2
 800fbe0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dc08      	bgt.n	800fbfa <__ulp+0x26>
 800fbe8:	425b      	negs	r3, r3
 800fbea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fbee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fbf2:	da04      	bge.n	800fbfe <__ulp+0x2a>
 800fbf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fbf8:	4113      	asrs	r3, r2
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	e008      	b.n	800fc10 <__ulp+0x3c>
 800fbfe:	f1a2 0314 	sub.w	r3, r2, #20
 800fc02:	2b1e      	cmp	r3, #30
 800fc04:	bfda      	itte	le
 800fc06:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fc0a:	40da      	lsrle	r2, r3
 800fc0c:	2201      	movgt	r2, #1
 800fc0e:	2300      	movs	r3, #0
 800fc10:	4619      	mov	r1, r3
 800fc12:	4610      	mov	r0, r2
 800fc14:	ec41 0b10 	vmov	d0, r0, r1
 800fc18:	b002      	add	sp, #8
 800fc1a:	4770      	bx	lr
 800fc1c:	7ff00000 	.word	0x7ff00000

0800fc20 <__b2d>:
 800fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	6906      	ldr	r6, [r0, #16]
 800fc26:	f100 0814 	add.w	r8, r0, #20
 800fc2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fc2e:	1f37      	subs	r7, r6, #4
 800fc30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc34:	4610      	mov	r0, r2
 800fc36:	f7ff fd53 	bl	800f6e0 <__hi0bits>
 800fc3a:	f1c0 0320 	rsb	r3, r0, #32
 800fc3e:	280a      	cmp	r0, #10
 800fc40:	600b      	str	r3, [r1, #0]
 800fc42:	491b      	ldr	r1, [pc, #108]	; (800fcb0 <__b2d+0x90>)
 800fc44:	dc15      	bgt.n	800fc72 <__b2d+0x52>
 800fc46:	f1c0 0c0b 	rsb	ip, r0, #11
 800fc4a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fc4e:	45b8      	cmp	r8, r7
 800fc50:	ea43 0501 	orr.w	r5, r3, r1
 800fc54:	bf34      	ite	cc
 800fc56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc5a:	2300      	movcs	r3, #0
 800fc5c:	3015      	adds	r0, #21
 800fc5e:	fa02 f000 	lsl.w	r0, r2, r0
 800fc62:	fa23 f30c 	lsr.w	r3, r3, ip
 800fc66:	4303      	orrs	r3, r0
 800fc68:	461c      	mov	r4, r3
 800fc6a:	ec45 4b10 	vmov	d0, r4, r5
 800fc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc72:	45b8      	cmp	r8, r7
 800fc74:	bf3a      	itte	cc
 800fc76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc7a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fc7e:	2300      	movcs	r3, #0
 800fc80:	380b      	subs	r0, #11
 800fc82:	d012      	beq.n	800fcaa <__b2d+0x8a>
 800fc84:	f1c0 0120 	rsb	r1, r0, #32
 800fc88:	fa23 f401 	lsr.w	r4, r3, r1
 800fc8c:	4082      	lsls	r2, r0
 800fc8e:	4322      	orrs	r2, r4
 800fc90:	4547      	cmp	r7, r8
 800fc92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fc96:	bf8c      	ite	hi
 800fc98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fc9c:	2200      	movls	r2, #0
 800fc9e:	4083      	lsls	r3, r0
 800fca0:	40ca      	lsrs	r2, r1
 800fca2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fca6:	4313      	orrs	r3, r2
 800fca8:	e7de      	b.n	800fc68 <__b2d+0x48>
 800fcaa:	ea42 0501 	orr.w	r5, r2, r1
 800fcae:	e7db      	b.n	800fc68 <__b2d+0x48>
 800fcb0:	3ff00000 	.word	0x3ff00000

0800fcb4 <__d2b>:
 800fcb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcb8:	460f      	mov	r7, r1
 800fcba:	2101      	movs	r1, #1
 800fcbc:	ec59 8b10 	vmov	r8, r9, d0
 800fcc0:	4616      	mov	r6, r2
 800fcc2:	f7ff fc1b 	bl	800f4fc <_Balloc>
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	b930      	cbnz	r0, 800fcd8 <__d2b+0x24>
 800fcca:	4602      	mov	r2, r0
 800fccc:	4b24      	ldr	r3, [pc, #144]	; (800fd60 <__d2b+0xac>)
 800fcce:	4825      	ldr	r0, [pc, #148]	; (800fd64 <__d2b+0xb0>)
 800fcd0:	f240 310f 	movw	r1, #783	; 0x30f
 800fcd4:	f001 fb88 	bl	80113e8 <__assert_func>
 800fcd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fcdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fce0:	bb2d      	cbnz	r5, 800fd2e <__d2b+0x7a>
 800fce2:	9301      	str	r3, [sp, #4]
 800fce4:	f1b8 0300 	subs.w	r3, r8, #0
 800fce8:	d026      	beq.n	800fd38 <__d2b+0x84>
 800fcea:	4668      	mov	r0, sp
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	f7ff fd17 	bl	800f720 <__lo0bits>
 800fcf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fcf6:	b1e8      	cbz	r0, 800fd34 <__d2b+0x80>
 800fcf8:	f1c0 0320 	rsb	r3, r0, #32
 800fcfc:	fa02 f303 	lsl.w	r3, r2, r3
 800fd00:	430b      	orrs	r3, r1
 800fd02:	40c2      	lsrs	r2, r0
 800fd04:	6163      	str	r3, [r4, #20]
 800fd06:	9201      	str	r2, [sp, #4]
 800fd08:	9b01      	ldr	r3, [sp, #4]
 800fd0a:	61a3      	str	r3, [r4, #24]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	bf14      	ite	ne
 800fd10:	2202      	movne	r2, #2
 800fd12:	2201      	moveq	r2, #1
 800fd14:	6122      	str	r2, [r4, #16]
 800fd16:	b1bd      	cbz	r5, 800fd48 <__d2b+0x94>
 800fd18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd1c:	4405      	add	r5, r0
 800fd1e:	603d      	str	r5, [r7, #0]
 800fd20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd24:	6030      	str	r0, [r6, #0]
 800fd26:	4620      	mov	r0, r4
 800fd28:	b003      	add	sp, #12
 800fd2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd32:	e7d6      	b.n	800fce2 <__d2b+0x2e>
 800fd34:	6161      	str	r1, [r4, #20]
 800fd36:	e7e7      	b.n	800fd08 <__d2b+0x54>
 800fd38:	a801      	add	r0, sp, #4
 800fd3a:	f7ff fcf1 	bl	800f720 <__lo0bits>
 800fd3e:	9b01      	ldr	r3, [sp, #4]
 800fd40:	6163      	str	r3, [r4, #20]
 800fd42:	3020      	adds	r0, #32
 800fd44:	2201      	movs	r2, #1
 800fd46:	e7e5      	b.n	800fd14 <__d2b+0x60>
 800fd48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd50:	6038      	str	r0, [r7, #0]
 800fd52:	6918      	ldr	r0, [r3, #16]
 800fd54:	f7ff fcc4 	bl	800f6e0 <__hi0bits>
 800fd58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd5c:	e7e2      	b.n	800fd24 <__d2b+0x70>
 800fd5e:	bf00      	nop
 800fd60:	08012f5d 	.word	0x08012f5d
 800fd64:	08012f6e 	.word	0x08012f6e

0800fd68 <__ratio>:
 800fd68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd6c:	4688      	mov	r8, r1
 800fd6e:	4669      	mov	r1, sp
 800fd70:	4681      	mov	r9, r0
 800fd72:	f7ff ff55 	bl	800fc20 <__b2d>
 800fd76:	a901      	add	r1, sp, #4
 800fd78:	4640      	mov	r0, r8
 800fd7a:	ec55 4b10 	vmov	r4, r5, d0
 800fd7e:	f7ff ff4f 	bl	800fc20 <__b2d>
 800fd82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd8a:	eba3 0c02 	sub.w	ip, r3, r2
 800fd8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd92:	1a9b      	subs	r3, r3, r2
 800fd94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd98:	ec51 0b10 	vmov	r0, r1, d0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	bfd6      	itet	le
 800fda0:	460a      	movle	r2, r1
 800fda2:	462a      	movgt	r2, r5
 800fda4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fda8:	468b      	mov	fp, r1
 800fdaa:	462f      	mov	r7, r5
 800fdac:	bfd4      	ite	le
 800fdae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	ee10 2a10 	vmov	r2, s0
 800fdbc:	465b      	mov	r3, fp
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	f7f0 fd44 	bl	800084c <__aeabi_ddiv>
 800fdc4:	ec41 0b10 	vmov	d0, r0, r1
 800fdc8:	b003      	add	sp, #12
 800fdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdce <__copybits>:
 800fdce:	3901      	subs	r1, #1
 800fdd0:	b570      	push	{r4, r5, r6, lr}
 800fdd2:	1149      	asrs	r1, r1, #5
 800fdd4:	6914      	ldr	r4, [r2, #16]
 800fdd6:	3101      	adds	r1, #1
 800fdd8:	f102 0314 	add.w	r3, r2, #20
 800fddc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fde0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fde4:	1f05      	subs	r5, r0, #4
 800fde6:	42a3      	cmp	r3, r4
 800fde8:	d30c      	bcc.n	800fe04 <__copybits+0x36>
 800fdea:	1aa3      	subs	r3, r4, r2
 800fdec:	3b11      	subs	r3, #17
 800fdee:	f023 0303 	bic.w	r3, r3, #3
 800fdf2:	3211      	adds	r2, #17
 800fdf4:	42a2      	cmp	r2, r4
 800fdf6:	bf88      	it	hi
 800fdf8:	2300      	movhi	r3, #0
 800fdfa:	4418      	add	r0, r3
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4288      	cmp	r0, r1
 800fe00:	d305      	bcc.n	800fe0e <__copybits+0x40>
 800fe02:	bd70      	pop	{r4, r5, r6, pc}
 800fe04:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe08:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe0c:	e7eb      	b.n	800fde6 <__copybits+0x18>
 800fe0e:	f840 3b04 	str.w	r3, [r0], #4
 800fe12:	e7f4      	b.n	800fdfe <__copybits+0x30>

0800fe14 <__any_on>:
 800fe14:	f100 0214 	add.w	r2, r0, #20
 800fe18:	6900      	ldr	r0, [r0, #16]
 800fe1a:	114b      	asrs	r3, r1, #5
 800fe1c:	4298      	cmp	r0, r3
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	db11      	blt.n	800fe46 <__any_on+0x32>
 800fe22:	dd0a      	ble.n	800fe3a <__any_on+0x26>
 800fe24:	f011 011f 	ands.w	r1, r1, #31
 800fe28:	d007      	beq.n	800fe3a <__any_on+0x26>
 800fe2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe2e:	fa24 f001 	lsr.w	r0, r4, r1
 800fe32:	fa00 f101 	lsl.w	r1, r0, r1
 800fe36:	428c      	cmp	r4, r1
 800fe38:	d10b      	bne.n	800fe52 <__any_on+0x3e>
 800fe3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d803      	bhi.n	800fe4a <__any_on+0x36>
 800fe42:	2000      	movs	r0, #0
 800fe44:	bd10      	pop	{r4, pc}
 800fe46:	4603      	mov	r3, r0
 800fe48:	e7f7      	b.n	800fe3a <__any_on+0x26>
 800fe4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe4e:	2900      	cmp	r1, #0
 800fe50:	d0f5      	beq.n	800fe3e <__any_on+0x2a>
 800fe52:	2001      	movs	r0, #1
 800fe54:	e7f6      	b.n	800fe44 <__any_on+0x30>

0800fe56 <sulp>:
 800fe56:	b570      	push	{r4, r5, r6, lr}
 800fe58:	4604      	mov	r4, r0
 800fe5a:	460d      	mov	r5, r1
 800fe5c:	ec45 4b10 	vmov	d0, r4, r5
 800fe60:	4616      	mov	r6, r2
 800fe62:	f7ff feb7 	bl	800fbd4 <__ulp>
 800fe66:	ec51 0b10 	vmov	r0, r1, d0
 800fe6a:	b17e      	cbz	r6, 800fe8c <sulp+0x36>
 800fe6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	dd09      	ble.n	800fe8c <sulp+0x36>
 800fe78:	051b      	lsls	r3, r3, #20
 800fe7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe7e:	2400      	movs	r4, #0
 800fe80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fe84:	4622      	mov	r2, r4
 800fe86:	462b      	mov	r3, r5
 800fe88:	f7f0 fbb6 	bl	80005f8 <__aeabi_dmul>
 800fe8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe90 <_strtod_l>:
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	ed2d 8b02 	vpush	{d8}
 800fe98:	b09b      	sub	sp, #108	; 0x6c
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe9e:	2200      	movs	r2, #0
 800fea0:	9216      	str	r2, [sp, #88]	; 0x58
 800fea2:	460d      	mov	r5, r1
 800fea4:	f04f 0800 	mov.w	r8, #0
 800fea8:	f04f 0900 	mov.w	r9, #0
 800feac:	460a      	mov	r2, r1
 800feae:	9215      	str	r2, [sp, #84]	; 0x54
 800feb0:	7811      	ldrb	r1, [r2, #0]
 800feb2:	292b      	cmp	r1, #43	; 0x2b
 800feb4:	d04c      	beq.n	800ff50 <_strtod_l+0xc0>
 800feb6:	d83a      	bhi.n	800ff2e <_strtod_l+0x9e>
 800feb8:	290d      	cmp	r1, #13
 800feba:	d834      	bhi.n	800ff26 <_strtod_l+0x96>
 800febc:	2908      	cmp	r1, #8
 800febe:	d834      	bhi.n	800ff2a <_strtod_l+0x9a>
 800fec0:	2900      	cmp	r1, #0
 800fec2:	d03d      	beq.n	800ff40 <_strtod_l+0xb0>
 800fec4:	2200      	movs	r2, #0
 800fec6:	920a      	str	r2, [sp, #40]	; 0x28
 800fec8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800feca:	7832      	ldrb	r2, [r6, #0]
 800fecc:	2a30      	cmp	r2, #48	; 0x30
 800fece:	f040 80b4 	bne.w	801003a <_strtod_l+0x1aa>
 800fed2:	7872      	ldrb	r2, [r6, #1]
 800fed4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fed8:	2a58      	cmp	r2, #88	; 0x58
 800feda:	d170      	bne.n	800ffbe <_strtod_l+0x12e>
 800fedc:	9302      	str	r3, [sp, #8]
 800fede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	ab16      	add	r3, sp, #88	; 0x58
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	4a8e      	ldr	r2, [pc, #568]	; (8010120 <_strtod_l+0x290>)
 800fee8:	ab17      	add	r3, sp, #92	; 0x5c
 800feea:	a915      	add	r1, sp, #84	; 0x54
 800feec:	4620      	mov	r0, r4
 800feee:	f001 fb17 	bl	8011520 <__gethex>
 800fef2:	f010 070f 	ands.w	r7, r0, #15
 800fef6:	4605      	mov	r5, r0
 800fef8:	d005      	beq.n	800ff06 <_strtod_l+0x76>
 800fefa:	2f06      	cmp	r7, #6
 800fefc:	d12a      	bne.n	800ff54 <_strtod_l+0xc4>
 800fefe:	3601      	adds	r6, #1
 800ff00:	2300      	movs	r3, #0
 800ff02:	9615      	str	r6, [sp, #84]	; 0x54
 800ff04:	930a      	str	r3, [sp, #40]	; 0x28
 800ff06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f040 857f 	bne.w	8010a0c <_strtod_l+0xb7c>
 800ff0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff10:	b1db      	cbz	r3, 800ff4a <_strtod_l+0xba>
 800ff12:	4642      	mov	r2, r8
 800ff14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ff18:	ec43 2b10 	vmov	d0, r2, r3
 800ff1c:	b01b      	add	sp, #108	; 0x6c
 800ff1e:	ecbd 8b02 	vpop	{d8}
 800ff22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff26:	2920      	cmp	r1, #32
 800ff28:	d1cc      	bne.n	800fec4 <_strtod_l+0x34>
 800ff2a:	3201      	adds	r2, #1
 800ff2c:	e7bf      	b.n	800feae <_strtod_l+0x1e>
 800ff2e:	292d      	cmp	r1, #45	; 0x2d
 800ff30:	d1c8      	bne.n	800fec4 <_strtod_l+0x34>
 800ff32:	2101      	movs	r1, #1
 800ff34:	910a      	str	r1, [sp, #40]	; 0x28
 800ff36:	1c51      	adds	r1, r2, #1
 800ff38:	9115      	str	r1, [sp, #84]	; 0x54
 800ff3a:	7852      	ldrb	r2, [r2, #1]
 800ff3c:	2a00      	cmp	r2, #0
 800ff3e:	d1c3      	bne.n	800fec8 <_strtod_l+0x38>
 800ff40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff42:	9515      	str	r5, [sp, #84]	; 0x54
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f040 855f 	bne.w	8010a08 <_strtod_l+0xb78>
 800ff4a:	4642      	mov	r2, r8
 800ff4c:	464b      	mov	r3, r9
 800ff4e:	e7e3      	b.n	800ff18 <_strtod_l+0x88>
 800ff50:	2100      	movs	r1, #0
 800ff52:	e7ef      	b.n	800ff34 <_strtod_l+0xa4>
 800ff54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff56:	b13a      	cbz	r2, 800ff68 <_strtod_l+0xd8>
 800ff58:	2135      	movs	r1, #53	; 0x35
 800ff5a:	a818      	add	r0, sp, #96	; 0x60
 800ff5c:	f7ff ff37 	bl	800fdce <__copybits>
 800ff60:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff62:	4620      	mov	r0, r4
 800ff64:	f7ff fb0a 	bl	800f57c <_Bfree>
 800ff68:	3f01      	subs	r7, #1
 800ff6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff6c:	2f04      	cmp	r7, #4
 800ff6e:	d806      	bhi.n	800ff7e <_strtod_l+0xee>
 800ff70:	e8df f007 	tbb	[pc, r7]
 800ff74:	201d0314 	.word	0x201d0314
 800ff78:	14          	.byte	0x14
 800ff79:	00          	.byte	0x00
 800ff7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ff7e:	05e9      	lsls	r1, r5, #23
 800ff80:	bf48      	it	mi
 800ff82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ff86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff8a:	0d1b      	lsrs	r3, r3, #20
 800ff8c:	051b      	lsls	r3, r3, #20
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1b9      	bne.n	800ff06 <_strtod_l+0x76>
 800ff92:	f7fe fb05 	bl	800e5a0 <__errno>
 800ff96:	2322      	movs	r3, #34	; 0x22
 800ff98:	6003      	str	r3, [r0, #0]
 800ff9a:	e7b4      	b.n	800ff06 <_strtod_l+0x76>
 800ff9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ffa0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ffa4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ffa8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ffac:	e7e7      	b.n	800ff7e <_strtod_l+0xee>
 800ffae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010128 <_strtod_l+0x298>
 800ffb2:	e7e4      	b.n	800ff7e <_strtod_l+0xee>
 800ffb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ffb8:	f04f 38ff 	mov.w	r8, #4294967295
 800ffbc:	e7df      	b.n	800ff7e <_strtod_l+0xee>
 800ffbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffc0:	1c5a      	adds	r2, r3, #1
 800ffc2:	9215      	str	r2, [sp, #84]	; 0x54
 800ffc4:	785b      	ldrb	r3, [r3, #1]
 800ffc6:	2b30      	cmp	r3, #48	; 0x30
 800ffc8:	d0f9      	beq.n	800ffbe <_strtod_l+0x12e>
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d09b      	beq.n	800ff06 <_strtod_l+0x76>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	f04f 0a00 	mov.w	sl, #0
 800ffd4:	9304      	str	r3, [sp, #16]
 800ffd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ffde:	46d3      	mov	fp, sl
 800ffe0:	220a      	movs	r2, #10
 800ffe2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ffe4:	7806      	ldrb	r6, [r0, #0]
 800ffe6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ffea:	b2d9      	uxtb	r1, r3
 800ffec:	2909      	cmp	r1, #9
 800ffee:	d926      	bls.n	801003e <_strtod_l+0x1ae>
 800fff0:	494c      	ldr	r1, [pc, #304]	; (8010124 <_strtod_l+0x294>)
 800fff2:	2201      	movs	r2, #1
 800fff4:	f001 f9c0 	bl	8011378 <strncmp>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d030      	beq.n	801005e <_strtod_l+0x1ce>
 800fffc:	2000      	movs	r0, #0
 800fffe:	4632      	mov	r2, r6
 8010000:	9005      	str	r0, [sp, #20]
 8010002:	465e      	mov	r6, fp
 8010004:	4603      	mov	r3, r0
 8010006:	2a65      	cmp	r2, #101	; 0x65
 8010008:	d001      	beq.n	801000e <_strtod_l+0x17e>
 801000a:	2a45      	cmp	r2, #69	; 0x45
 801000c:	d113      	bne.n	8010036 <_strtod_l+0x1a6>
 801000e:	b91e      	cbnz	r6, 8010018 <_strtod_l+0x188>
 8010010:	9a04      	ldr	r2, [sp, #16]
 8010012:	4302      	orrs	r2, r0
 8010014:	d094      	beq.n	800ff40 <_strtod_l+0xb0>
 8010016:	2600      	movs	r6, #0
 8010018:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801001a:	1c6a      	adds	r2, r5, #1
 801001c:	9215      	str	r2, [sp, #84]	; 0x54
 801001e:	786a      	ldrb	r2, [r5, #1]
 8010020:	2a2b      	cmp	r2, #43	; 0x2b
 8010022:	d074      	beq.n	801010e <_strtod_l+0x27e>
 8010024:	2a2d      	cmp	r2, #45	; 0x2d
 8010026:	d078      	beq.n	801011a <_strtod_l+0x28a>
 8010028:	f04f 0c00 	mov.w	ip, #0
 801002c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010030:	2909      	cmp	r1, #9
 8010032:	d97f      	bls.n	8010134 <_strtod_l+0x2a4>
 8010034:	9515      	str	r5, [sp, #84]	; 0x54
 8010036:	2700      	movs	r7, #0
 8010038:	e09e      	b.n	8010178 <_strtod_l+0x2e8>
 801003a:	2300      	movs	r3, #0
 801003c:	e7c8      	b.n	800ffd0 <_strtod_l+0x140>
 801003e:	f1bb 0f08 	cmp.w	fp, #8
 8010042:	bfd8      	it	le
 8010044:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010046:	f100 0001 	add.w	r0, r0, #1
 801004a:	bfda      	itte	le
 801004c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010050:	9309      	strle	r3, [sp, #36]	; 0x24
 8010052:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010056:	f10b 0b01 	add.w	fp, fp, #1
 801005a:	9015      	str	r0, [sp, #84]	; 0x54
 801005c:	e7c1      	b.n	800ffe2 <_strtod_l+0x152>
 801005e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	9215      	str	r2, [sp, #84]	; 0x54
 8010064:	785a      	ldrb	r2, [r3, #1]
 8010066:	f1bb 0f00 	cmp.w	fp, #0
 801006a:	d037      	beq.n	80100dc <_strtod_l+0x24c>
 801006c:	9005      	str	r0, [sp, #20]
 801006e:	465e      	mov	r6, fp
 8010070:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010074:	2b09      	cmp	r3, #9
 8010076:	d912      	bls.n	801009e <_strtod_l+0x20e>
 8010078:	2301      	movs	r3, #1
 801007a:	e7c4      	b.n	8010006 <_strtod_l+0x176>
 801007c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	9215      	str	r2, [sp, #84]	; 0x54
 8010082:	785a      	ldrb	r2, [r3, #1]
 8010084:	3001      	adds	r0, #1
 8010086:	2a30      	cmp	r2, #48	; 0x30
 8010088:	d0f8      	beq.n	801007c <_strtod_l+0x1ec>
 801008a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801008e:	2b08      	cmp	r3, #8
 8010090:	f200 84c1 	bhi.w	8010a16 <_strtod_l+0xb86>
 8010094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010096:	9005      	str	r0, [sp, #20]
 8010098:	2000      	movs	r0, #0
 801009a:	930b      	str	r3, [sp, #44]	; 0x2c
 801009c:	4606      	mov	r6, r0
 801009e:	3a30      	subs	r2, #48	; 0x30
 80100a0:	f100 0301 	add.w	r3, r0, #1
 80100a4:	d014      	beq.n	80100d0 <_strtod_l+0x240>
 80100a6:	9905      	ldr	r1, [sp, #20]
 80100a8:	4419      	add	r1, r3
 80100aa:	9105      	str	r1, [sp, #20]
 80100ac:	4633      	mov	r3, r6
 80100ae:	eb00 0c06 	add.w	ip, r0, r6
 80100b2:	210a      	movs	r1, #10
 80100b4:	4563      	cmp	r3, ip
 80100b6:	d113      	bne.n	80100e0 <_strtod_l+0x250>
 80100b8:	1833      	adds	r3, r6, r0
 80100ba:	2b08      	cmp	r3, #8
 80100bc:	f106 0601 	add.w	r6, r6, #1
 80100c0:	4406      	add	r6, r0
 80100c2:	dc1a      	bgt.n	80100fa <_strtod_l+0x26a>
 80100c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100c6:	230a      	movs	r3, #10
 80100c8:	fb03 2301 	mla	r3, r3, r1, r2
 80100cc:	9309      	str	r3, [sp, #36]	; 0x24
 80100ce:	2300      	movs	r3, #0
 80100d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100d2:	1c51      	adds	r1, r2, #1
 80100d4:	9115      	str	r1, [sp, #84]	; 0x54
 80100d6:	7852      	ldrb	r2, [r2, #1]
 80100d8:	4618      	mov	r0, r3
 80100da:	e7c9      	b.n	8010070 <_strtod_l+0x1e0>
 80100dc:	4658      	mov	r0, fp
 80100de:	e7d2      	b.n	8010086 <_strtod_l+0x1f6>
 80100e0:	2b08      	cmp	r3, #8
 80100e2:	f103 0301 	add.w	r3, r3, #1
 80100e6:	dc03      	bgt.n	80100f0 <_strtod_l+0x260>
 80100e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100ea:	434f      	muls	r7, r1
 80100ec:	9709      	str	r7, [sp, #36]	; 0x24
 80100ee:	e7e1      	b.n	80100b4 <_strtod_l+0x224>
 80100f0:	2b10      	cmp	r3, #16
 80100f2:	bfd8      	it	le
 80100f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80100f8:	e7dc      	b.n	80100b4 <_strtod_l+0x224>
 80100fa:	2e10      	cmp	r6, #16
 80100fc:	bfdc      	itt	le
 80100fe:	230a      	movle	r3, #10
 8010100:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010104:	e7e3      	b.n	80100ce <_strtod_l+0x23e>
 8010106:	2300      	movs	r3, #0
 8010108:	9305      	str	r3, [sp, #20]
 801010a:	2301      	movs	r3, #1
 801010c:	e780      	b.n	8010010 <_strtod_l+0x180>
 801010e:	f04f 0c00 	mov.w	ip, #0
 8010112:	1caa      	adds	r2, r5, #2
 8010114:	9215      	str	r2, [sp, #84]	; 0x54
 8010116:	78aa      	ldrb	r2, [r5, #2]
 8010118:	e788      	b.n	801002c <_strtod_l+0x19c>
 801011a:	f04f 0c01 	mov.w	ip, #1
 801011e:	e7f8      	b.n	8010112 <_strtod_l+0x282>
 8010120:	080130c8 	.word	0x080130c8
 8010124:	080130c4 	.word	0x080130c4
 8010128:	7ff00000 	.word	0x7ff00000
 801012c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801012e:	1c51      	adds	r1, r2, #1
 8010130:	9115      	str	r1, [sp, #84]	; 0x54
 8010132:	7852      	ldrb	r2, [r2, #1]
 8010134:	2a30      	cmp	r2, #48	; 0x30
 8010136:	d0f9      	beq.n	801012c <_strtod_l+0x29c>
 8010138:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801013c:	2908      	cmp	r1, #8
 801013e:	f63f af7a 	bhi.w	8010036 <_strtod_l+0x1a6>
 8010142:	3a30      	subs	r2, #48	; 0x30
 8010144:	9208      	str	r2, [sp, #32]
 8010146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010148:	920c      	str	r2, [sp, #48]	; 0x30
 801014a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801014c:	1c57      	adds	r7, r2, #1
 801014e:	9715      	str	r7, [sp, #84]	; 0x54
 8010150:	7852      	ldrb	r2, [r2, #1]
 8010152:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010156:	f1be 0f09 	cmp.w	lr, #9
 801015a:	d938      	bls.n	80101ce <_strtod_l+0x33e>
 801015c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801015e:	1a7f      	subs	r7, r7, r1
 8010160:	2f08      	cmp	r7, #8
 8010162:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010166:	dc03      	bgt.n	8010170 <_strtod_l+0x2e0>
 8010168:	9908      	ldr	r1, [sp, #32]
 801016a:	428f      	cmp	r7, r1
 801016c:	bfa8      	it	ge
 801016e:	460f      	movge	r7, r1
 8010170:	f1bc 0f00 	cmp.w	ip, #0
 8010174:	d000      	beq.n	8010178 <_strtod_l+0x2e8>
 8010176:	427f      	negs	r7, r7
 8010178:	2e00      	cmp	r6, #0
 801017a:	d14f      	bne.n	801021c <_strtod_l+0x38c>
 801017c:	9904      	ldr	r1, [sp, #16]
 801017e:	4301      	orrs	r1, r0
 8010180:	f47f aec1 	bne.w	800ff06 <_strtod_l+0x76>
 8010184:	2b00      	cmp	r3, #0
 8010186:	f47f aedb 	bne.w	800ff40 <_strtod_l+0xb0>
 801018a:	2a69      	cmp	r2, #105	; 0x69
 801018c:	d029      	beq.n	80101e2 <_strtod_l+0x352>
 801018e:	dc26      	bgt.n	80101de <_strtod_l+0x34e>
 8010190:	2a49      	cmp	r2, #73	; 0x49
 8010192:	d026      	beq.n	80101e2 <_strtod_l+0x352>
 8010194:	2a4e      	cmp	r2, #78	; 0x4e
 8010196:	f47f aed3 	bne.w	800ff40 <_strtod_l+0xb0>
 801019a:	499b      	ldr	r1, [pc, #620]	; (8010408 <_strtod_l+0x578>)
 801019c:	a815      	add	r0, sp, #84	; 0x54
 801019e:	f001 fbff 	bl	80119a0 <__match>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	f43f aecc 	beq.w	800ff40 <_strtod_l+0xb0>
 80101a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	2b28      	cmp	r3, #40	; 0x28
 80101ae:	d12f      	bne.n	8010210 <_strtod_l+0x380>
 80101b0:	4996      	ldr	r1, [pc, #600]	; (801040c <_strtod_l+0x57c>)
 80101b2:	aa18      	add	r2, sp, #96	; 0x60
 80101b4:	a815      	add	r0, sp, #84	; 0x54
 80101b6:	f001 fc07 	bl	80119c8 <__hexnan>
 80101ba:	2805      	cmp	r0, #5
 80101bc:	d128      	bne.n	8010210 <_strtod_l+0x380>
 80101be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80101c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80101c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80101cc:	e69b      	b.n	800ff06 <_strtod_l+0x76>
 80101ce:	9f08      	ldr	r7, [sp, #32]
 80101d0:	210a      	movs	r1, #10
 80101d2:	fb01 2107 	mla	r1, r1, r7, r2
 80101d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80101da:	9208      	str	r2, [sp, #32]
 80101dc:	e7b5      	b.n	801014a <_strtod_l+0x2ba>
 80101de:	2a6e      	cmp	r2, #110	; 0x6e
 80101e0:	e7d9      	b.n	8010196 <_strtod_l+0x306>
 80101e2:	498b      	ldr	r1, [pc, #556]	; (8010410 <_strtod_l+0x580>)
 80101e4:	a815      	add	r0, sp, #84	; 0x54
 80101e6:	f001 fbdb 	bl	80119a0 <__match>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	f43f aea8 	beq.w	800ff40 <_strtod_l+0xb0>
 80101f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101f2:	4988      	ldr	r1, [pc, #544]	; (8010414 <_strtod_l+0x584>)
 80101f4:	3b01      	subs	r3, #1
 80101f6:	a815      	add	r0, sp, #84	; 0x54
 80101f8:	9315      	str	r3, [sp, #84]	; 0x54
 80101fa:	f001 fbd1 	bl	80119a0 <__match>
 80101fe:	b910      	cbnz	r0, 8010206 <_strtod_l+0x376>
 8010200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010202:	3301      	adds	r3, #1
 8010204:	9315      	str	r3, [sp, #84]	; 0x54
 8010206:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010424 <_strtod_l+0x594>
 801020a:	f04f 0800 	mov.w	r8, #0
 801020e:	e67a      	b.n	800ff06 <_strtod_l+0x76>
 8010210:	4881      	ldr	r0, [pc, #516]	; (8010418 <_strtod_l+0x588>)
 8010212:	f001 f8e1 	bl	80113d8 <nan>
 8010216:	ec59 8b10 	vmov	r8, r9, d0
 801021a:	e674      	b.n	800ff06 <_strtod_l+0x76>
 801021c:	9b05      	ldr	r3, [sp, #20]
 801021e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010220:	1afb      	subs	r3, r7, r3
 8010222:	f1bb 0f00 	cmp.w	fp, #0
 8010226:	bf08      	it	eq
 8010228:	46b3      	moveq	fp, r6
 801022a:	2e10      	cmp	r6, #16
 801022c:	9308      	str	r3, [sp, #32]
 801022e:	4635      	mov	r5, r6
 8010230:	bfa8      	it	ge
 8010232:	2510      	movge	r5, #16
 8010234:	f7f0 f966 	bl	8000504 <__aeabi_ui2d>
 8010238:	2e09      	cmp	r6, #9
 801023a:	4680      	mov	r8, r0
 801023c:	4689      	mov	r9, r1
 801023e:	dd13      	ble.n	8010268 <_strtod_l+0x3d8>
 8010240:	4b76      	ldr	r3, [pc, #472]	; (801041c <_strtod_l+0x58c>)
 8010242:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010246:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801024a:	f7f0 f9d5 	bl	80005f8 <__aeabi_dmul>
 801024e:	4680      	mov	r8, r0
 8010250:	4650      	mov	r0, sl
 8010252:	4689      	mov	r9, r1
 8010254:	f7f0 f956 	bl	8000504 <__aeabi_ui2d>
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	4640      	mov	r0, r8
 801025e:	4649      	mov	r1, r9
 8010260:	f7f0 f814 	bl	800028c <__adddf3>
 8010264:	4680      	mov	r8, r0
 8010266:	4689      	mov	r9, r1
 8010268:	2e0f      	cmp	r6, #15
 801026a:	dc38      	bgt.n	80102de <_strtod_l+0x44e>
 801026c:	9b08      	ldr	r3, [sp, #32]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f43f ae49 	beq.w	800ff06 <_strtod_l+0x76>
 8010274:	dd24      	ble.n	80102c0 <_strtod_l+0x430>
 8010276:	2b16      	cmp	r3, #22
 8010278:	dc0b      	bgt.n	8010292 <_strtod_l+0x402>
 801027a:	4968      	ldr	r1, [pc, #416]	; (801041c <_strtod_l+0x58c>)
 801027c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010284:	4642      	mov	r2, r8
 8010286:	464b      	mov	r3, r9
 8010288:	f7f0 f9b6 	bl	80005f8 <__aeabi_dmul>
 801028c:	4680      	mov	r8, r0
 801028e:	4689      	mov	r9, r1
 8010290:	e639      	b.n	800ff06 <_strtod_l+0x76>
 8010292:	9a08      	ldr	r2, [sp, #32]
 8010294:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010298:	4293      	cmp	r3, r2
 801029a:	db20      	blt.n	80102de <_strtod_l+0x44e>
 801029c:	4c5f      	ldr	r4, [pc, #380]	; (801041c <_strtod_l+0x58c>)
 801029e:	f1c6 060f 	rsb	r6, r6, #15
 80102a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80102a6:	4642      	mov	r2, r8
 80102a8:	464b      	mov	r3, r9
 80102aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ae:	f7f0 f9a3 	bl	80005f8 <__aeabi_dmul>
 80102b2:	9b08      	ldr	r3, [sp, #32]
 80102b4:	1b9e      	subs	r6, r3, r6
 80102b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80102ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80102be:	e7e3      	b.n	8010288 <_strtod_l+0x3f8>
 80102c0:	9b08      	ldr	r3, [sp, #32]
 80102c2:	3316      	adds	r3, #22
 80102c4:	db0b      	blt.n	80102de <_strtod_l+0x44e>
 80102c6:	9b05      	ldr	r3, [sp, #20]
 80102c8:	1bdf      	subs	r7, r3, r7
 80102ca:	4b54      	ldr	r3, [pc, #336]	; (801041c <_strtod_l+0x58c>)
 80102cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80102d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d4:	4640      	mov	r0, r8
 80102d6:	4649      	mov	r1, r9
 80102d8:	f7f0 fab8 	bl	800084c <__aeabi_ddiv>
 80102dc:	e7d6      	b.n	801028c <_strtod_l+0x3fc>
 80102de:	9b08      	ldr	r3, [sp, #32]
 80102e0:	1b75      	subs	r5, r6, r5
 80102e2:	441d      	add	r5, r3
 80102e4:	2d00      	cmp	r5, #0
 80102e6:	dd70      	ble.n	80103ca <_strtod_l+0x53a>
 80102e8:	f015 030f 	ands.w	r3, r5, #15
 80102ec:	d00a      	beq.n	8010304 <_strtod_l+0x474>
 80102ee:	494b      	ldr	r1, [pc, #300]	; (801041c <_strtod_l+0x58c>)
 80102f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102f4:	4642      	mov	r2, r8
 80102f6:	464b      	mov	r3, r9
 80102f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102fc:	f7f0 f97c 	bl	80005f8 <__aeabi_dmul>
 8010300:	4680      	mov	r8, r0
 8010302:	4689      	mov	r9, r1
 8010304:	f035 050f 	bics.w	r5, r5, #15
 8010308:	d04d      	beq.n	80103a6 <_strtod_l+0x516>
 801030a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801030e:	dd22      	ble.n	8010356 <_strtod_l+0x4c6>
 8010310:	2500      	movs	r5, #0
 8010312:	46ab      	mov	fp, r5
 8010314:	9509      	str	r5, [sp, #36]	; 0x24
 8010316:	9505      	str	r5, [sp, #20]
 8010318:	2322      	movs	r3, #34	; 0x22
 801031a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010424 <_strtod_l+0x594>
 801031e:	6023      	str	r3, [r4, #0]
 8010320:	f04f 0800 	mov.w	r8, #0
 8010324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010326:	2b00      	cmp	r3, #0
 8010328:	f43f aded 	beq.w	800ff06 <_strtod_l+0x76>
 801032c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801032e:	4620      	mov	r0, r4
 8010330:	f7ff f924 	bl	800f57c <_Bfree>
 8010334:	9905      	ldr	r1, [sp, #20]
 8010336:	4620      	mov	r0, r4
 8010338:	f7ff f920 	bl	800f57c <_Bfree>
 801033c:	4659      	mov	r1, fp
 801033e:	4620      	mov	r0, r4
 8010340:	f7ff f91c 	bl	800f57c <_Bfree>
 8010344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010346:	4620      	mov	r0, r4
 8010348:	f7ff f918 	bl	800f57c <_Bfree>
 801034c:	4629      	mov	r1, r5
 801034e:	4620      	mov	r0, r4
 8010350:	f7ff f914 	bl	800f57c <_Bfree>
 8010354:	e5d7      	b.n	800ff06 <_strtod_l+0x76>
 8010356:	4b32      	ldr	r3, [pc, #200]	; (8010420 <_strtod_l+0x590>)
 8010358:	9304      	str	r3, [sp, #16]
 801035a:	2300      	movs	r3, #0
 801035c:	112d      	asrs	r5, r5, #4
 801035e:	4640      	mov	r0, r8
 8010360:	4649      	mov	r1, r9
 8010362:	469a      	mov	sl, r3
 8010364:	2d01      	cmp	r5, #1
 8010366:	dc21      	bgt.n	80103ac <_strtod_l+0x51c>
 8010368:	b10b      	cbz	r3, 801036e <_strtod_l+0x4de>
 801036a:	4680      	mov	r8, r0
 801036c:	4689      	mov	r9, r1
 801036e:	492c      	ldr	r1, [pc, #176]	; (8010420 <_strtod_l+0x590>)
 8010370:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010374:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010378:	4642      	mov	r2, r8
 801037a:	464b      	mov	r3, r9
 801037c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010380:	f7f0 f93a 	bl	80005f8 <__aeabi_dmul>
 8010384:	4b27      	ldr	r3, [pc, #156]	; (8010424 <_strtod_l+0x594>)
 8010386:	460a      	mov	r2, r1
 8010388:	400b      	ands	r3, r1
 801038a:	4927      	ldr	r1, [pc, #156]	; (8010428 <_strtod_l+0x598>)
 801038c:	428b      	cmp	r3, r1
 801038e:	4680      	mov	r8, r0
 8010390:	d8be      	bhi.n	8010310 <_strtod_l+0x480>
 8010392:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010396:	428b      	cmp	r3, r1
 8010398:	bf86      	itte	hi
 801039a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801042c <_strtod_l+0x59c>
 801039e:	f04f 38ff 	movhi.w	r8, #4294967295
 80103a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80103a6:	2300      	movs	r3, #0
 80103a8:	9304      	str	r3, [sp, #16]
 80103aa:	e07b      	b.n	80104a4 <_strtod_l+0x614>
 80103ac:	07ea      	lsls	r2, r5, #31
 80103ae:	d505      	bpl.n	80103bc <_strtod_l+0x52c>
 80103b0:	9b04      	ldr	r3, [sp, #16]
 80103b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b6:	f7f0 f91f 	bl	80005f8 <__aeabi_dmul>
 80103ba:	2301      	movs	r3, #1
 80103bc:	9a04      	ldr	r2, [sp, #16]
 80103be:	3208      	adds	r2, #8
 80103c0:	f10a 0a01 	add.w	sl, sl, #1
 80103c4:	106d      	asrs	r5, r5, #1
 80103c6:	9204      	str	r2, [sp, #16]
 80103c8:	e7cc      	b.n	8010364 <_strtod_l+0x4d4>
 80103ca:	d0ec      	beq.n	80103a6 <_strtod_l+0x516>
 80103cc:	426d      	negs	r5, r5
 80103ce:	f015 020f 	ands.w	r2, r5, #15
 80103d2:	d00a      	beq.n	80103ea <_strtod_l+0x55a>
 80103d4:	4b11      	ldr	r3, [pc, #68]	; (801041c <_strtod_l+0x58c>)
 80103d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103da:	4640      	mov	r0, r8
 80103dc:	4649      	mov	r1, r9
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7f0 fa33 	bl	800084c <__aeabi_ddiv>
 80103e6:	4680      	mov	r8, r0
 80103e8:	4689      	mov	r9, r1
 80103ea:	112d      	asrs	r5, r5, #4
 80103ec:	d0db      	beq.n	80103a6 <_strtod_l+0x516>
 80103ee:	2d1f      	cmp	r5, #31
 80103f0:	dd1e      	ble.n	8010430 <_strtod_l+0x5a0>
 80103f2:	2500      	movs	r5, #0
 80103f4:	46ab      	mov	fp, r5
 80103f6:	9509      	str	r5, [sp, #36]	; 0x24
 80103f8:	9505      	str	r5, [sp, #20]
 80103fa:	2322      	movs	r3, #34	; 0x22
 80103fc:	f04f 0800 	mov.w	r8, #0
 8010400:	f04f 0900 	mov.w	r9, #0
 8010404:	6023      	str	r3, [r4, #0]
 8010406:	e78d      	b.n	8010324 <_strtod_l+0x494>
 8010408:	08012eb5 	.word	0x08012eb5
 801040c:	080130dc 	.word	0x080130dc
 8010410:	08012ead 	.word	0x08012ead
 8010414:	08012ee4 	.word	0x08012ee4
 8010418:	0801326d 	.word	0x0801326d
 801041c:	08012ff0 	.word	0x08012ff0
 8010420:	08012fc8 	.word	0x08012fc8
 8010424:	7ff00000 	.word	0x7ff00000
 8010428:	7ca00000 	.word	0x7ca00000
 801042c:	7fefffff 	.word	0x7fefffff
 8010430:	f015 0310 	ands.w	r3, r5, #16
 8010434:	bf18      	it	ne
 8010436:	236a      	movne	r3, #106	; 0x6a
 8010438:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80107dc <_strtod_l+0x94c>
 801043c:	9304      	str	r3, [sp, #16]
 801043e:	4640      	mov	r0, r8
 8010440:	4649      	mov	r1, r9
 8010442:	2300      	movs	r3, #0
 8010444:	07ea      	lsls	r2, r5, #31
 8010446:	d504      	bpl.n	8010452 <_strtod_l+0x5c2>
 8010448:	e9da 2300 	ldrd	r2, r3, [sl]
 801044c:	f7f0 f8d4 	bl	80005f8 <__aeabi_dmul>
 8010450:	2301      	movs	r3, #1
 8010452:	106d      	asrs	r5, r5, #1
 8010454:	f10a 0a08 	add.w	sl, sl, #8
 8010458:	d1f4      	bne.n	8010444 <_strtod_l+0x5b4>
 801045a:	b10b      	cbz	r3, 8010460 <_strtod_l+0x5d0>
 801045c:	4680      	mov	r8, r0
 801045e:	4689      	mov	r9, r1
 8010460:	9b04      	ldr	r3, [sp, #16]
 8010462:	b1bb      	cbz	r3, 8010494 <_strtod_l+0x604>
 8010464:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010468:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801046c:	2b00      	cmp	r3, #0
 801046e:	4649      	mov	r1, r9
 8010470:	dd10      	ble.n	8010494 <_strtod_l+0x604>
 8010472:	2b1f      	cmp	r3, #31
 8010474:	f340 811e 	ble.w	80106b4 <_strtod_l+0x824>
 8010478:	2b34      	cmp	r3, #52	; 0x34
 801047a:	bfde      	ittt	le
 801047c:	f04f 33ff 	movle.w	r3, #4294967295
 8010480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010484:	4093      	lslle	r3, r2
 8010486:	f04f 0800 	mov.w	r8, #0
 801048a:	bfcc      	ite	gt
 801048c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010490:	ea03 0901 	andle.w	r9, r3, r1
 8010494:	2200      	movs	r2, #0
 8010496:	2300      	movs	r3, #0
 8010498:	4640      	mov	r0, r8
 801049a:	4649      	mov	r1, r9
 801049c:	f7f0 fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1a6      	bne.n	80103f2 <_strtod_l+0x562>
 80104a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104aa:	4633      	mov	r3, r6
 80104ac:	465a      	mov	r2, fp
 80104ae:	4620      	mov	r0, r4
 80104b0:	f7ff f8cc 	bl	800f64c <__s2b>
 80104b4:	9009      	str	r0, [sp, #36]	; 0x24
 80104b6:	2800      	cmp	r0, #0
 80104b8:	f43f af2a 	beq.w	8010310 <_strtod_l+0x480>
 80104bc:	9a08      	ldr	r2, [sp, #32]
 80104be:	9b05      	ldr	r3, [sp, #20]
 80104c0:	2a00      	cmp	r2, #0
 80104c2:	eba3 0307 	sub.w	r3, r3, r7
 80104c6:	bfa8      	it	ge
 80104c8:	2300      	movge	r3, #0
 80104ca:	930c      	str	r3, [sp, #48]	; 0x30
 80104cc:	2500      	movs	r5, #0
 80104ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80104d2:	9312      	str	r3, [sp, #72]	; 0x48
 80104d4:	46ab      	mov	fp, r5
 80104d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d8:	4620      	mov	r0, r4
 80104da:	6859      	ldr	r1, [r3, #4]
 80104dc:	f7ff f80e 	bl	800f4fc <_Balloc>
 80104e0:	9005      	str	r0, [sp, #20]
 80104e2:	2800      	cmp	r0, #0
 80104e4:	f43f af18 	beq.w	8010318 <_strtod_l+0x488>
 80104e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ea:	691a      	ldr	r2, [r3, #16]
 80104ec:	3202      	adds	r2, #2
 80104ee:	f103 010c 	add.w	r1, r3, #12
 80104f2:	0092      	lsls	r2, r2, #2
 80104f4:	300c      	adds	r0, #12
 80104f6:	f000 ff61 	bl	80113bc <memcpy>
 80104fa:	ec49 8b10 	vmov	d0, r8, r9
 80104fe:	aa18      	add	r2, sp, #96	; 0x60
 8010500:	a917      	add	r1, sp, #92	; 0x5c
 8010502:	4620      	mov	r0, r4
 8010504:	f7ff fbd6 	bl	800fcb4 <__d2b>
 8010508:	ec49 8b18 	vmov	d8, r8, r9
 801050c:	9016      	str	r0, [sp, #88]	; 0x58
 801050e:	2800      	cmp	r0, #0
 8010510:	f43f af02 	beq.w	8010318 <_strtod_l+0x488>
 8010514:	2101      	movs	r1, #1
 8010516:	4620      	mov	r0, r4
 8010518:	f7ff f930 	bl	800f77c <__i2b>
 801051c:	4683      	mov	fp, r0
 801051e:	2800      	cmp	r0, #0
 8010520:	f43f aefa 	beq.w	8010318 <_strtod_l+0x488>
 8010524:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010526:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010528:	2e00      	cmp	r6, #0
 801052a:	bfab      	itete	ge
 801052c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801052e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010530:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010532:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010536:	bfac      	ite	ge
 8010538:	eb06 0a03 	addge.w	sl, r6, r3
 801053c:	1b9f      	sublt	r7, r3, r6
 801053e:	9b04      	ldr	r3, [sp, #16]
 8010540:	1af6      	subs	r6, r6, r3
 8010542:	4416      	add	r6, r2
 8010544:	4ba0      	ldr	r3, [pc, #640]	; (80107c8 <_strtod_l+0x938>)
 8010546:	3e01      	subs	r6, #1
 8010548:	429e      	cmp	r6, r3
 801054a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801054e:	f280 80c4 	bge.w	80106da <_strtod_l+0x84a>
 8010552:	1b9b      	subs	r3, r3, r6
 8010554:	2b1f      	cmp	r3, #31
 8010556:	eba2 0203 	sub.w	r2, r2, r3
 801055a:	f04f 0101 	mov.w	r1, #1
 801055e:	f300 80b0 	bgt.w	80106c2 <_strtod_l+0x832>
 8010562:	fa01 f303 	lsl.w	r3, r1, r3
 8010566:	930e      	str	r3, [sp, #56]	; 0x38
 8010568:	2300      	movs	r3, #0
 801056a:	930d      	str	r3, [sp, #52]	; 0x34
 801056c:	eb0a 0602 	add.w	r6, sl, r2
 8010570:	9b04      	ldr	r3, [sp, #16]
 8010572:	45b2      	cmp	sl, r6
 8010574:	4417      	add	r7, r2
 8010576:	441f      	add	r7, r3
 8010578:	4653      	mov	r3, sl
 801057a:	bfa8      	it	ge
 801057c:	4633      	movge	r3, r6
 801057e:	42bb      	cmp	r3, r7
 8010580:	bfa8      	it	ge
 8010582:	463b      	movge	r3, r7
 8010584:	2b00      	cmp	r3, #0
 8010586:	bfc2      	ittt	gt
 8010588:	1af6      	subgt	r6, r6, r3
 801058a:	1aff      	subgt	r7, r7, r3
 801058c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010592:	2b00      	cmp	r3, #0
 8010594:	dd17      	ble.n	80105c6 <_strtod_l+0x736>
 8010596:	4659      	mov	r1, fp
 8010598:	461a      	mov	r2, r3
 801059a:	4620      	mov	r0, r4
 801059c:	f7ff f9ae 	bl	800f8fc <__pow5mult>
 80105a0:	4683      	mov	fp, r0
 80105a2:	2800      	cmp	r0, #0
 80105a4:	f43f aeb8 	beq.w	8010318 <_strtod_l+0x488>
 80105a8:	4601      	mov	r1, r0
 80105aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7ff f8fb 	bl	800f7a8 <__multiply>
 80105b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80105b4:	2800      	cmp	r0, #0
 80105b6:	f43f aeaf 	beq.w	8010318 <_strtod_l+0x488>
 80105ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105bc:	4620      	mov	r0, r4
 80105be:	f7fe ffdd 	bl	800f57c <_Bfree>
 80105c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105c4:	9316      	str	r3, [sp, #88]	; 0x58
 80105c6:	2e00      	cmp	r6, #0
 80105c8:	f300 808c 	bgt.w	80106e4 <_strtod_l+0x854>
 80105cc:	9b08      	ldr	r3, [sp, #32]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	dd08      	ble.n	80105e4 <_strtod_l+0x754>
 80105d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105d4:	9905      	ldr	r1, [sp, #20]
 80105d6:	4620      	mov	r0, r4
 80105d8:	f7ff f990 	bl	800f8fc <__pow5mult>
 80105dc:	9005      	str	r0, [sp, #20]
 80105de:	2800      	cmp	r0, #0
 80105e0:	f43f ae9a 	beq.w	8010318 <_strtod_l+0x488>
 80105e4:	2f00      	cmp	r7, #0
 80105e6:	dd08      	ble.n	80105fa <_strtod_l+0x76a>
 80105e8:	9905      	ldr	r1, [sp, #20]
 80105ea:	463a      	mov	r2, r7
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff f9df 	bl	800f9b0 <__lshift>
 80105f2:	9005      	str	r0, [sp, #20]
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f43f ae8f 	beq.w	8010318 <_strtod_l+0x488>
 80105fa:	f1ba 0f00 	cmp.w	sl, #0
 80105fe:	dd08      	ble.n	8010612 <_strtod_l+0x782>
 8010600:	4659      	mov	r1, fp
 8010602:	4652      	mov	r2, sl
 8010604:	4620      	mov	r0, r4
 8010606:	f7ff f9d3 	bl	800f9b0 <__lshift>
 801060a:	4683      	mov	fp, r0
 801060c:	2800      	cmp	r0, #0
 801060e:	f43f ae83 	beq.w	8010318 <_strtod_l+0x488>
 8010612:	9a05      	ldr	r2, [sp, #20]
 8010614:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010616:	4620      	mov	r0, r4
 8010618:	f7ff fa52 	bl	800fac0 <__mdiff>
 801061c:	4605      	mov	r5, r0
 801061e:	2800      	cmp	r0, #0
 8010620:	f43f ae7a 	beq.w	8010318 <_strtod_l+0x488>
 8010624:	68c3      	ldr	r3, [r0, #12]
 8010626:	930b      	str	r3, [sp, #44]	; 0x2c
 8010628:	2300      	movs	r3, #0
 801062a:	60c3      	str	r3, [r0, #12]
 801062c:	4659      	mov	r1, fp
 801062e:	f7ff fa2b 	bl	800fa88 <__mcmp>
 8010632:	2800      	cmp	r0, #0
 8010634:	da60      	bge.n	80106f8 <_strtod_l+0x868>
 8010636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010638:	ea53 0308 	orrs.w	r3, r3, r8
 801063c:	f040 8084 	bne.w	8010748 <_strtod_l+0x8b8>
 8010640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010644:	2b00      	cmp	r3, #0
 8010646:	d17f      	bne.n	8010748 <_strtod_l+0x8b8>
 8010648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801064c:	0d1b      	lsrs	r3, r3, #20
 801064e:	051b      	lsls	r3, r3, #20
 8010650:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010654:	d978      	bls.n	8010748 <_strtod_l+0x8b8>
 8010656:	696b      	ldr	r3, [r5, #20]
 8010658:	b913      	cbnz	r3, 8010660 <_strtod_l+0x7d0>
 801065a:	692b      	ldr	r3, [r5, #16]
 801065c:	2b01      	cmp	r3, #1
 801065e:	dd73      	ble.n	8010748 <_strtod_l+0x8b8>
 8010660:	4629      	mov	r1, r5
 8010662:	2201      	movs	r2, #1
 8010664:	4620      	mov	r0, r4
 8010666:	f7ff f9a3 	bl	800f9b0 <__lshift>
 801066a:	4659      	mov	r1, fp
 801066c:	4605      	mov	r5, r0
 801066e:	f7ff fa0b 	bl	800fa88 <__mcmp>
 8010672:	2800      	cmp	r0, #0
 8010674:	dd68      	ble.n	8010748 <_strtod_l+0x8b8>
 8010676:	9904      	ldr	r1, [sp, #16]
 8010678:	4a54      	ldr	r2, [pc, #336]	; (80107cc <_strtod_l+0x93c>)
 801067a:	464b      	mov	r3, r9
 801067c:	2900      	cmp	r1, #0
 801067e:	f000 8084 	beq.w	801078a <_strtod_l+0x8fa>
 8010682:	ea02 0109 	and.w	r1, r2, r9
 8010686:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801068a:	dc7e      	bgt.n	801078a <_strtod_l+0x8fa>
 801068c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010690:	f77f aeb3 	ble.w	80103fa <_strtod_l+0x56a>
 8010694:	4b4e      	ldr	r3, [pc, #312]	; (80107d0 <_strtod_l+0x940>)
 8010696:	4640      	mov	r0, r8
 8010698:	4649      	mov	r1, r9
 801069a:	2200      	movs	r2, #0
 801069c:	f7ef ffac 	bl	80005f8 <__aeabi_dmul>
 80106a0:	4b4a      	ldr	r3, [pc, #296]	; (80107cc <_strtod_l+0x93c>)
 80106a2:	400b      	ands	r3, r1
 80106a4:	4680      	mov	r8, r0
 80106a6:	4689      	mov	r9, r1
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	f47f ae3f 	bne.w	801032c <_strtod_l+0x49c>
 80106ae:	2322      	movs	r3, #34	; 0x22
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	e63b      	b.n	801032c <_strtod_l+0x49c>
 80106b4:	f04f 32ff 	mov.w	r2, #4294967295
 80106b8:	fa02 f303 	lsl.w	r3, r2, r3
 80106bc:	ea03 0808 	and.w	r8, r3, r8
 80106c0:	e6e8      	b.n	8010494 <_strtod_l+0x604>
 80106c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80106c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80106ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80106ce:	36e2      	adds	r6, #226	; 0xe2
 80106d0:	fa01 f306 	lsl.w	r3, r1, r6
 80106d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80106d8:	e748      	b.n	801056c <_strtod_l+0x6dc>
 80106da:	2100      	movs	r1, #0
 80106dc:	2301      	movs	r3, #1
 80106de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80106e2:	e743      	b.n	801056c <_strtod_l+0x6dc>
 80106e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80106e6:	4632      	mov	r2, r6
 80106e8:	4620      	mov	r0, r4
 80106ea:	f7ff f961 	bl	800f9b0 <__lshift>
 80106ee:	9016      	str	r0, [sp, #88]	; 0x58
 80106f0:	2800      	cmp	r0, #0
 80106f2:	f47f af6b 	bne.w	80105cc <_strtod_l+0x73c>
 80106f6:	e60f      	b.n	8010318 <_strtod_l+0x488>
 80106f8:	46ca      	mov	sl, r9
 80106fa:	d171      	bne.n	80107e0 <_strtod_l+0x950>
 80106fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010702:	b352      	cbz	r2, 801075a <_strtod_l+0x8ca>
 8010704:	4a33      	ldr	r2, [pc, #204]	; (80107d4 <_strtod_l+0x944>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d12a      	bne.n	8010760 <_strtod_l+0x8d0>
 801070a:	9b04      	ldr	r3, [sp, #16]
 801070c:	4641      	mov	r1, r8
 801070e:	b1fb      	cbz	r3, 8010750 <_strtod_l+0x8c0>
 8010710:	4b2e      	ldr	r3, [pc, #184]	; (80107cc <_strtod_l+0x93c>)
 8010712:	ea09 0303 	and.w	r3, r9, r3
 8010716:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801071a:	f04f 32ff 	mov.w	r2, #4294967295
 801071e:	d81a      	bhi.n	8010756 <_strtod_l+0x8c6>
 8010720:	0d1b      	lsrs	r3, r3, #20
 8010722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010726:	fa02 f303 	lsl.w	r3, r2, r3
 801072a:	4299      	cmp	r1, r3
 801072c:	d118      	bne.n	8010760 <_strtod_l+0x8d0>
 801072e:	4b2a      	ldr	r3, [pc, #168]	; (80107d8 <_strtod_l+0x948>)
 8010730:	459a      	cmp	sl, r3
 8010732:	d102      	bne.n	801073a <_strtod_l+0x8aa>
 8010734:	3101      	adds	r1, #1
 8010736:	f43f adef 	beq.w	8010318 <_strtod_l+0x488>
 801073a:	4b24      	ldr	r3, [pc, #144]	; (80107cc <_strtod_l+0x93c>)
 801073c:	ea0a 0303 	and.w	r3, sl, r3
 8010740:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010744:	f04f 0800 	mov.w	r8, #0
 8010748:	9b04      	ldr	r3, [sp, #16]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1a2      	bne.n	8010694 <_strtod_l+0x804>
 801074e:	e5ed      	b.n	801032c <_strtod_l+0x49c>
 8010750:	f04f 33ff 	mov.w	r3, #4294967295
 8010754:	e7e9      	b.n	801072a <_strtod_l+0x89a>
 8010756:	4613      	mov	r3, r2
 8010758:	e7e7      	b.n	801072a <_strtod_l+0x89a>
 801075a:	ea53 0308 	orrs.w	r3, r3, r8
 801075e:	d08a      	beq.n	8010676 <_strtod_l+0x7e6>
 8010760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010762:	b1e3      	cbz	r3, 801079e <_strtod_l+0x90e>
 8010764:	ea13 0f0a 	tst.w	r3, sl
 8010768:	d0ee      	beq.n	8010748 <_strtod_l+0x8b8>
 801076a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801076c:	9a04      	ldr	r2, [sp, #16]
 801076e:	4640      	mov	r0, r8
 8010770:	4649      	mov	r1, r9
 8010772:	b1c3      	cbz	r3, 80107a6 <_strtod_l+0x916>
 8010774:	f7ff fb6f 	bl	800fe56 <sulp>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	ec51 0b18 	vmov	r0, r1, d8
 8010780:	f7ef fd84 	bl	800028c <__adddf3>
 8010784:	4680      	mov	r8, r0
 8010786:	4689      	mov	r9, r1
 8010788:	e7de      	b.n	8010748 <_strtod_l+0x8b8>
 801078a:	4013      	ands	r3, r2
 801078c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010790:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010794:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010798:	f04f 38ff 	mov.w	r8, #4294967295
 801079c:	e7d4      	b.n	8010748 <_strtod_l+0x8b8>
 801079e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107a0:	ea13 0f08 	tst.w	r3, r8
 80107a4:	e7e0      	b.n	8010768 <_strtod_l+0x8d8>
 80107a6:	f7ff fb56 	bl	800fe56 <sulp>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	ec51 0b18 	vmov	r0, r1, d8
 80107b2:	f7ef fd69 	bl	8000288 <__aeabi_dsub>
 80107b6:	2200      	movs	r2, #0
 80107b8:	2300      	movs	r3, #0
 80107ba:	4680      	mov	r8, r0
 80107bc:	4689      	mov	r9, r1
 80107be:	f7f0 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d0c0      	beq.n	8010748 <_strtod_l+0x8b8>
 80107c6:	e618      	b.n	80103fa <_strtod_l+0x56a>
 80107c8:	fffffc02 	.word	0xfffffc02
 80107cc:	7ff00000 	.word	0x7ff00000
 80107d0:	39500000 	.word	0x39500000
 80107d4:	000fffff 	.word	0x000fffff
 80107d8:	7fefffff 	.word	0x7fefffff
 80107dc:	080130f0 	.word	0x080130f0
 80107e0:	4659      	mov	r1, fp
 80107e2:	4628      	mov	r0, r5
 80107e4:	f7ff fac0 	bl	800fd68 <__ratio>
 80107e8:	ec57 6b10 	vmov	r6, r7, d0
 80107ec:	ee10 0a10 	vmov	r0, s0
 80107f0:	2200      	movs	r2, #0
 80107f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107f6:	4639      	mov	r1, r7
 80107f8:	f7f0 f97a 	bl	8000af0 <__aeabi_dcmple>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d071      	beq.n	80108e4 <_strtod_l+0xa54>
 8010800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010802:	2b00      	cmp	r3, #0
 8010804:	d17c      	bne.n	8010900 <_strtod_l+0xa70>
 8010806:	f1b8 0f00 	cmp.w	r8, #0
 801080a:	d15a      	bne.n	80108c2 <_strtod_l+0xa32>
 801080c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010810:	2b00      	cmp	r3, #0
 8010812:	d15d      	bne.n	80108d0 <_strtod_l+0xa40>
 8010814:	4b90      	ldr	r3, [pc, #576]	; (8010a58 <_strtod_l+0xbc8>)
 8010816:	2200      	movs	r2, #0
 8010818:	4630      	mov	r0, r6
 801081a:	4639      	mov	r1, r7
 801081c:	f7f0 f95e 	bl	8000adc <__aeabi_dcmplt>
 8010820:	2800      	cmp	r0, #0
 8010822:	d15c      	bne.n	80108de <_strtod_l+0xa4e>
 8010824:	4630      	mov	r0, r6
 8010826:	4639      	mov	r1, r7
 8010828:	4b8c      	ldr	r3, [pc, #560]	; (8010a5c <_strtod_l+0xbcc>)
 801082a:	2200      	movs	r2, #0
 801082c:	f7ef fee4 	bl	80005f8 <__aeabi_dmul>
 8010830:	4606      	mov	r6, r0
 8010832:	460f      	mov	r7, r1
 8010834:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010838:	9606      	str	r6, [sp, #24]
 801083a:	9307      	str	r3, [sp, #28]
 801083c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010840:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010844:	4b86      	ldr	r3, [pc, #536]	; (8010a60 <_strtod_l+0xbd0>)
 8010846:	ea0a 0303 	and.w	r3, sl, r3
 801084a:	930d      	str	r3, [sp, #52]	; 0x34
 801084c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801084e:	4b85      	ldr	r3, [pc, #532]	; (8010a64 <_strtod_l+0xbd4>)
 8010850:	429a      	cmp	r2, r3
 8010852:	f040 8090 	bne.w	8010976 <_strtod_l+0xae6>
 8010856:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801085a:	ec49 8b10 	vmov	d0, r8, r9
 801085e:	f7ff f9b9 	bl	800fbd4 <__ulp>
 8010862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010866:	ec51 0b10 	vmov	r0, r1, d0
 801086a:	f7ef fec5 	bl	80005f8 <__aeabi_dmul>
 801086e:	4642      	mov	r2, r8
 8010870:	464b      	mov	r3, r9
 8010872:	f7ef fd0b 	bl	800028c <__adddf3>
 8010876:	460b      	mov	r3, r1
 8010878:	4979      	ldr	r1, [pc, #484]	; (8010a60 <_strtod_l+0xbd0>)
 801087a:	4a7b      	ldr	r2, [pc, #492]	; (8010a68 <_strtod_l+0xbd8>)
 801087c:	4019      	ands	r1, r3
 801087e:	4291      	cmp	r1, r2
 8010880:	4680      	mov	r8, r0
 8010882:	d944      	bls.n	801090e <_strtod_l+0xa7e>
 8010884:	ee18 2a90 	vmov	r2, s17
 8010888:	4b78      	ldr	r3, [pc, #480]	; (8010a6c <_strtod_l+0xbdc>)
 801088a:	429a      	cmp	r2, r3
 801088c:	d104      	bne.n	8010898 <_strtod_l+0xa08>
 801088e:	ee18 3a10 	vmov	r3, s16
 8010892:	3301      	adds	r3, #1
 8010894:	f43f ad40 	beq.w	8010318 <_strtod_l+0x488>
 8010898:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010a6c <_strtod_l+0xbdc>
 801089c:	f04f 38ff 	mov.w	r8, #4294967295
 80108a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80108a2:	4620      	mov	r0, r4
 80108a4:	f7fe fe6a 	bl	800f57c <_Bfree>
 80108a8:	9905      	ldr	r1, [sp, #20]
 80108aa:	4620      	mov	r0, r4
 80108ac:	f7fe fe66 	bl	800f57c <_Bfree>
 80108b0:	4659      	mov	r1, fp
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7fe fe62 	bl	800f57c <_Bfree>
 80108b8:	4629      	mov	r1, r5
 80108ba:	4620      	mov	r0, r4
 80108bc:	f7fe fe5e 	bl	800f57c <_Bfree>
 80108c0:	e609      	b.n	80104d6 <_strtod_l+0x646>
 80108c2:	f1b8 0f01 	cmp.w	r8, #1
 80108c6:	d103      	bne.n	80108d0 <_strtod_l+0xa40>
 80108c8:	f1b9 0f00 	cmp.w	r9, #0
 80108cc:	f43f ad95 	beq.w	80103fa <_strtod_l+0x56a>
 80108d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010a28 <_strtod_l+0xb98>
 80108d4:	4f60      	ldr	r7, [pc, #384]	; (8010a58 <_strtod_l+0xbc8>)
 80108d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108da:	2600      	movs	r6, #0
 80108dc:	e7ae      	b.n	801083c <_strtod_l+0x9ac>
 80108de:	4f5f      	ldr	r7, [pc, #380]	; (8010a5c <_strtod_l+0xbcc>)
 80108e0:	2600      	movs	r6, #0
 80108e2:	e7a7      	b.n	8010834 <_strtod_l+0x9a4>
 80108e4:	4b5d      	ldr	r3, [pc, #372]	; (8010a5c <_strtod_l+0xbcc>)
 80108e6:	4630      	mov	r0, r6
 80108e8:	4639      	mov	r1, r7
 80108ea:	2200      	movs	r2, #0
 80108ec:	f7ef fe84 	bl	80005f8 <__aeabi_dmul>
 80108f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108f2:	4606      	mov	r6, r0
 80108f4:	460f      	mov	r7, r1
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d09c      	beq.n	8010834 <_strtod_l+0x9a4>
 80108fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80108fe:	e79d      	b.n	801083c <_strtod_l+0x9ac>
 8010900:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010a30 <_strtod_l+0xba0>
 8010904:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010908:	ec57 6b17 	vmov	r6, r7, d7
 801090c:	e796      	b.n	801083c <_strtod_l+0x9ac>
 801090e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010912:	9b04      	ldr	r3, [sp, #16]
 8010914:	46ca      	mov	sl, r9
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1c2      	bne.n	80108a0 <_strtod_l+0xa10>
 801091a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801091e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010920:	0d1b      	lsrs	r3, r3, #20
 8010922:	051b      	lsls	r3, r3, #20
 8010924:	429a      	cmp	r2, r3
 8010926:	d1bb      	bne.n	80108a0 <_strtod_l+0xa10>
 8010928:	4630      	mov	r0, r6
 801092a:	4639      	mov	r1, r7
 801092c:	f7f0 f9c4 	bl	8000cb8 <__aeabi_d2lz>
 8010930:	f7ef fe34 	bl	800059c <__aeabi_l2d>
 8010934:	4602      	mov	r2, r0
 8010936:	460b      	mov	r3, r1
 8010938:	4630      	mov	r0, r6
 801093a:	4639      	mov	r1, r7
 801093c:	f7ef fca4 	bl	8000288 <__aeabi_dsub>
 8010940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010946:	ea43 0308 	orr.w	r3, r3, r8
 801094a:	4313      	orrs	r3, r2
 801094c:	4606      	mov	r6, r0
 801094e:	460f      	mov	r7, r1
 8010950:	d054      	beq.n	80109fc <_strtod_l+0xb6c>
 8010952:	a339      	add	r3, pc, #228	; (adr r3, 8010a38 <_strtod_l+0xba8>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	f7f0 f8c0 	bl	8000adc <__aeabi_dcmplt>
 801095c:	2800      	cmp	r0, #0
 801095e:	f47f ace5 	bne.w	801032c <_strtod_l+0x49c>
 8010962:	a337      	add	r3, pc, #220	; (adr r3, 8010a40 <_strtod_l+0xbb0>)
 8010964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010968:	4630      	mov	r0, r6
 801096a:	4639      	mov	r1, r7
 801096c:	f7f0 f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 8010970:	2800      	cmp	r0, #0
 8010972:	d095      	beq.n	80108a0 <_strtod_l+0xa10>
 8010974:	e4da      	b.n	801032c <_strtod_l+0x49c>
 8010976:	9b04      	ldr	r3, [sp, #16]
 8010978:	b333      	cbz	r3, 80109c8 <_strtod_l+0xb38>
 801097a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801097c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010980:	d822      	bhi.n	80109c8 <_strtod_l+0xb38>
 8010982:	a331      	add	r3, pc, #196	; (adr r3, 8010a48 <_strtod_l+0xbb8>)
 8010984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010988:	4630      	mov	r0, r6
 801098a:	4639      	mov	r1, r7
 801098c:	f7f0 f8b0 	bl	8000af0 <__aeabi_dcmple>
 8010990:	b1a0      	cbz	r0, 80109bc <_strtod_l+0xb2c>
 8010992:	4639      	mov	r1, r7
 8010994:	4630      	mov	r0, r6
 8010996:	f7f0 f907 	bl	8000ba8 <__aeabi_d2uiz>
 801099a:	2801      	cmp	r0, #1
 801099c:	bf38      	it	cc
 801099e:	2001      	movcc	r0, #1
 80109a0:	f7ef fdb0 	bl	8000504 <__aeabi_ui2d>
 80109a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109a6:	4606      	mov	r6, r0
 80109a8:	460f      	mov	r7, r1
 80109aa:	bb23      	cbnz	r3, 80109f6 <_strtod_l+0xb66>
 80109ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109b0:	9010      	str	r0, [sp, #64]	; 0x40
 80109b2:	9311      	str	r3, [sp, #68]	; 0x44
 80109b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80109b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80109bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80109c4:	1a9b      	subs	r3, r3, r2
 80109c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80109c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109cc:	eeb0 0a48 	vmov.f32	s0, s16
 80109d0:	eef0 0a68 	vmov.f32	s1, s17
 80109d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80109d8:	f7ff f8fc 	bl	800fbd4 <__ulp>
 80109dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109e0:	ec53 2b10 	vmov	r2, r3, d0
 80109e4:	f7ef fe08 	bl	80005f8 <__aeabi_dmul>
 80109e8:	ec53 2b18 	vmov	r2, r3, d8
 80109ec:	f7ef fc4e 	bl	800028c <__adddf3>
 80109f0:	4680      	mov	r8, r0
 80109f2:	4689      	mov	r9, r1
 80109f4:	e78d      	b.n	8010912 <_strtod_l+0xa82>
 80109f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80109fa:	e7db      	b.n	80109b4 <_strtod_l+0xb24>
 80109fc:	a314      	add	r3, pc, #80	; (adr r3, 8010a50 <_strtod_l+0xbc0>)
 80109fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a02:	f7f0 f86b 	bl	8000adc <__aeabi_dcmplt>
 8010a06:	e7b3      	b.n	8010970 <_strtod_l+0xae0>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a10:	6013      	str	r3, [r2, #0]
 8010a12:	f7ff ba7c 	b.w	800ff0e <_strtod_l+0x7e>
 8010a16:	2a65      	cmp	r2, #101	; 0x65
 8010a18:	f43f ab75 	beq.w	8010106 <_strtod_l+0x276>
 8010a1c:	2a45      	cmp	r2, #69	; 0x45
 8010a1e:	f43f ab72 	beq.w	8010106 <_strtod_l+0x276>
 8010a22:	2301      	movs	r3, #1
 8010a24:	f7ff bbaa 	b.w	801017c <_strtod_l+0x2ec>
 8010a28:	00000000 	.word	0x00000000
 8010a2c:	bff00000 	.word	0xbff00000
 8010a30:	00000000 	.word	0x00000000
 8010a34:	3ff00000 	.word	0x3ff00000
 8010a38:	94a03595 	.word	0x94a03595
 8010a3c:	3fdfffff 	.word	0x3fdfffff
 8010a40:	35afe535 	.word	0x35afe535
 8010a44:	3fe00000 	.word	0x3fe00000
 8010a48:	ffc00000 	.word	0xffc00000
 8010a4c:	41dfffff 	.word	0x41dfffff
 8010a50:	94a03595 	.word	0x94a03595
 8010a54:	3fcfffff 	.word	0x3fcfffff
 8010a58:	3ff00000 	.word	0x3ff00000
 8010a5c:	3fe00000 	.word	0x3fe00000
 8010a60:	7ff00000 	.word	0x7ff00000
 8010a64:	7fe00000 	.word	0x7fe00000
 8010a68:	7c9fffff 	.word	0x7c9fffff
 8010a6c:	7fefffff 	.word	0x7fefffff

08010a70 <_strtod_r>:
 8010a70:	4b01      	ldr	r3, [pc, #4]	; (8010a78 <_strtod_r+0x8>)
 8010a72:	f7ff ba0d 	b.w	800fe90 <_strtod_l>
 8010a76:	bf00      	nop
 8010a78:	20000204 	.word	0x20000204

08010a7c <_strtol_l.constprop.0>:
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a82:	d001      	beq.n	8010a88 <_strtol_l.constprop.0+0xc>
 8010a84:	2b24      	cmp	r3, #36	; 0x24
 8010a86:	d906      	bls.n	8010a96 <_strtol_l.constprop.0+0x1a>
 8010a88:	f7fd fd8a 	bl	800e5a0 <__errno>
 8010a8c:	2316      	movs	r3, #22
 8010a8e:	6003      	str	r3, [r0, #0]
 8010a90:	2000      	movs	r0, #0
 8010a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b7c <_strtol_l.constprop.0+0x100>
 8010a9a:	460d      	mov	r5, r1
 8010a9c:	462e      	mov	r6, r5
 8010a9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010aa2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010aa6:	f017 0708 	ands.w	r7, r7, #8
 8010aaa:	d1f7      	bne.n	8010a9c <_strtol_l.constprop.0+0x20>
 8010aac:	2c2d      	cmp	r4, #45	; 0x2d
 8010aae:	d132      	bne.n	8010b16 <_strtol_l.constprop.0+0x9a>
 8010ab0:	782c      	ldrb	r4, [r5, #0]
 8010ab2:	2701      	movs	r7, #1
 8010ab4:	1cb5      	adds	r5, r6, #2
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d05b      	beq.n	8010b72 <_strtol_l.constprop.0+0xf6>
 8010aba:	2b10      	cmp	r3, #16
 8010abc:	d109      	bne.n	8010ad2 <_strtol_l.constprop.0+0x56>
 8010abe:	2c30      	cmp	r4, #48	; 0x30
 8010ac0:	d107      	bne.n	8010ad2 <_strtol_l.constprop.0+0x56>
 8010ac2:	782c      	ldrb	r4, [r5, #0]
 8010ac4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010ac8:	2c58      	cmp	r4, #88	; 0x58
 8010aca:	d14d      	bne.n	8010b68 <_strtol_l.constprop.0+0xec>
 8010acc:	786c      	ldrb	r4, [r5, #1]
 8010ace:	2310      	movs	r3, #16
 8010ad0:	3502      	adds	r5, #2
 8010ad2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010ad6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ada:	f04f 0e00 	mov.w	lr, #0
 8010ade:	fbb8 f9f3 	udiv	r9, r8, r3
 8010ae2:	4676      	mov	r6, lr
 8010ae4:	fb03 8a19 	mls	sl, r3, r9, r8
 8010ae8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010aec:	f1bc 0f09 	cmp.w	ip, #9
 8010af0:	d816      	bhi.n	8010b20 <_strtol_l.constprop.0+0xa4>
 8010af2:	4664      	mov	r4, ip
 8010af4:	42a3      	cmp	r3, r4
 8010af6:	dd24      	ble.n	8010b42 <_strtol_l.constprop.0+0xc6>
 8010af8:	f1be 3fff 	cmp.w	lr, #4294967295
 8010afc:	d008      	beq.n	8010b10 <_strtol_l.constprop.0+0x94>
 8010afe:	45b1      	cmp	r9, r6
 8010b00:	d31c      	bcc.n	8010b3c <_strtol_l.constprop.0+0xc0>
 8010b02:	d101      	bne.n	8010b08 <_strtol_l.constprop.0+0x8c>
 8010b04:	45a2      	cmp	sl, r4
 8010b06:	db19      	blt.n	8010b3c <_strtol_l.constprop.0+0xc0>
 8010b08:	fb06 4603 	mla	r6, r6, r3, r4
 8010b0c:	f04f 0e01 	mov.w	lr, #1
 8010b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b14:	e7e8      	b.n	8010ae8 <_strtol_l.constprop.0+0x6c>
 8010b16:	2c2b      	cmp	r4, #43	; 0x2b
 8010b18:	bf04      	itt	eq
 8010b1a:	782c      	ldrbeq	r4, [r5, #0]
 8010b1c:	1cb5      	addeq	r5, r6, #2
 8010b1e:	e7ca      	b.n	8010ab6 <_strtol_l.constprop.0+0x3a>
 8010b20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010b24:	f1bc 0f19 	cmp.w	ip, #25
 8010b28:	d801      	bhi.n	8010b2e <_strtol_l.constprop.0+0xb2>
 8010b2a:	3c37      	subs	r4, #55	; 0x37
 8010b2c:	e7e2      	b.n	8010af4 <_strtol_l.constprop.0+0x78>
 8010b2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010b32:	f1bc 0f19 	cmp.w	ip, #25
 8010b36:	d804      	bhi.n	8010b42 <_strtol_l.constprop.0+0xc6>
 8010b38:	3c57      	subs	r4, #87	; 0x57
 8010b3a:	e7db      	b.n	8010af4 <_strtol_l.constprop.0+0x78>
 8010b3c:	f04f 3eff 	mov.w	lr, #4294967295
 8010b40:	e7e6      	b.n	8010b10 <_strtol_l.constprop.0+0x94>
 8010b42:	f1be 3fff 	cmp.w	lr, #4294967295
 8010b46:	d105      	bne.n	8010b54 <_strtol_l.constprop.0+0xd8>
 8010b48:	2322      	movs	r3, #34	; 0x22
 8010b4a:	6003      	str	r3, [r0, #0]
 8010b4c:	4646      	mov	r6, r8
 8010b4e:	b942      	cbnz	r2, 8010b62 <_strtol_l.constprop.0+0xe6>
 8010b50:	4630      	mov	r0, r6
 8010b52:	e79e      	b.n	8010a92 <_strtol_l.constprop.0+0x16>
 8010b54:	b107      	cbz	r7, 8010b58 <_strtol_l.constprop.0+0xdc>
 8010b56:	4276      	negs	r6, r6
 8010b58:	2a00      	cmp	r2, #0
 8010b5a:	d0f9      	beq.n	8010b50 <_strtol_l.constprop.0+0xd4>
 8010b5c:	f1be 0f00 	cmp.w	lr, #0
 8010b60:	d000      	beq.n	8010b64 <_strtol_l.constprop.0+0xe8>
 8010b62:	1e69      	subs	r1, r5, #1
 8010b64:	6011      	str	r1, [r2, #0]
 8010b66:	e7f3      	b.n	8010b50 <_strtol_l.constprop.0+0xd4>
 8010b68:	2430      	movs	r4, #48	; 0x30
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d1b1      	bne.n	8010ad2 <_strtol_l.constprop.0+0x56>
 8010b6e:	2308      	movs	r3, #8
 8010b70:	e7af      	b.n	8010ad2 <_strtol_l.constprop.0+0x56>
 8010b72:	2c30      	cmp	r4, #48	; 0x30
 8010b74:	d0a5      	beq.n	8010ac2 <_strtol_l.constprop.0+0x46>
 8010b76:	230a      	movs	r3, #10
 8010b78:	e7ab      	b.n	8010ad2 <_strtol_l.constprop.0+0x56>
 8010b7a:	bf00      	nop
 8010b7c:	08013119 	.word	0x08013119

08010b80 <_strtol_r>:
 8010b80:	f7ff bf7c 	b.w	8010a7c <_strtol_l.constprop.0>

08010b84 <__ssputs_r>:
 8010b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b88:	688e      	ldr	r6, [r1, #8]
 8010b8a:	461f      	mov	r7, r3
 8010b8c:	42be      	cmp	r6, r7
 8010b8e:	680b      	ldr	r3, [r1, #0]
 8010b90:	4682      	mov	sl, r0
 8010b92:	460c      	mov	r4, r1
 8010b94:	4690      	mov	r8, r2
 8010b96:	d82c      	bhi.n	8010bf2 <__ssputs_r+0x6e>
 8010b98:	898a      	ldrh	r2, [r1, #12]
 8010b9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b9e:	d026      	beq.n	8010bee <__ssputs_r+0x6a>
 8010ba0:	6965      	ldr	r5, [r4, #20]
 8010ba2:	6909      	ldr	r1, [r1, #16]
 8010ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ba8:	eba3 0901 	sub.w	r9, r3, r1
 8010bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bb0:	1c7b      	adds	r3, r7, #1
 8010bb2:	444b      	add	r3, r9
 8010bb4:	106d      	asrs	r5, r5, #1
 8010bb6:	429d      	cmp	r5, r3
 8010bb8:	bf38      	it	cc
 8010bba:	461d      	movcc	r5, r3
 8010bbc:	0553      	lsls	r3, r2, #21
 8010bbe:	d527      	bpl.n	8010c10 <__ssputs_r+0x8c>
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	f7fe fc0f 	bl	800f3e4 <_malloc_r>
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	b360      	cbz	r0, 8010c24 <__ssputs_r+0xa0>
 8010bca:	6921      	ldr	r1, [r4, #16]
 8010bcc:	464a      	mov	r2, r9
 8010bce:	f000 fbf5 	bl	80113bc <memcpy>
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	6126      	str	r6, [r4, #16]
 8010be0:	6165      	str	r5, [r4, #20]
 8010be2:	444e      	add	r6, r9
 8010be4:	eba5 0509 	sub.w	r5, r5, r9
 8010be8:	6026      	str	r6, [r4, #0]
 8010bea:	60a5      	str	r5, [r4, #8]
 8010bec:	463e      	mov	r6, r7
 8010bee:	42be      	cmp	r6, r7
 8010bf0:	d900      	bls.n	8010bf4 <__ssputs_r+0x70>
 8010bf2:	463e      	mov	r6, r7
 8010bf4:	6820      	ldr	r0, [r4, #0]
 8010bf6:	4632      	mov	r2, r6
 8010bf8:	4641      	mov	r1, r8
 8010bfa:	f000 fba3 	bl	8011344 <memmove>
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	1b9b      	subs	r3, r3, r6
 8010c02:	60a3      	str	r3, [r4, #8]
 8010c04:	6823      	ldr	r3, [r4, #0]
 8010c06:	4433      	add	r3, r6
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c10:	462a      	mov	r2, r5
 8010c12:	f000 ff86 	bl	8011b22 <_realloc_r>
 8010c16:	4606      	mov	r6, r0
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d1e0      	bne.n	8010bde <__ssputs_r+0x5a>
 8010c1c:	6921      	ldr	r1, [r4, #16]
 8010c1e:	4650      	mov	r0, sl
 8010c20:	f7fe fb6c 	bl	800f2fc <_free_r>
 8010c24:	230c      	movs	r3, #12
 8010c26:	f8ca 3000 	str.w	r3, [sl]
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	f04f 30ff 	mov.w	r0, #4294967295
 8010c36:	e7e9      	b.n	8010c0c <__ssputs_r+0x88>

08010c38 <_svfiprintf_r>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	4698      	mov	r8, r3
 8010c3e:	898b      	ldrh	r3, [r1, #12]
 8010c40:	061b      	lsls	r3, r3, #24
 8010c42:	b09d      	sub	sp, #116	; 0x74
 8010c44:	4607      	mov	r7, r0
 8010c46:	460d      	mov	r5, r1
 8010c48:	4614      	mov	r4, r2
 8010c4a:	d50e      	bpl.n	8010c6a <_svfiprintf_r+0x32>
 8010c4c:	690b      	ldr	r3, [r1, #16]
 8010c4e:	b963      	cbnz	r3, 8010c6a <_svfiprintf_r+0x32>
 8010c50:	2140      	movs	r1, #64	; 0x40
 8010c52:	f7fe fbc7 	bl	800f3e4 <_malloc_r>
 8010c56:	6028      	str	r0, [r5, #0]
 8010c58:	6128      	str	r0, [r5, #16]
 8010c5a:	b920      	cbnz	r0, 8010c66 <_svfiprintf_r+0x2e>
 8010c5c:	230c      	movs	r3, #12
 8010c5e:	603b      	str	r3, [r7, #0]
 8010c60:	f04f 30ff 	mov.w	r0, #4294967295
 8010c64:	e0d0      	b.n	8010e08 <_svfiprintf_r+0x1d0>
 8010c66:	2340      	movs	r3, #64	; 0x40
 8010c68:	616b      	str	r3, [r5, #20]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c6e:	2320      	movs	r3, #32
 8010c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c78:	2330      	movs	r3, #48	; 0x30
 8010c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010e20 <_svfiprintf_r+0x1e8>
 8010c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c82:	f04f 0901 	mov.w	r9, #1
 8010c86:	4623      	mov	r3, r4
 8010c88:	469a      	mov	sl, r3
 8010c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c8e:	b10a      	cbz	r2, 8010c94 <_svfiprintf_r+0x5c>
 8010c90:	2a25      	cmp	r2, #37	; 0x25
 8010c92:	d1f9      	bne.n	8010c88 <_svfiprintf_r+0x50>
 8010c94:	ebba 0b04 	subs.w	fp, sl, r4
 8010c98:	d00b      	beq.n	8010cb2 <_svfiprintf_r+0x7a>
 8010c9a:	465b      	mov	r3, fp
 8010c9c:	4622      	mov	r2, r4
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff ff6f 	bl	8010b84 <__ssputs_r>
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	f000 80a9 	beq.w	8010dfe <_svfiprintf_r+0x1c6>
 8010cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cae:	445a      	add	r2, fp
 8010cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f000 80a1 	beq.w	8010dfe <_svfiprintf_r+0x1c6>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8010cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cc6:	f10a 0a01 	add.w	sl, sl, #1
 8010cca:	9304      	str	r3, [sp, #16]
 8010ccc:	9307      	str	r3, [sp, #28]
 8010cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8010cd4:	4654      	mov	r4, sl
 8010cd6:	2205      	movs	r2, #5
 8010cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cdc:	4850      	ldr	r0, [pc, #320]	; (8010e20 <_svfiprintf_r+0x1e8>)
 8010cde:	f7ef fa77 	bl	80001d0 <memchr>
 8010ce2:	9a04      	ldr	r2, [sp, #16]
 8010ce4:	b9d8      	cbnz	r0, 8010d1e <_svfiprintf_r+0xe6>
 8010ce6:	06d0      	lsls	r0, r2, #27
 8010ce8:	bf44      	itt	mi
 8010cea:	2320      	movmi	r3, #32
 8010cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cf0:	0711      	lsls	r1, r2, #28
 8010cf2:	bf44      	itt	mi
 8010cf4:	232b      	movmi	r3, #43	; 0x2b
 8010cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8010cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8010d00:	d015      	beq.n	8010d2e <_svfiprintf_r+0xf6>
 8010d02:	9a07      	ldr	r2, [sp, #28]
 8010d04:	4654      	mov	r4, sl
 8010d06:	2000      	movs	r0, #0
 8010d08:	f04f 0c0a 	mov.w	ip, #10
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d12:	3b30      	subs	r3, #48	; 0x30
 8010d14:	2b09      	cmp	r3, #9
 8010d16:	d94d      	bls.n	8010db4 <_svfiprintf_r+0x17c>
 8010d18:	b1b0      	cbz	r0, 8010d48 <_svfiprintf_r+0x110>
 8010d1a:	9207      	str	r2, [sp, #28]
 8010d1c:	e014      	b.n	8010d48 <_svfiprintf_r+0x110>
 8010d1e:	eba0 0308 	sub.w	r3, r0, r8
 8010d22:	fa09 f303 	lsl.w	r3, r9, r3
 8010d26:	4313      	orrs	r3, r2
 8010d28:	9304      	str	r3, [sp, #16]
 8010d2a:	46a2      	mov	sl, r4
 8010d2c:	e7d2      	b.n	8010cd4 <_svfiprintf_r+0x9c>
 8010d2e:	9b03      	ldr	r3, [sp, #12]
 8010d30:	1d19      	adds	r1, r3, #4
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	9103      	str	r1, [sp, #12]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bfbb      	ittet	lt
 8010d3a:	425b      	neglt	r3, r3
 8010d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010d40:	9307      	strge	r3, [sp, #28]
 8010d42:	9307      	strlt	r3, [sp, #28]
 8010d44:	bfb8      	it	lt
 8010d46:	9204      	strlt	r2, [sp, #16]
 8010d48:	7823      	ldrb	r3, [r4, #0]
 8010d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8010d4c:	d10c      	bne.n	8010d68 <_svfiprintf_r+0x130>
 8010d4e:	7863      	ldrb	r3, [r4, #1]
 8010d50:	2b2a      	cmp	r3, #42	; 0x2a
 8010d52:	d134      	bne.n	8010dbe <_svfiprintf_r+0x186>
 8010d54:	9b03      	ldr	r3, [sp, #12]
 8010d56:	1d1a      	adds	r2, r3, #4
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	9203      	str	r2, [sp, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	bfb8      	it	lt
 8010d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d64:	3402      	adds	r4, #2
 8010d66:	9305      	str	r3, [sp, #20]
 8010d68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e30 <_svfiprintf_r+0x1f8>
 8010d6c:	7821      	ldrb	r1, [r4, #0]
 8010d6e:	2203      	movs	r2, #3
 8010d70:	4650      	mov	r0, sl
 8010d72:	f7ef fa2d 	bl	80001d0 <memchr>
 8010d76:	b138      	cbz	r0, 8010d88 <_svfiprintf_r+0x150>
 8010d78:	9b04      	ldr	r3, [sp, #16]
 8010d7a:	eba0 000a 	sub.w	r0, r0, sl
 8010d7e:	2240      	movs	r2, #64	; 0x40
 8010d80:	4082      	lsls	r2, r0
 8010d82:	4313      	orrs	r3, r2
 8010d84:	3401      	adds	r4, #1
 8010d86:	9304      	str	r3, [sp, #16]
 8010d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d8c:	4825      	ldr	r0, [pc, #148]	; (8010e24 <_svfiprintf_r+0x1ec>)
 8010d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d92:	2206      	movs	r2, #6
 8010d94:	f7ef fa1c 	bl	80001d0 <memchr>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d038      	beq.n	8010e0e <_svfiprintf_r+0x1d6>
 8010d9c:	4b22      	ldr	r3, [pc, #136]	; (8010e28 <_svfiprintf_r+0x1f0>)
 8010d9e:	bb1b      	cbnz	r3, 8010de8 <_svfiprintf_r+0x1b0>
 8010da0:	9b03      	ldr	r3, [sp, #12]
 8010da2:	3307      	adds	r3, #7
 8010da4:	f023 0307 	bic.w	r3, r3, #7
 8010da8:	3308      	adds	r3, #8
 8010daa:	9303      	str	r3, [sp, #12]
 8010dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dae:	4433      	add	r3, r6
 8010db0:	9309      	str	r3, [sp, #36]	; 0x24
 8010db2:	e768      	b.n	8010c86 <_svfiprintf_r+0x4e>
 8010db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010db8:	460c      	mov	r4, r1
 8010dba:	2001      	movs	r0, #1
 8010dbc:	e7a6      	b.n	8010d0c <_svfiprintf_r+0xd4>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	3401      	adds	r4, #1
 8010dc2:	9305      	str	r3, [sp, #20]
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	f04f 0c0a 	mov.w	ip, #10
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dd0:	3a30      	subs	r2, #48	; 0x30
 8010dd2:	2a09      	cmp	r2, #9
 8010dd4:	d903      	bls.n	8010dde <_svfiprintf_r+0x1a6>
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d0c6      	beq.n	8010d68 <_svfiprintf_r+0x130>
 8010dda:	9105      	str	r1, [sp, #20]
 8010ddc:	e7c4      	b.n	8010d68 <_svfiprintf_r+0x130>
 8010dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8010de2:	4604      	mov	r4, r0
 8010de4:	2301      	movs	r3, #1
 8010de6:	e7f0      	b.n	8010dca <_svfiprintf_r+0x192>
 8010de8:	ab03      	add	r3, sp, #12
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	462a      	mov	r2, r5
 8010dee:	4b0f      	ldr	r3, [pc, #60]	; (8010e2c <_svfiprintf_r+0x1f4>)
 8010df0:	a904      	add	r1, sp, #16
 8010df2:	4638      	mov	r0, r7
 8010df4:	f7fc fc40 	bl	800d678 <_printf_float>
 8010df8:	1c42      	adds	r2, r0, #1
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	d1d6      	bne.n	8010dac <_svfiprintf_r+0x174>
 8010dfe:	89ab      	ldrh	r3, [r5, #12]
 8010e00:	065b      	lsls	r3, r3, #25
 8010e02:	f53f af2d 	bmi.w	8010c60 <_svfiprintf_r+0x28>
 8010e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e08:	b01d      	add	sp, #116	; 0x74
 8010e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0e:	ab03      	add	r3, sp, #12
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	462a      	mov	r2, r5
 8010e14:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <_svfiprintf_r+0x1f4>)
 8010e16:	a904      	add	r1, sp, #16
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f7fc fed1 	bl	800dbc0 <_printf_i>
 8010e1e:	e7eb      	b.n	8010df8 <_svfiprintf_r+0x1c0>
 8010e20:	08013219 	.word	0x08013219
 8010e24:	08013223 	.word	0x08013223
 8010e28:	0800d679 	.word	0x0800d679
 8010e2c:	08010b85 	.word	0x08010b85
 8010e30:	0801321f 	.word	0x0801321f

08010e34 <__sfputc_r>:
 8010e34:	6893      	ldr	r3, [r2, #8]
 8010e36:	3b01      	subs	r3, #1
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	b410      	push	{r4}
 8010e3c:	6093      	str	r3, [r2, #8]
 8010e3e:	da08      	bge.n	8010e52 <__sfputc_r+0x1e>
 8010e40:	6994      	ldr	r4, [r2, #24]
 8010e42:	42a3      	cmp	r3, r4
 8010e44:	db01      	blt.n	8010e4a <__sfputc_r+0x16>
 8010e46:	290a      	cmp	r1, #10
 8010e48:	d103      	bne.n	8010e52 <__sfputc_r+0x1e>
 8010e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e4e:	f000 b9e3 	b.w	8011218 <__swbuf_r>
 8010e52:	6813      	ldr	r3, [r2, #0]
 8010e54:	1c58      	adds	r0, r3, #1
 8010e56:	6010      	str	r0, [r2, #0]
 8010e58:	7019      	strb	r1, [r3, #0]
 8010e5a:	4608      	mov	r0, r1
 8010e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <__sfputs_r>:
 8010e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e64:	4606      	mov	r6, r0
 8010e66:	460f      	mov	r7, r1
 8010e68:	4614      	mov	r4, r2
 8010e6a:	18d5      	adds	r5, r2, r3
 8010e6c:	42ac      	cmp	r4, r5
 8010e6e:	d101      	bne.n	8010e74 <__sfputs_r+0x12>
 8010e70:	2000      	movs	r0, #0
 8010e72:	e007      	b.n	8010e84 <__sfputs_r+0x22>
 8010e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e78:	463a      	mov	r2, r7
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	f7ff ffda 	bl	8010e34 <__sfputc_r>
 8010e80:	1c43      	adds	r3, r0, #1
 8010e82:	d1f3      	bne.n	8010e6c <__sfputs_r+0xa>
 8010e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e88 <_vfiprintf_r>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	460d      	mov	r5, r1
 8010e8e:	b09d      	sub	sp, #116	; 0x74
 8010e90:	4614      	mov	r4, r2
 8010e92:	4698      	mov	r8, r3
 8010e94:	4606      	mov	r6, r0
 8010e96:	b118      	cbz	r0, 8010ea0 <_vfiprintf_r+0x18>
 8010e98:	6a03      	ldr	r3, [r0, #32]
 8010e9a:	b90b      	cbnz	r3, 8010ea0 <_vfiprintf_r+0x18>
 8010e9c:	f7fd fa4e 	bl	800e33c <__sinit>
 8010ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ea2:	07d9      	lsls	r1, r3, #31
 8010ea4:	d405      	bmi.n	8010eb2 <_vfiprintf_r+0x2a>
 8010ea6:	89ab      	ldrh	r3, [r5, #12]
 8010ea8:	059a      	lsls	r2, r3, #22
 8010eaa:	d402      	bmi.n	8010eb2 <_vfiprintf_r+0x2a>
 8010eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eae:	f7fd fba2 	bl	800e5f6 <__retarget_lock_acquire_recursive>
 8010eb2:	89ab      	ldrh	r3, [r5, #12]
 8010eb4:	071b      	lsls	r3, r3, #28
 8010eb6:	d501      	bpl.n	8010ebc <_vfiprintf_r+0x34>
 8010eb8:	692b      	ldr	r3, [r5, #16]
 8010eba:	b99b      	cbnz	r3, 8010ee4 <_vfiprintf_r+0x5c>
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f000 f9e8 	bl	8011294 <__swsetup_r>
 8010ec4:	b170      	cbz	r0, 8010ee4 <_vfiprintf_r+0x5c>
 8010ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ec8:	07dc      	lsls	r4, r3, #31
 8010eca:	d504      	bpl.n	8010ed6 <_vfiprintf_r+0x4e>
 8010ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed0:	b01d      	add	sp, #116	; 0x74
 8010ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed6:	89ab      	ldrh	r3, [r5, #12]
 8010ed8:	0598      	lsls	r0, r3, #22
 8010eda:	d4f7      	bmi.n	8010ecc <_vfiprintf_r+0x44>
 8010edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ede:	f7fd fb8b 	bl	800e5f8 <__retarget_lock_release_recursive>
 8010ee2:	e7f3      	b.n	8010ecc <_vfiprintf_r+0x44>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee8:	2320      	movs	r3, #32
 8010eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ef2:	2330      	movs	r3, #48	; 0x30
 8010ef4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80110a8 <_vfiprintf_r+0x220>
 8010ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010efc:	f04f 0901 	mov.w	r9, #1
 8010f00:	4623      	mov	r3, r4
 8010f02:	469a      	mov	sl, r3
 8010f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f08:	b10a      	cbz	r2, 8010f0e <_vfiprintf_r+0x86>
 8010f0a:	2a25      	cmp	r2, #37	; 0x25
 8010f0c:	d1f9      	bne.n	8010f02 <_vfiprintf_r+0x7a>
 8010f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8010f12:	d00b      	beq.n	8010f2c <_vfiprintf_r+0xa4>
 8010f14:	465b      	mov	r3, fp
 8010f16:	4622      	mov	r2, r4
 8010f18:	4629      	mov	r1, r5
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7ff ffa1 	bl	8010e62 <__sfputs_r>
 8010f20:	3001      	adds	r0, #1
 8010f22:	f000 80a9 	beq.w	8011078 <_vfiprintf_r+0x1f0>
 8010f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f28:	445a      	add	r2, fp
 8010f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 80a1 	beq.w	8011078 <_vfiprintf_r+0x1f0>
 8010f36:	2300      	movs	r3, #0
 8010f38:	f04f 32ff 	mov.w	r2, #4294967295
 8010f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f40:	f10a 0a01 	add.w	sl, sl, #1
 8010f44:	9304      	str	r3, [sp, #16]
 8010f46:	9307      	str	r3, [sp, #28]
 8010f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8010f4e:	4654      	mov	r4, sl
 8010f50:	2205      	movs	r2, #5
 8010f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f56:	4854      	ldr	r0, [pc, #336]	; (80110a8 <_vfiprintf_r+0x220>)
 8010f58:	f7ef f93a 	bl	80001d0 <memchr>
 8010f5c:	9a04      	ldr	r2, [sp, #16]
 8010f5e:	b9d8      	cbnz	r0, 8010f98 <_vfiprintf_r+0x110>
 8010f60:	06d1      	lsls	r1, r2, #27
 8010f62:	bf44      	itt	mi
 8010f64:	2320      	movmi	r3, #32
 8010f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f6a:	0713      	lsls	r3, r2, #28
 8010f6c:	bf44      	itt	mi
 8010f6e:	232b      	movmi	r3, #43	; 0x2b
 8010f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f74:	f89a 3000 	ldrb.w	r3, [sl]
 8010f78:	2b2a      	cmp	r3, #42	; 0x2a
 8010f7a:	d015      	beq.n	8010fa8 <_vfiprintf_r+0x120>
 8010f7c:	9a07      	ldr	r2, [sp, #28]
 8010f7e:	4654      	mov	r4, sl
 8010f80:	2000      	movs	r0, #0
 8010f82:	f04f 0c0a 	mov.w	ip, #10
 8010f86:	4621      	mov	r1, r4
 8010f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f8c:	3b30      	subs	r3, #48	; 0x30
 8010f8e:	2b09      	cmp	r3, #9
 8010f90:	d94d      	bls.n	801102e <_vfiprintf_r+0x1a6>
 8010f92:	b1b0      	cbz	r0, 8010fc2 <_vfiprintf_r+0x13a>
 8010f94:	9207      	str	r2, [sp, #28]
 8010f96:	e014      	b.n	8010fc2 <_vfiprintf_r+0x13a>
 8010f98:	eba0 0308 	sub.w	r3, r0, r8
 8010f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	9304      	str	r3, [sp, #16]
 8010fa4:	46a2      	mov	sl, r4
 8010fa6:	e7d2      	b.n	8010f4e <_vfiprintf_r+0xc6>
 8010fa8:	9b03      	ldr	r3, [sp, #12]
 8010faa:	1d19      	adds	r1, r3, #4
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	9103      	str	r1, [sp, #12]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	bfbb      	ittet	lt
 8010fb4:	425b      	neglt	r3, r3
 8010fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8010fba:	9307      	strge	r3, [sp, #28]
 8010fbc:	9307      	strlt	r3, [sp, #28]
 8010fbe:	bfb8      	it	lt
 8010fc0:	9204      	strlt	r2, [sp, #16]
 8010fc2:	7823      	ldrb	r3, [r4, #0]
 8010fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8010fc6:	d10c      	bne.n	8010fe2 <_vfiprintf_r+0x15a>
 8010fc8:	7863      	ldrb	r3, [r4, #1]
 8010fca:	2b2a      	cmp	r3, #42	; 0x2a
 8010fcc:	d134      	bne.n	8011038 <_vfiprintf_r+0x1b0>
 8010fce:	9b03      	ldr	r3, [sp, #12]
 8010fd0:	1d1a      	adds	r2, r3, #4
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	9203      	str	r2, [sp, #12]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	bfb8      	it	lt
 8010fda:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fde:	3402      	adds	r4, #2
 8010fe0:	9305      	str	r3, [sp, #20]
 8010fe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80110b8 <_vfiprintf_r+0x230>
 8010fe6:	7821      	ldrb	r1, [r4, #0]
 8010fe8:	2203      	movs	r2, #3
 8010fea:	4650      	mov	r0, sl
 8010fec:	f7ef f8f0 	bl	80001d0 <memchr>
 8010ff0:	b138      	cbz	r0, 8011002 <_vfiprintf_r+0x17a>
 8010ff2:	9b04      	ldr	r3, [sp, #16]
 8010ff4:	eba0 000a 	sub.w	r0, r0, sl
 8010ff8:	2240      	movs	r2, #64	; 0x40
 8010ffa:	4082      	lsls	r2, r0
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	3401      	adds	r4, #1
 8011000:	9304      	str	r3, [sp, #16]
 8011002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011006:	4829      	ldr	r0, [pc, #164]	; (80110ac <_vfiprintf_r+0x224>)
 8011008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801100c:	2206      	movs	r2, #6
 801100e:	f7ef f8df 	bl	80001d0 <memchr>
 8011012:	2800      	cmp	r0, #0
 8011014:	d03f      	beq.n	8011096 <_vfiprintf_r+0x20e>
 8011016:	4b26      	ldr	r3, [pc, #152]	; (80110b0 <_vfiprintf_r+0x228>)
 8011018:	bb1b      	cbnz	r3, 8011062 <_vfiprintf_r+0x1da>
 801101a:	9b03      	ldr	r3, [sp, #12]
 801101c:	3307      	adds	r3, #7
 801101e:	f023 0307 	bic.w	r3, r3, #7
 8011022:	3308      	adds	r3, #8
 8011024:	9303      	str	r3, [sp, #12]
 8011026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011028:	443b      	add	r3, r7
 801102a:	9309      	str	r3, [sp, #36]	; 0x24
 801102c:	e768      	b.n	8010f00 <_vfiprintf_r+0x78>
 801102e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011032:	460c      	mov	r4, r1
 8011034:	2001      	movs	r0, #1
 8011036:	e7a6      	b.n	8010f86 <_vfiprintf_r+0xfe>
 8011038:	2300      	movs	r3, #0
 801103a:	3401      	adds	r4, #1
 801103c:	9305      	str	r3, [sp, #20]
 801103e:	4619      	mov	r1, r3
 8011040:	f04f 0c0a 	mov.w	ip, #10
 8011044:	4620      	mov	r0, r4
 8011046:	f810 2b01 	ldrb.w	r2, [r0], #1
 801104a:	3a30      	subs	r2, #48	; 0x30
 801104c:	2a09      	cmp	r2, #9
 801104e:	d903      	bls.n	8011058 <_vfiprintf_r+0x1d0>
 8011050:	2b00      	cmp	r3, #0
 8011052:	d0c6      	beq.n	8010fe2 <_vfiprintf_r+0x15a>
 8011054:	9105      	str	r1, [sp, #20]
 8011056:	e7c4      	b.n	8010fe2 <_vfiprintf_r+0x15a>
 8011058:	fb0c 2101 	mla	r1, ip, r1, r2
 801105c:	4604      	mov	r4, r0
 801105e:	2301      	movs	r3, #1
 8011060:	e7f0      	b.n	8011044 <_vfiprintf_r+0x1bc>
 8011062:	ab03      	add	r3, sp, #12
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	462a      	mov	r2, r5
 8011068:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <_vfiprintf_r+0x22c>)
 801106a:	a904      	add	r1, sp, #16
 801106c:	4630      	mov	r0, r6
 801106e:	f7fc fb03 	bl	800d678 <_printf_float>
 8011072:	4607      	mov	r7, r0
 8011074:	1c78      	adds	r0, r7, #1
 8011076:	d1d6      	bne.n	8011026 <_vfiprintf_r+0x19e>
 8011078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801107a:	07d9      	lsls	r1, r3, #31
 801107c:	d405      	bmi.n	801108a <_vfiprintf_r+0x202>
 801107e:	89ab      	ldrh	r3, [r5, #12]
 8011080:	059a      	lsls	r2, r3, #22
 8011082:	d402      	bmi.n	801108a <_vfiprintf_r+0x202>
 8011084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011086:	f7fd fab7 	bl	800e5f8 <__retarget_lock_release_recursive>
 801108a:	89ab      	ldrh	r3, [r5, #12]
 801108c:	065b      	lsls	r3, r3, #25
 801108e:	f53f af1d 	bmi.w	8010ecc <_vfiprintf_r+0x44>
 8011092:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011094:	e71c      	b.n	8010ed0 <_vfiprintf_r+0x48>
 8011096:	ab03      	add	r3, sp, #12
 8011098:	9300      	str	r3, [sp, #0]
 801109a:	462a      	mov	r2, r5
 801109c:	4b05      	ldr	r3, [pc, #20]	; (80110b4 <_vfiprintf_r+0x22c>)
 801109e:	a904      	add	r1, sp, #16
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7fc fd8d 	bl	800dbc0 <_printf_i>
 80110a6:	e7e4      	b.n	8011072 <_vfiprintf_r+0x1ea>
 80110a8:	08013219 	.word	0x08013219
 80110ac:	08013223 	.word	0x08013223
 80110b0:	0800d679 	.word	0x0800d679
 80110b4:	08010e63 	.word	0x08010e63
 80110b8:	0801321f 	.word	0x0801321f

080110bc <__sflush_r>:
 80110bc:	898a      	ldrh	r2, [r1, #12]
 80110be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c2:	4605      	mov	r5, r0
 80110c4:	0710      	lsls	r0, r2, #28
 80110c6:	460c      	mov	r4, r1
 80110c8:	d458      	bmi.n	801117c <__sflush_r+0xc0>
 80110ca:	684b      	ldr	r3, [r1, #4]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	dc05      	bgt.n	80110dc <__sflush_r+0x20>
 80110d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	dc02      	bgt.n	80110dc <__sflush_r+0x20>
 80110d6:	2000      	movs	r0, #0
 80110d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110de:	2e00      	cmp	r6, #0
 80110e0:	d0f9      	beq.n	80110d6 <__sflush_r+0x1a>
 80110e2:	2300      	movs	r3, #0
 80110e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80110e8:	682f      	ldr	r7, [r5, #0]
 80110ea:	6a21      	ldr	r1, [r4, #32]
 80110ec:	602b      	str	r3, [r5, #0]
 80110ee:	d032      	beq.n	8011156 <__sflush_r+0x9a>
 80110f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	075a      	lsls	r2, r3, #29
 80110f6:	d505      	bpl.n	8011104 <__sflush_r+0x48>
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	1ac0      	subs	r0, r0, r3
 80110fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110fe:	b10b      	cbz	r3, 8011104 <__sflush_r+0x48>
 8011100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011102:	1ac0      	subs	r0, r0, r3
 8011104:	2300      	movs	r3, #0
 8011106:	4602      	mov	r2, r0
 8011108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801110a:	6a21      	ldr	r1, [r4, #32]
 801110c:	4628      	mov	r0, r5
 801110e:	47b0      	blx	r6
 8011110:	1c43      	adds	r3, r0, #1
 8011112:	89a3      	ldrh	r3, [r4, #12]
 8011114:	d106      	bne.n	8011124 <__sflush_r+0x68>
 8011116:	6829      	ldr	r1, [r5, #0]
 8011118:	291d      	cmp	r1, #29
 801111a:	d82b      	bhi.n	8011174 <__sflush_r+0xb8>
 801111c:	4a29      	ldr	r2, [pc, #164]	; (80111c4 <__sflush_r+0x108>)
 801111e:	410a      	asrs	r2, r1
 8011120:	07d6      	lsls	r6, r2, #31
 8011122:	d427      	bmi.n	8011174 <__sflush_r+0xb8>
 8011124:	2200      	movs	r2, #0
 8011126:	6062      	str	r2, [r4, #4]
 8011128:	04d9      	lsls	r1, r3, #19
 801112a:	6922      	ldr	r2, [r4, #16]
 801112c:	6022      	str	r2, [r4, #0]
 801112e:	d504      	bpl.n	801113a <__sflush_r+0x7e>
 8011130:	1c42      	adds	r2, r0, #1
 8011132:	d101      	bne.n	8011138 <__sflush_r+0x7c>
 8011134:	682b      	ldr	r3, [r5, #0]
 8011136:	b903      	cbnz	r3, 801113a <__sflush_r+0x7e>
 8011138:	6560      	str	r0, [r4, #84]	; 0x54
 801113a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801113c:	602f      	str	r7, [r5, #0]
 801113e:	2900      	cmp	r1, #0
 8011140:	d0c9      	beq.n	80110d6 <__sflush_r+0x1a>
 8011142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011146:	4299      	cmp	r1, r3
 8011148:	d002      	beq.n	8011150 <__sflush_r+0x94>
 801114a:	4628      	mov	r0, r5
 801114c:	f7fe f8d6 	bl	800f2fc <_free_r>
 8011150:	2000      	movs	r0, #0
 8011152:	6360      	str	r0, [r4, #52]	; 0x34
 8011154:	e7c0      	b.n	80110d8 <__sflush_r+0x1c>
 8011156:	2301      	movs	r3, #1
 8011158:	4628      	mov	r0, r5
 801115a:	47b0      	blx	r6
 801115c:	1c41      	adds	r1, r0, #1
 801115e:	d1c8      	bne.n	80110f2 <__sflush_r+0x36>
 8011160:	682b      	ldr	r3, [r5, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d0c5      	beq.n	80110f2 <__sflush_r+0x36>
 8011166:	2b1d      	cmp	r3, #29
 8011168:	d001      	beq.n	801116e <__sflush_r+0xb2>
 801116a:	2b16      	cmp	r3, #22
 801116c:	d101      	bne.n	8011172 <__sflush_r+0xb6>
 801116e:	602f      	str	r7, [r5, #0]
 8011170:	e7b1      	b.n	80110d6 <__sflush_r+0x1a>
 8011172:	89a3      	ldrh	r3, [r4, #12]
 8011174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011178:	81a3      	strh	r3, [r4, #12]
 801117a:	e7ad      	b.n	80110d8 <__sflush_r+0x1c>
 801117c:	690f      	ldr	r7, [r1, #16]
 801117e:	2f00      	cmp	r7, #0
 8011180:	d0a9      	beq.n	80110d6 <__sflush_r+0x1a>
 8011182:	0793      	lsls	r3, r2, #30
 8011184:	680e      	ldr	r6, [r1, #0]
 8011186:	bf08      	it	eq
 8011188:	694b      	ldreq	r3, [r1, #20]
 801118a:	600f      	str	r7, [r1, #0]
 801118c:	bf18      	it	ne
 801118e:	2300      	movne	r3, #0
 8011190:	eba6 0807 	sub.w	r8, r6, r7
 8011194:	608b      	str	r3, [r1, #8]
 8011196:	f1b8 0f00 	cmp.w	r8, #0
 801119a:	dd9c      	ble.n	80110d6 <__sflush_r+0x1a>
 801119c:	6a21      	ldr	r1, [r4, #32]
 801119e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111a0:	4643      	mov	r3, r8
 80111a2:	463a      	mov	r2, r7
 80111a4:	4628      	mov	r0, r5
 80111a6:	47b0      	blx	r6
 80111a8:	2800      	cmp	r0, #0
 80111aa:	dc06      	bgt.n	80111ba <__sflush_r+0xfe>
 80111ac:	89a3      	ldrh	r3, [r4, #12]
 80111ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	f04f 30ff 	mov.w	r0, #4294967295
 80111b8:	e78e      	b.n	80110d8 <__sflush_r+0x1c>
 80111ba:	4407      	add	r7, r0
 80111bc:	eba8 0800 	sub.w	r8, r8, r0
 80111c0:	e7e9      	b.n	8011196 <__sflush_r+0xda>
 80111c2:	bf00      	nop
 80111c4:	dfbffffe 	.word	0xdfbffffe

080111c8 <_fflush_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	690b      	ldr	r3, [r1, #16]
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	b913      	cbnz	r3, 80111d8 <_fflush_r+0x10>
 80111d2:	2500      	movs	r5, #0
 80111d4:	4628      	mov	r0, r5
 80111d6:	bd38      	pop	{r3, r4, r5, pc}
 80111d8:	b118      	cbz	r0, 80111e2 <_fflush_r+0x1a>
 80111da:	6a03      	ldr	r3, [r0, #32]
 80111dc:	b90b      	cbnz	r3, 80111e2 <_fflush_r+0x1a>
 80111de:	f7fd f8ad 	bl	800e33c <__sinit>
 80111e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0f3      	beq.n	80111d2 <_fflush_r+0xa>
 80111ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80111ec:	07d0      	lsls	r0, r2, #31
 80111ee:	d404      	bmi.n	80111fa <_fflush_r+0x32>
 80111f0:	0599      	lsls	r1, r3, #22
 80111f2:	d402      	bmi.n	80111fa <_fflush_r+0x32>
 80111f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111f6:	f7fd f9fe 	bl	800e5f6 <__retarget_lock_acquire_recursive>
 80111fa:	4628      	mov	r0, r5
 80111fc:	4621      	mov	r1, r4
 80111fe:	f7ff ff5d 	bl	80110bc <__sflush_r>
 8011202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011204:	07da      	lsls	r2, r3, #31
 8011206:	4605      	mov	r5, r0
 8011208:	d4e4      	bmi.n	80111d4 <_fflush_r+0xc>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	059b      	lsls	r3, r3, #22
 801120e:	d4e1      	bmi.n	80111d4 <_fflush_r+0xc>
 8011210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011212:	f7fd f9f1 	bl	800e5f8 <__retarget_lock_release_recursive>
 8011216:	e7dd      	b.n	80111d4 <_fflush_r+0xc>

08011218 <__swbuf_r>:
 8011218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801121a:	460e      	mov	r6, r1
 801121c:	4614      	mov	r4, r2
 801121e:	4605      	mov	r5, r0
 8011220:	b118      	cbz	r0, 801122a <__swbuf_r+0x12>
 8011222:	6a03      	ldr	r3, [r0, #32]
 8011224:	b90b      	cbnz	r3, 801122a <__swbuf_r+0x12>
 8011226:	f7fd f889 	bl	800e33c <__sinit>
 801122a:	69a3      	ldr	r3, [r4, #24]
 801122c:	60a3      	str	r3, [r4, #8]
 801122e:	89a3      	ldrh	r3, [r4, #12]
 8011230:	071a      	lsls	r2, r3, #28
 8011232:	d525      	bpl.n	8011280 <__swbuf_r+0x68>
 8011234:	6923      	ldr	r3, [r4, #16]
 8011236:	b31b      	cbz	r3, 8011280 <__swbuf_r+0x68>
 8011238:	6823      	ldr	r3, [r4, #0]
 801123a:	6922      	ldr	r2, [r4, #16]
 801123c:	1a98      	subs	r0, r3, r2
 801123e:	6963      	ldr	r3, [r4, #20]
 8011240:	b2f6      	uxtb	r6, r6
 8011242:	4283      	cmp	r3, r0
 8011244:	4637      	mov	r7, r6
 8011246:	dc04      	bgt.n	8011252 <__swbuf_r+0x3a>
 8011248:	4621      	mov	r1, r4
 801124a:	4628      	mov	r0, r5
 801124c:	f7ff ffbc 	bl	80111c8 <_fflush_r>
 8011250:	b9e0      	cbnz	r0, 801128c <__swbuf_r+0x74>
 8011252:	68a3      	ldr	r3, [r4, #8]
 8011254:	3b01      	subs	r3, #1
 8011256:	60a3      	str	r3, [r4, #8]
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	1c5a      	adds	r2, r3, #1
 801125c:	6022      	str	r2, [r4, #0]
 801125e:	701e      	strb	r6, [r3, #0]
 8011260:	6962      	ldr	r2, [r4, #20]
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	429a      	cmp	r2, r3
 8011266:	d004      	beq.n	8011272 <__swbuf_r+0x5a>
 8011268:	89a3      	ldrh	r3, [r4, #12]
 801126a:	07db      	lsls	r3, r3, #31
 801126c:	d506      	bpl.n	801127c <__swbuf_r+0x64>
 801126e:	2e0a      	cmp	r6, #10
 8011270:	d104      	bne.n	801127c <__swbuf_r+0x64>
 8011272:	4621      	mov	r1, r4
 8011274:	4628      	mov	r0, r5
 8011276:	f7ff ffa7 	bl	80111c8 <_fflush_r>
 801127a:	b938      	cbnz	r0, 801128c <__swbuf_r+0x74>
 801127c:	4638      	mov	r0, r7
 801127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011280:	4621      	mov	r1, r4
 8011282:	4628      	mov	r0, r5
 8011284:	f000 f806 	bl	8011294 <__swsetup_r>
 8011288:	2800      	cmp	r0, #0
 801128a:	d0d5      	beq.n	8011238 <__swbuf_r+0x20>
 801128c:	f04f 37ff 	mov.w	r7, #4294967295
 8011290:	e7f4      	b.n	801127c <__swbuf_r+0x64>
	...

08011294 <__swsetup_r>:
 8011294:	b538      	push	{r3, r4, r5, lr}
 8011296:	4b2a      	ldr	r3, [pc, #168]	; (8011340 <__swsetup_r+0xac>)
 8011298:	4605      	mov	r5, r0
 801129a:	6818      	ldr	r0, [r3, #0]
 801129c:	460c      	mov	r4, r1
 801129e:	b118      	cbz	r0, 80112a8 <__swsetup_r+0x14>
 80112a0:	6a03      	ldr	r3, [r0, #32]
 80112a2:	b90b      	cbnz	r3, 80112a8 <__swsetup_r+0x14>
 80112a4:	f7fd f84a 	bl	800e33c <__sinit>
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112ae:	0718      	lsls	r0, r3, #28
 80112b0:	d422      	bmi.n	80112f8 <__swsetup_r+0x64>
 80112b2:	06d9      	lsls	r1, r3, #27
 80112b4:	d407      	bmi.n	80112c6 <__swsetup_r+0x32>
 80112b6:	2309      	movs	r3, #9
 80112b8:	602b      	str	r3, [r5, #0]
 80112ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112be:	81a3      	strh	r3, [r4, #12]
 80112c0:	f04f 30ff 	mov.w	r0, #4294967295
 80112c4:	e034      	b.n	8011330 <__swsetup_r+0x9c>
 80112c6:	0758      	lsls	r0, r3, #29
 80112c8:	d512      	bpl.n	80112f0 <__swsetup_r+0x5c>
 80112ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112cc:	b141      	cbz	r1, 80112e0 <__swsetup_r+0x4c>
 80112ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112d2:	4299      	cmp	r1, r3
 80112d4:	d002      	beq.n	80112dc <__swsetup_r+0x48>
 80112d6:	4628      	mov	r0, r5
 80112d8:	f7fe f810 	bl	800f2fc <_free_r>
 80112dc:	2300      	movs	r3, #0
 80112de:	6363      	str	r3, [r4, #52]	; 0x34
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112e6:	81a3      	strh	r3, [r4, #12]
 80112e8:	2300      	movs	r3, #0
 80112ea:	6063      	str	r3, [r4, #4]
 80112ec:	6923      	ldr	r3, [r4, #16]
 80112ee:	6023      	str	r3, [r4, #0]
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	f043 0308 	orr.w	r3, r3, #8
 80112f6:	81a3      	strh	r3, [r4, #12]
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	b94b      	cbnz	r3, 8011310 <__swsetup_r+0x7c>
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011306:	d003      	beq.n	8011310 <__swsetup_r+0x7c>
 8011308:	4621      	mov	r1, r4
 801130a:	4628      	mov	r0, r5
 801130c:	f000 fc7e 	bl	8011c0c <__smakebuf_r>
 8011310:	89a0      	ldrh	r0, [r4, #12]
 8011312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011316:	f010 0301 	ands.w	r3, r0, #1
 801131a:	d00a      	beq.n	8011332 <__swsetup_r+0x9e>
 801131c:	2300      	movs	r3, #0
 801131e:	60a3      	str	r3, [r4, #8]
 8011320:	6963      	ldr	r3, [r4, #20]
 8011322:	425b      	negs	r3, r3
 8011324:	61a3      	str	r3, [r4, #24]
 8011326:	6923      	ldr	r3, [r4, #16]
 8011328:	b943      	cbnz	r3, 801133c <__swsetup_r+0xa8>
 801132a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801132e:	d1c4      	bne.n	80112ba <__swsetup_r+0x26>
 8011330:	bd38      	pop	{r3, r4, r5, pc}
 8011332:	0781      	lsls	r1, r0, #30
 8011334:	bf58      	it	pl
 8011336:	6963      	ldrpl	r3, [r4, #20]
 8011338:	60a3      	str	r3, [r4, #8]
 801133a:	e7f4      	b.n	8011326 <__swsetup_r+0x92>
 801133c:	2000      	movs	r0, #0
 801133e:	e7f7      	b.n	8011330 <__swsetup_r+0x9c>
 8011340:	20000200 	.word	0x20000200

08011344 <memmove>:
 8011344:	4288      	cmp	r0, r1
 8011346:	b510      	push	{r4, lr}
 8011348:	eb01 0402 	add.w	r4, r1, r2
 801134c:	d902      	bls.n	8011354 <memmove+0x10>
 801134e:	4284      	cmp	r4, r0
 8011350:	4623      	mov	r3, r4
 8011352:	d807      	bhi.n	8011364 <memmove+0x20>
 8011354:	1e43      	subs	r3, r0, #1
 8011356:	42a1      	cmp	r1, r4
 8011358:	d008      	beq.n	801136c <memmove+0x28>
 801135a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801135e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011362:	e7f8      	b.n	8011356 <memmove+0x12>
 8011364:	4402      	add	r2, r0
 8011366:	4601      	mov	r1, r0
 8011368:	428a      	cmp	r2, r1
 801136a:	d100      	bne.n	801136e <memmove+0x2a>
 801136c:	bd10      	pop	{r4, pc}
 801136e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011376:	e7f7      	b.n	8011368 <memmove+0x24>

08011378 <strncmp>:
 8011378:	b510      	push	{r4, lr}
 801137a:	b16a      	cbz	r2, 8011398 <strncmp+0x20>
 801137c:	3901      	subs	r1, #1
 801137e:	1884      	adds	r4, r0, r2
 8011380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011384:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011388:	429a      	cmp	r2, r3
 801138a:	d103      	bne.n	8011394 <strncmp+0x1c>
 801138c:	42a0      	cmp	r0, r4
 801138e:	d001      	beq.n	8011394 <strncmp+0x1c>
 8011390:	2a00      	cmp	r2, #0
 8011392:	d1f5      	bne.n	8011380 <strncmp+0x8>
 8011394:	1ad0      	subs	r0, r2, r3
 8011396:	bd10      	pop	{r4, pc}
 8011398:	4610      	mov	r0, r2
 801139a:	e7fc      	b.n	8011396 <strncmp+0x1e>

0801139c <_sbrk_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	4d06      	ldr	r5, [pc, #24]	; (80113b8 <_sbrk_r+0x1c>)
 80113a0:	2300      	movs	r3, #0
 80113a2:	4604      	mov	r4, r0
 80113a4:	4608      	mov	r0, r1
 80113a6:	602b      	str	r3, [r5, #0]
 80113a8:	f7f0 fe4e 	bl	8002048 <_sbrk>
 80113ac:	1c43      	adds	r3, r0, #1
 80113ae:	d102      	bne.n	80113b6 <_sbrk_r+0x1a>
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	b103      	cbz	r3, 80113b6 <_sbrk_r+0x1a>
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	bd38      	pop	{r3, r4, r5, pc}
 80113b8:	200009d4 	.word	0x200009d4

080113bc <memcpy>:
 80113bc:	440a      	add	r2, r1
 80113be:	4291      	cmp	r1, r2
 80113c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80113c4:	d100      	bne.n	80113c8 <memcpy+0xc>
 80113c6:	4770      	bx	lr
 80113c8:	b510      	push	{r4, lr}
 80113ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113d2:	4291      	cmp	r1, r2
 80113d4:	d1f9      	bne.n	80113ca <memcpy+0xe>
 80113d6:	bd10      	pop	{r4, pc}

080113d8 <nan>:
 80113d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80113e0 <nan+0x8>
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	00000000 	.word	0x00000000
 80113e4:	7ff80000 	.word	0x7ff80000

080113e8 <__assert_func>:
 80113e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113ea:	4614      	mov	r4, r2
 80113ec:	461a      	mov	r2, r3
 80113ee:	4b09      	ldr	r3, [pc, #36]	; (8011414 <__assert_func+0x2c>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4605      	mov	r5, r0
 80113f4:	68d8      	ldr	r0, [r3, #12]
 80113f6:	b14c      	cbz	r4, 801140c <__assert_func+0x24>
 80113f8:	4b07      	ldr	r3, [pc, #28]	; (8011418 <__assert_func+0x30>)
 80113fa:	9100      	str	r1, [sp, #0]
 80113fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011400:	4906      	ldr	r1, [pc, #24]	; (801141c <__assert_func+0x34>)
 8011402:	462b      	mov	r3, r5
 8011404:	f000 fbca 	bl	8011b9c <fiprintf>
 8011408:	f000 fc5e 	bl	8011cc8 <abort>
 801140c:	4b04      	ldr	r3, [pc, #16]	; (8011420 <__assert_func+0x38>)
 801140e:	461c      	mov	r4, r3
 8011410:	e7f3      	b.n	80113fa <__assert_func+0x12>
 8011412:	bf00      	nop
 8011414:	20000200 	.word	0x20000200
 8011418:	08013232 	.word	0x08013232
 801141c:	0801323f 	.word	0x0801323f
 8011420:	0801326d 	.word	0x0801326d

08011424 <_calloc_r>:
 8011424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011426:	fba1 2402 	umull	r2, r4, r1, r2
 801142a:	b94c      	cbnz	r4, 8011440 <_calloc_r+0x1c>
 801142c:	4611      	mov	r1, r2
 801142e:	9201      	str	r2, [sp, #4]
 8011430:	f7fd ffd8 	bl	800f3e4 <_malloc_r>
 8011434:	9a01      	ldr	r2, [sp, #4]
 8011436:	4605      	mov	r5, r0
 8011438:	b930      	cbnz	r0, 8011448 <_calloc_r+0x24>
 801143a:	4628      	mov	r0, r5
 801143c:	b003      	add	sp, #12
 801143e:	bd30      	pop	{r4, r5, pc}
 8011440:	220c      	movs	r2, #12
 8011442:	6002      	str	r2, [r0, #0]
 8011444:	2500      	movs	r5, #0
 8011446:	e7f8      	b.n	801143a <_calloc_r+0x16>
 8011448:	4621      	mov	r1, r4
 801144a:	f7fd f856 	bl	800e4fa <memset>
 801144e:	e7f4      	b.n	801143a <_calloc_r+0x16>

08011450 <rshift>:
 8011450:	6903      	ldr	r3, [r0, #16]
 8011452:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801145a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801145e:	f100 0414 	add.w	r4, r0, #20
 8011462:	dd45      	ble.n	80114f0 <rshift+0xa0>
 8011464:	f011 011f 	ands.w	r1, r1, #31
 8011468:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801146c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011470:	d10c      	bne.n	801148c <rshift+0x3c>
 8011472:	f100 0710 	add.w	r7, r0, #16
 8011476:	4629      	mov	r1, r5
 8011478:	42b1      	cmp	r1, r6
 801147a:	d334      	bcc.n	80114e6 <rshift+0x96>
 801147c:	1a9b      	subs	r3, r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	1eea      	subs	r2, r5, #3
 8011482:	4296      	cmp	r6, r2
 8011484:	bf38      	it	cc
 8011486:	2300      	movcc	r3, #0
 8011488:	4423      	add	r3, r4
 801148a:	e015      	b.n	80114b8 <rshift+0x68>
 801148c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011490:	f1c1 0820 	rsb	r8, r1, #32
 8011494:	40cf      	lsrs	r7, r1
 8011496:	f105 0e04 	add.w	lr, r5, #4
 801149a:	46a1      	mov	r9, r4
 801149c:	4576      	cmp	r6, lr
 801149e:	46f4      	mov	ip, lr
 80114a0:	d815      	bhi.n	80114ce <rshift+0x7e>
 80114a2:	1a9a      	subs	r2, r3, r2
 80114a4:	0092      	lsls	r2, r2, #2
 80114a6:	3a04      	subs	r2, #4
 80114a8:	3501      	adds	r5, #1
 80114aa:	42ae      	cmp	r6, r5
 80114ac:	bf38      	it	cc
 80114ae:	2200      	movcc	r2, #0
 80114b0:	18a3      	adds	r3, r4, r2
 80114b2:	50a7      	str	r7, [r4, r2]
 80114b4:	b107      	cbz	r7, 80114b8 <rshift+0x68>
 80114b6:	3304      	adds	r3, #4
 80114b8:	1b1a      	subs	r2, r3, r4
 80114ba:	42a3      	cmp	r3, r4
 80114bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80114c0:	bf08      	it	eq
 80114c2:	2300      	moveq	r3, #0
 80114c4:	6102      	str	r2, [r0, #16]
 80114c6:	bf08      	it	eq
 80114c8:	6143      	streq	r3, [r0, #20]
 80114ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ce:	f8dc c000 	ldr.w	ip, [ip]
 80114d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80114d6:	ea4c 0707 	orr.w	r7, ip, r7
 80114da:	f849 7b04 	str.w	r7, [r9], #4
 80114de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114e2:	40cf      	lsrs	r7, r1
 80114e4:	e7da      	b.n	801149c <rshift+0x4c>
 80114e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80114ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80114ee:	e7c3      	b.n	8011478 <rshift+0x28>
 80114f0:	4623      	mov	r3, r4
 80114f2:	e7e1      	b.n	80114b8 <rshift+0x68>

080114f4 <__hexdig_fun>:
 80114f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80114f8:	2b09      	cmp	r3, #9
 80114fa:	d802      	bhi.n	8011502 <__hexdig_fun+0xe>
 80114fc:	3820      	subs	r0, #32
 80114fe:	b2c0      	uxtb	r0, r0
 8011500:	4770      	bx	lr
 8011502:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011506:	2b05      	cmp	r3, #5
 8011508:	d801      	bhi.n	801150e <__hexdig_fun+0x1a>
 801150a:	3847      	subs	r0, #71	; 0x47
 801150c:	e7f7      	b.n	80114fe <__hexdig_fun+0xa>
 801150e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011512:	2b05      	cmp	r3, #5
 8011514:	d801      	bhi.n	801151a <__hexdig_fun+0x26>
 8011516:	3827      	subs	r0, #39	; 0x27
 8011518:	e7f1      	b.n	80114fe <__hexdig_fun+0xa>
 801151a:	2000      	movs	r0, #0
 801151c:	4770      	bx	lr
	...

08011520 <__gethex>:
 8011520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011524:	4617      	mov	r7, r2
 8011526:	680a      	ldr	r2, [r1, #0]
 8011528:	b085      	sub	sp, #20
 801152a:	f102 0b02 	add.w	fp, r2, #2
 801152e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011532:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011536:	4681      	mov	r9, r0
 8011538:	468a      	mov	sl, r1
 801153a:	9302      	str	r3, [sp, #8]
 801153c:	32fe      	adds	r2, #254	; 0xfe
 801153e:	eb02 030b 	add.w	r3, r2, fp
 8011542:	46d8      	mov	r8, fp
 8011544:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	2830      	cmp	r0, #48	; 0x30
 801154c:	d0f7      	beq.n	801153e <__gethex+0x1e>
 801154e:	f7ff ffd1 	bl	80114f4 <__hexdig_fun>
 8011552:	4604      	mov	r4, r0
 8011554:	2800      	cmp	r0, #0
 8011556:	d138      	bne.n	80115ca <__gethex+0xaa>
 8011558:	49a7      	ldr	r1, [pc, #668]	; (80117f8 <__gethex+0x2d8>)
 801155a:	2201      	movs	r2, #1
 801155c:	4640      	mov	r0, r8
 801155e:	f7ff ff0b 	bl	8011378 <strncmp>
 8011562:	4606      	mov	r6, r0
 8011564:	2800      	cmp	r0, #0
 8011566:	d169      	bne.n	801163c <__gethex+0x11c>
 8011568:	f898 0001 	ldrb.w	r0, [r8, #1]
 801156c:	465d      	mov	r5, fp
 801156e:	f7ff ffc1 	bl	80114f4 <__hexdig_fun>
 8011572:	2800      	cmp	r0, #0
 8011574:	d064      	beq.n	8011640 <__gethex+0x120>
 8011576:	465a      	mov	r2, fp
 8011578:	7810      	ldrb	r0, [r2, #0]
 801157a:	2830      	cmp	r0, #48	; 0x30
 801157c:	4690      	mov	r8, r2
 801157e:	f102 0201 	add.w	r2, r2, #1
 8011582:	d0f9      	beq.n	8011578 <__gethex+0x58>
 8011584:	f7ff ffb6 	bl	80114f4 <__hexdig_fun>
 8011588:	2301      	movs	r3, #1
 801158a:	fab0 f480 	clz	r4, r0
 801158e:	0964      	lsrs	r4, r4, #5
 8011590:	465e      	mov	r6, fp
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	4642      	mov	r2, r8
 8011596:	4615      	mov	r5, r2
 8011598:	3201      	adds	r2, #1
 801159a:	7828      	ldrb	r0, [r5, #0]
 801159c:	f7ff ffaa 	bl	80114f4 <__hexdig_fun>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d1f8      	bne.n	8011596 <__gethex+0x76>
 80115a4:	4994      	ldr	r1, [pc, #592]	; (80117f8 <__gethex+0x2d8>)
 80115a6:	2201      	movs	r2, #1
 80115a8:	4628      	mov	r0, r5
 80115aa:	f7ff fee5 	bl	8011378 <strncmp>
 80115ae:	b978      	cbnz	r0, 80115d0 <__gethex+0xb0>
 80115b0:	b946      	cbnz	r6, 80115c4 <__gethex+0xa4>
 80115b2:	1c6e      	adds	r6, r5, #1
 80115b4:	4632      	mov	r2, r6
 80115b6:	4615      	mov	r5, r2
 80115b8:	3201      	adds	r2, #1
 80115ba:	7828      	ldrb	r0, [r5, #0]
 80115bc:	f7ff ff9a 	bl	80114f4 <__hexdig_fun>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1f8      	bne.n	80115b6 <__gethex+0x96>
 80115c4:	1b73      	subs	r3, r6, r5
 80115c6:	009e      	lsls	r6, r3, #2
 80115c8:	e004      	b.n	80115d4 <__gethex+0xb4>
 80115ca:	2400      	movs	r4, #0
 80115cc:	4626      	mov	r6, r4
 80115ce:	e7e1      	b.n	8011594 <__gethex+0x74>
 80115d0:	2e00      	cmp	r6, #0
 80115d2:	d1f7      	bne.n	80115c4 <__gethex+0xa4>
 80115d4:	782b      	ldrb	r3, [r5, #0]
 80115d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80115da:	2b50      	cmp	r3, #80	; 0x50
 80115dc:	d13d      	bne.n	801165a <__gethex+0x13a>
 80115de:	786b      	ldrb	r3, [r5, #1]
 80115e0:	2b2b      	cmp	r3, #43	; 0x2b
 80115e2:	d02f      	beq.n	8011644 <__gethex+0x124>
 80115e4:	2b2d      	cmp	r3, #45	; 0x2d
 80115e6:	d031      	beq.n	801164c <__gethex+0x12c>
 80115e8:	1c69      	adds	r1, r5, #1
 80115ea:	f04f 0b00 	mov.w	fp, #0
 80115ee:	7808      	ldrb	r0, [r1, #0]
 80115f0:	f7ff ff80 	bl	80114f4 <__hexdig_fun>
 80115f4:	1e42      	subs	r2, r0, #1
 80115f6:	b2d2      	uxtb	r2, r2
 80115f8:	2a18      	cmp	r2, #24
 80115fa:	d82e      	bhi.n	801165a <__gethex+0x13a>
 80115fc:	f1a0 0210 	sub.w	r2, r0, #16
 8011600:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011604:	f7ff ff76 	bl	80114f4 <__hexdig_fun>
 8011608:	f100 3cff 	add.w	ip, r0, #4294967295
 801160c:	fa5f fc8c 	uxtb.w	ip, ip
 8011610:	f1bc 0f18 	cmp.w	ip, #24
 8011614:	d91d      	bls.n	8011652 <__gethex+0x132>
 8011616:	f1bb 0f00 	cmp.w	fp, #0
 801161a:	d000      	beq.n	801161e <__gethex+0xfe>
 801161c:	4252      	negs	r2, r2
 801161e:	4416      	add	r6, r2
 8011620:	f8ca 1000 	str.w	r1, [sl]
 8011624:	b1dc      	cbz	r4, 801165e <__gethex+0x13e>
 8011626:	9b01      	ldr	r3, [sp, #4]
 8011628:	2b00      	cmp	r3, #0
 801162a:	bf14      	ite	ne
 801162c:	f04f 0800 	movne.w	r8, #0
 8011630:	f04f 0806 	moveq.w	r8, #6
 8011634:	4640      	mov	r0, r8
 8011636:	b005      	add	sp, #20
 8011638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163c:	4645      	mov	r5, r8
 801163e:	4626      	mov	r6, r4
 8011640:	2401      	movs	r4, #1
 8011642:	e7c7      	b.n	80115d4 <__gethex+0xb4>
 8011644:	f04f 0b00 	mov.w	fp, #0
 8011648:	1ca9      	adds	r1, r5, #2
 801164a:	e7d0      	b.n	80115ee <__gethex+0xce>
 801164c:	f04f 0b01 	mov.w	fp, #1
 8011650:	e7fa      	b.n	8011648 <__gethex+0x128>
 8011652:	230a      	movs	r3, #10
 8011654:	fb03 0002 	mla	r0, r3, r2, r0
 8011658:	e7d0      	b.n	80115fc <__gethex+0xdc>
 801165a:	4629      	mov	r1, r5
 801165c:	e7e0      	b.n	8011620 <__gethex+0x100>
 801165e:	eba5 0308 	sub.w	r3, r5, r8
 8011662:	3b01      	subs	r3, #1
 8011664:	4621      	mov	r1, r4
 8011666:	2b07      	cmp	r3, #7
 8011668:	dc0a      	bgt.n	8011680 <__gethex+0x160>
 801166a:	4648      	mov	r0, r9
 801166c:	f7fd ff46 	bl	800f4fc <_Balloc>
 8011670:	4604      	mov	r4, r0
 8011672:	b940      	cbnz	r0, 8011686 <__gethex+0x166>
 8011674:	4b61      	ldr	r3, [pc, #388]	; (80117fc <__gethex+0x2dc>)
 8011676:	4602      	mov	r2, r0
 8011678:	21e4      	movs	r1, #228	; 0xe4
 801167a:	4861      	ldr	r0, [pc, #388]	; (8011800 <__gethex+0x2e0>)
 801167c:	f7ff feb4 	bl	80113e8 <__assert_func>
 8011680:	3101      	adds	r1, #1
 8011682:	105b      	asrs	r3, r3, #1
 8011684:	e7ef      	b.n	8011666 <__gethex+0x146>
 8011686:	f100 0a14 	add.w	sl, r0, #20
 801168a:	2300      	movs	r3, #0
 801168c:	495a      	ldr	r1, [pc, #360]	; (80117f8 <__gethex+0x2d8>)
 801168e:	f8cd a004 	str.w	sl, [sp, #4]
 8011692:	469b      	mov	fp, r3
 8011694:	45a8      	cmp	r8, r5
 8011696:	d342      	bcc.n	801171e <__gethex+0x1fe>
 8011698:	9801      	ldr	r0, [sp, #4]
 801169a:	f840 bb04 	str.w	fp, [r0], #4
 801169e:	eba0 000a 	sub.w	r0, r0, sl
 80116a2:	1080      	asrs	r0, r0, #2
 80116a4:	6120      	str	r0, [r4, #16]
 80116a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80116aa:	4658      	mov	r0, fp
 80116ac:	f7fe f818 	bl	800f6e0 <__hi0bits>
 80116b0:	683d      	ldr	r5, [r7, #0]
 80116b2:	eba8 0000 	sub.w	r0, r8, r0
 80116b6:	42a8      	cmp	r0, r5
 80116b8:	dd59      	ble.n	801176e <__gethex+0x24e>
 80116ba:	eba0 0805 	sub.w	r8, r0, r5
 80116be:	4641      	mov	r1, r8
 80116c0:	4620      	mov	r0, r4
 80116c2:	f7fe fba7 	bl	800fe14 <__any_on>
 80116c6:	4683      	mov	fp, r0
 80116c8:	b1b8      	cbz	r0, 80116fa <__gethex+0x1da>
 80116ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80116ce:	1159      	asrs	r1, r3, #5
 80116d0:	f003 021f 	and.w	r2, r3, #31
 80116d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80116d8:	f04f 0b01 	mov.w	fp, #1
 80116dc:	fa0b f202 	lsl.w	r2, fp, r2
 80116e0:	420a      	tst	r2, r1
 80116e2:	d00a      	beq.n	80116fa <__gethex+0x1da>
 80116e4:	455b      	cmp	r3, fp
 80116e6:	dd06      	ble.n	80116f6 <__gethex+0x1d6>
 80116e8:	f1a8 0102 	sub.w	r1, r8, #2
 80116ec:	4620      	mov	r0, r4
 80116ee:	f7fe fb91 	bl	800fe14 <__any_on>
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d138      	bne.n	8011768 <__gethex+0x248>
 80116f6:	f04f 0b02 	mov.w	fp, #2
 80116fa:	4641      	mov	r1, r8
 80116fc:	4620      	mov	r0, r4
 80116fe:	f7ff fea7 	bl	8011450 <rshift>
 8011702:	4446      	add	r6, r8
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	42b3      	cmp	r3, r6
 8011708:	da41      	bge.n	801178e <__gethex+0x26e>
 801170a:	4621      	mov	r1, r4
 801170c:	4648      	mov	r0, r9
 801170e:	f7fd ff35 	bl	800f57c <_Bfree>
 8011712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011714:	2300      	movs	r3, #0
 8011716:	6013      	str	r3, [r2, #0]
 8011718:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801171c:	e78a      	b.n	8011634 <__gethex+0x114>
 801171e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011722:	2a2e      	cmp	r2, #46	; 0x2e
 8011724:	d014      	beq.n	8011750 <__gethex+0x230>
 8011726:	2b20      	cmp	r3, #32
 8011728:	d106      	bne.n	8011738 <__gethex+0x218>
 801172a:	9b01      	ldr	r3, [sp, #4]
 801172c:	f843 bb04 	str.w	fp, [r3], #4
 8011730:	f04f 0b00 	mov.w	fp, #0
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	465b      	mov	r3, fp
 8011738:	7828      	ldrb	r0, [r5, #0]
 801173a:	9303      	str	r3, [sp, #12]
 801173c:	f7ff feda 	bl	80114f4 <__hexdig_fun>
 8011740:	9b03      	ldr	r3, [sp, #12]
 8011742:	f000 000f 	and.w	r0, r0, #15
 8011746:	4098      	lsls	r0, r3
 8011748:	ea4b 0b00 	orr.w	fp, fp, r0
 801174c:	3304      	adds	r3, #4
 801174e:	e7a1      	b.n	8011694 <__gethex+0x174>
 8011750:	45a8      	cmp	r8, r5
 8011752:	d8e8      	bhi.n	8011726 <__gethex+0x206>
 8011754:	2201      	movs	r2, #1
 8011756:	4628      	mov	r0, r5
 8011758:	9303      	str	r3, [sp, #12]
 801175a:	f7ff fe0d 	bl	8011378 <strncmp>
 801175e:	4926      	ldr	r1, [pc, #152]	; (80117f8 <__gethex+0x2d8>)
 8011760:	9b03      	ldr	r3, [sp, #12]
 8011762:	2800      	cmp	r0, #0
 8011764:	d1df      	bne.n	8011726 <__gethex+0x206>
 8011766:	e795      	b.n	8011694 <__gethex+0x174>
 8011768:	f04f 0b03 	mov.w	fp, #3
 801176c:	e7c5      	b.n	80116fa <__gethex+0x1da>
 801176e:	da0b      	bge.n	8011788 <__gethex+0x268>
 8011770:	eba5 0800 	sub.w	r8, r5, r0
 8011774:	4621      	mov	r1, r4
 8011776:	4642      	mov	r2, r8
 8011778:	4648      	mov	r0, r9
 801177a:	f7fe f919 	bl	800f9b0 <__lshift>
 801177e:	eba6 0608 	sub.w	r6, r6, r8
 8011782:	4604      	mov	r4, r0
 8011784:	f100 0a14 	add.w	sl, r0, #20
 8011788:	f04f 0b00 	mov.w	fp, #0
 801178c:	e7ba      	b.n	8011704 <__gethex+0x1e4>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	42b3      	cmp	r3, r6
 8011792:	dd73      	ble.n	801187c <__gethex+0x35c>
 8011794:	1b9e      	subs	r6, r3, r6
 8011796:	42b5      	cmp	r5, r6
 8011798:	dc34      	bgt.n	8011804 <__gethex+0x2e4>
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2b02      	cmp	r3, #2
 801179e:	d023      	beq.n	80117e8 <__gethex+0x2c8>
 80117a0:	2b03      	cmp	r3, #3
 80117a2:	d025      	beq.n	80117f0 <__gethex+0x2d0>
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d115      	bne.n	80117d4 <__gethex+0x2b4>
 80117a8:	42b5      	cmp	r5, r6
 80117aa:	d113      	bne.n	80117d4 <__gethex+0x2b4>
 80117ac:	2d01      	cmp	r5, #1
 80117ae:	d10b      	bne.n	80117c8 <__gethex+0x2a8>
 80117b0:	9a02      	ldr	r2, [sp, #8]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6013      	str	r3, [r2, #0]
 80117b6:	2301      	movs	r3, #1
 80117b8:	6123      	str	r3, [r4, #16]
 80117ba:	f8ca 3000 	str.w	r3, [sl]
 80117be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80117c4:	601c      	str	r4, [r3, #0]
 80117c6:	e735      	b.n	8011634 <__gethex+0x114>
 80117c8:	1e69      	subs	r1, r5, #1
 80117ca:	4620      	mov	r0, r4
 80117cc:	f7fe fb22 	bl	800fe14 <__any_on>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d1ed      	bne.n	80117b0 <__gethex+0x290>
 80117d4:	4621      	mov	r1, r4
 80117d6:	4648      	mov	r0, r9
 80117d8:	f7fd fed0 	bl	800f57c <_Bfree>
 80117dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117de:	2300      	movs	r3, #0
 80117e0:	6013      	str	r3, [r2, #0]
 80117e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80117e6:	e725      	b.n	8011634 <__gethex+0x114>
 80117e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d1f2      	bne.n	80117d4 <__gethex+0x2b4>
 80117ee:	e7df      	b.n	80117b0 <__gethex+0x290>
 80117f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1dc      	bne.n	80117b0 <__gethex+0x290>
 80117f6:	e7ed      	b.n	80117d4 <__gethex+0x2b4>
 80117f8:	080130c4 	.word	0x080130c4
 80117fc:	08012f5d 	.word	0x08012f5d
 8011800:	0801326e 	.word	0x0801326e
 8011804:	f106 38ff 	add.w	r8, r6, #4294967295
 8011808:	f1bb 0f00 	cmp.w	fp, #0
 801180c:	d133      	bne.n	8011876 <__gethex+0x356>
 801180e:	f1b8 0f00 	cmp.w	r8, #0
 8011812:	d004      	beq.n	801181e <__gethex+0x2fe>
 8011814:	4641      	mov	r1, r8
 8011816:	4620      	mov	r0, r4
 8011818:	f7fe fafc 	bl	800fe14 <__any_on>
 801181c:	4683      	mov	fp, r0
 801181e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011822:	2301      	movs	r3, #1
 8011824:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011828:	f008 081f 	and.w	r8, r8, #31
 801182c:	fa03 f308 	lsl.w	r3, r3, r8
 8011830:	4213      	tst	r3, r2
 8011832:	4631      	mov	r1, r6
 8011834:	4620      	mov	r0, r4
 8011836:	bf18      	it	ne
 8011838:	f04b 0b02 	orrne.w	fp, fp, #2
 801183c:	1bad      	subs	r5, r5, r6
 801183e:	f7ff fe07 	bl	8011450 <rshift>
 8011842:	687e      	ldr	r6, [r7, #4]
 8011844:	f04f 0802 	mov.w	r8, #2
 8011848:	f1bb 0f00 	cmp.w	fp, #0
 801184c:	d04a      	beq.n	80118e4 <__gethex+0x3c4>
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2b02      	cmp	r3, #2
 8011852:	d016      	beq.n	8011882 <__gethex+0x362>
 8011854:	2b03      	cmp	r3, #3
 8011856:	d018      	beq.n	801188a <__gethex+0x36a>
 8011858:	2b01      	cmp	r3, #1
 801185a:	d109      	bne.n	8011870 <__gethex+0x350>
 801185c:	f01b 0f02 	tst.w	fp, #2
 8011860:	d006      	beq.n	8011870 <__gethex+0x350>
 8011862:	f8da 3000 	ldr.w	r3, [sl]
 8011866:	ea4b 0b03 	orr.w	fp, fp, r3
 801186a:	f01b 0f01 	tst.w	fp, #1
 801186e:	d10f      	bne.n	8011890 <__gethex+0x370>
 8011870:	f048 0810 	orr.w	r8, r8, #16
 8011874:	e036      	b.n	80118e4 <__gethex+0x3c4>
 8011876:	f04f 0b01 	mov.w	fp, #1
 801187a:	e7d0      	b.n	801181e <__gethex+0x2fe>
 801187c:	f04f 0801 	mov.w	r8, #1
 8011880:	e7e2      	b.n	8011848 <__gethex+0x328>
 8011882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011884:	f1c3 0301 	rsb	r3, r3, #1
 8011888:	930f      	str	r3, [sp, #60]	; 0x3c
 801188a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801188c:	2b00      	cmp	r3, #0
 801188e:	d0ef      	beq.n	8011870 <__gethex+0x350>
 8011890:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011894:	f104 0214 	add.w	r2, r4, #20
 8011898:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80118a2:	2300      	movs	r3, #0
 80118a4:	4694      	mov	ip, r2
 80118a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80118aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80118ae:	d01e      	beq.n	80118ee <__gethex+0x3ce>
 80118b0:	3101      	adds	r1, #1
 80118b2:	f8cc 1000 	str.w	r1, [ip]
 80118b6:	f1b8 0f02 	cmp.w	r8, #2
 80118ba:	f104 0214 	add.w	r2, r4, #20
 80118be:	d13d      	bne.n	801193c <__gethex+0x41c>
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	42ab      	cmp	r3, r5
 80118c6:	d10b      	bne.n	80118e0 <__gethex+0x3c0>
 80118c8:	1169      	asrs	r1, r5, #5
 80118ca:	2301      	movs	r3, #1
 80118cc:	f005 051f 	and.w	r5, r5, #31
 80118d0:	fa03 f505 	lsl.w	r5, r3, r5
 80118d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118d8:	421d      	tst	r5, r3
 80118da:	bf18      	it	ne
 80118dc:	f04f 0801 	movne.w	r8, #1
 80118e0:	f048 0820 	orr.w	r8, r8, #32
 80118e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118e6:	601c      	str	r4, [r3, #0]
 80118e8:	9b02      	ldr	r3, [sp, #8]
 80118ea:	601e      	str	r6, [r3, #0]
 80118ec:	e6a2      	b.n	8011634 <__gethex+0x114>
 80118ee:	4290      	cmp	r0, r2
 80118f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80118f4:	d8d6      	bhi.n	80118a4 <__gethex+0x384>
 80118f6:	68a2      	ldr	r2, [r4, #8]
 80118f8:	4593      	cmp	fp, r2
 80118fa:	db17      	blt.n	801192c <__gethex+0x40c>
 80118fc:	6861      	ldr	r1, [r4, #4]
 80118fe:	4648      	mov	r0, r9
 8011900:	3101      	adds	r1, #1
 8011902:	f7fd fdfb 	bl	800f4fc <_Balloc>
 8011906:	4682      	mov	sl, r0
 8011908:	b918      	cbnz	r0, 8011912 <__gethex+0x3f2>
 801190a:	4b1b      	ldr	r3, [pc, #108]	; (8011978 <__gethex+0x458>)
 801190c:	4602      	mov	r2, r0
 801190e:	2184      	movs	r1, #132	; 0x84
 8011910:	e6b3      	b.n	801167a <__gethex+0x15a>
 8011912:	6922      	ldr	r2, [r4, #16]
 8011914:	3202      	adds	r2, #2
 8011916:	f104 010c 	add.w	r1, r4, #12
 801191a:	0092      	lsls	r2, r2, #2
 801191c:	300c      	adds	r0, #12
 801191e:	f7ff fd4d 	bl	80113bc <memcpy>
 8011922:	4621      	mov	r1, r4
 8011924:	4648      	mov	r0, r9
 8011926:	f7fd fe29 	bl	800f57c <_Bfree>
 801192a:	4654      	mov	r4, sl
 801192c:	6922      	ldr	r2, [r4, #16]
 801192e:	1c51      	adds	r1, r2, #1
 8011930:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011934:	6121      	str	r1, [r4, #16]
 8011936:	2101      	movs	r1, #1
 8011938:	6151      	str	r1, [r2, #20]
 801193a:	e7bc      	b.n	80118b6 <__gethex+0x396>
 801193c:	6921      	ldr	r1, [r4, #16]
 801193e:	4559      	cmp	r1, fp
 8011940:	dd0b      	ble.n	801195a <__gethex+0x43a>
 8011942:	2101      	movs	r1, #1
 8011944:	4620      	mov	r0, r4
 8011946:	f7ff fd83 	bl	8011450 <rshift>
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	3601      	adds	r6, #1
 801194e:	42b3      	cmp	r3, r6
 8011950:	f6ff aedb 	blt.w	801170a <__gethex+0x1ea>
 8011954:	f04f 0801 	mov.w	r8, #1
 8011958:	e7c2      	b.n	80118e0 <__gethex+0x3c0>
 801195a:	f015 051f 	ands.w	r5, r5, #31
 801195e:	d0f9      	beq.n	8011954 <__gethex+0x434>
 8011960:	9b01      	ldr	r3, [sp, #4]
 8011962:	441a      	add	r2, r3
 8011964:	f1c5 0520 	rsb	r5, r5, #32
 8011968:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801196c:	f7fd feb8 	bl	800f6e0 <__hi0bits>
 8011970:	42a8      	cmp	r0, r5
 8011972:	dbe6      	blt.n	8011942 <__gethex+0x422>
 8011974:	e7ee      	b.n	8011954 <__gethex+0x434>
 8011976:	bf00      	nop
 8011978:	08012f5d 	.word	0x08012f5d

0801197c <L_shift>:
 801197c:	f1c2 0208 	rsb	r2, r2, #8
 8011980:	0092      	lsls	r2, r2, #2
 8011982:	b570      	push	{r4, r5, r6, lr}
 8011984:	f1c2 0620 	rsb	r6, r2, #32
 8011988:	6843      	ldr	r3, [r0, #4]
 801198a:	6804      	ldr	r4, [r0, #0]
 801198c:	fa03 f506 	lsl.w	r5, r3, r6
 8011990:	432c      	orrs	r4, r5
 8011992:	40d3      	lsrs	r3, r2
 8011994:	6004      	str	r4, [r0, #0]
 8011996:	f840 3f04 	str.w	r3, [r0, #4]!
 801199a:	4288      	cmp	r0, r1
 801199c:	d3f4      	bcc.n	8011988 <L_shift+0xc>
 801199e:	bd70      	pop	{r4, r5, r6, pc}

080119a0 <__match>:
 80119a0:	b530      	push	{r4, r5, lr}
 80119a2:	6803      	ldr	r3, [r0, #0]
 80119a4:	3301      	adds	r3, #1
 80119a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119aa:	b914      	cbnz	r4, 80119b2 <__match+0x12>
 80119ac:	6003      	str	r3, [r0, #0]
 80119ae:	2001      	movs	r0, #1
 80119b0:	bd30      	pop	{r4, r5, pc}
 80119b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80119ba:	2d19      	cmp	r5, #25
 80119bc:	bf98      	it	ls
 80119be:	3220      	addls	r2, #32
 80119c0:	42a2      	cmp	r2, r4
 80119c2:	d0f0      	beq.n	80119a6 <__match+0x6>
 80119c4:	2000      	movs	r0, #0
 80119c6:	e7f3      	b.n	80119b0 <__match+0x10>

080119c8 <__hexnan>:
 80119c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119cc:	680b      	ldr	r3, [r1, #0]
 80119ce:	6801      	ldr	r1, [r0, #0]
 80119d0:	115e      	asrs	r6, r3, #5
 80119d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80119d6:	f013 031f 	ands.w	r3, r3, #31
 80119da:	b087      	sub	sp, #28
 80119dc:	bf18      	it	ne
 80119de:	3604      	addne	r6, #4
 80119e0:	2500      	movs	r5, #0
 80119e2:	1f37      	subs	r7, r6, #4
 80119e4:	4682      	mov	sl, r0
 80119e6:	4690      	mov	r8, r2
 80119e8:	9301      	str	r3, [sp, #4]
 80119ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80119ee:	46b9      	mov	r9, r7
 80119f0:	463c      	mov	r4, r7
 80119f2:	9502      	str	r5, [sp, #8]
 80119f4:	46ab      	mov	fp, r5
 80119f6:	784a      	ldrb	r2, [r1, #1]
 80119f8:	1c4b      	adds	r3, r1, #1
 80119fa:	9303      	str	r3, [sp, #12]
 80119fc:	b342      	cbz	r2, 8011a50 <__hexnan+0x88>
 80119fe:	4610      	mov	r0, r2
 8011a00:	9105      	str	r1, [sp, #20]
 8011a02:	9204      	str	r2, [sp, #16]
 8011a04:	f7ff fd76 	bl	80114f4 <__hexdig_fun>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d14f      	bne.n	8011aac <__hexnan+0xe4>
 8011a0c:	9a04      	ldr	r2, [sp, #16]
 8011a0e:	9905      	ldr	r1, [sp, #20]
 8011a10:	2a20      	cmp	r2, #32
 8011a12:	d818      	bhi.n	8011a46 <__hexnan+0x7e>
 8011a14:	9b02      	ldr	r3, [sp, #8]
 8011a16:	459b      	cmp	fp, r3
 8011a18:	dd13      	ble.n	8011a42 <__hexnan+0x7a>
 8011a1a:	454c      	cmp	r4, r9
 8011a1c:	d206      	bcs.n	8011a2c <__hexnan+0x64>
 8011a1e:	2d07      	cmp	r5, #7
 8011a20:	dc04      	bgt.n	8011a2c <__hexnan+0x64>
 8011a22:	462a      	mov	r2, r5
 8011a24:	4649      	mov	r1, r9
 8011a26:	4620      	mov	r0, r4
 8011a28:	f7ff ffa8 	bl	801197c <L_shift>
 8011a2c:	4544      	cmp	r4, r8
 8011a2e:	d950      	bls.n	8011ad2 <__hexnan+0x10a>
 8011a30:	2300      	movs	r3, #0
 8011a32:	f1a4 0904 	sub.w	r9, r4, #4
 8011a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a3a:	f8cd b008 	str.w	fp, [sp, #8]
 8011a3e:	464c      	mov	r4, r9
 8011a40:	461d      	mov	r5, r3
 8011a42:	9903      	ldr	r1, [sp, #12]
 8011a44:	e7d7      	b.n	80119f6 <__hexnan+0x2e>
 8011a46:	2a29      	cmp	r2, #41	; 0x29
 8011a48:	d155      	bne.n	8011af6 <__hexnan+0x12e>
 8011a4a:	3102      	adds	r1, #2
 8011a4c:	f8ca 1000 	str.w	r1, [sl]
 8011a50:	f1bb 0f00 	cmp.w	fp, #0
 8011a54:	d04f      	beq.n	8011af6 <__hexnan+0x12e>
 8011a56:	454c      	cmp	r4, r9
 8011a58:	d206      	bcs.n	8011a68 <__hexnan+0xa0>
 8011a5a:	2d07      	cmp	r5, #7
 8011a5c:	dc04      	bgt.n	8011a68 <__hexnan+0xa0>
 8011a5e:	462a      	mov	r2, r5
 8011a60:	4649      	mov	r1, r9
 8011a62:	4620      	mov	r0, r4
 8011a64:	f7ff ff8a 	bl	801197c <L_shift>
 8011a68:	4544      	cmp	r4, r8
 8011a6a:	d934      	bls.n	8011ad6 <__hexnan+0x10e>
 8011a6c:	f1a8 0204 	sub.w	r2, r8, #4
 8011a70:	4623      	mov	r3, r4
 8011a72:	f853 1b04 	ldr.w	r1, [r3], #4
 8011a76:	f842 1f04 	str.w	r1, [r2, #4]!
 8011a7a:	429f      	cmp	r7, r3
 8011a7c:	d2f9      	bcs.n	8011a72 <__hexnan+0xaa>
 8011a7e:	1b3b      	subs	r3, r7, r4
 8011a80:	f023 0303 	bic.w	r3, r3, #3
 8011a84:	3304      	adds	r3, #4
 8011a86:	3e03      	subs	r6, #3
 8011a88:	3401      	adds	r4, #1
 8011a8a:	42a6      	cmp	r6, r4
 8011a8c:	bf38      	it	cc
 8011a8e:	2304      	movcc	r3, #4
 8011a90:	4443      	add	r3, r8
 8011a92:	2200      	movs	r2, #0
 8011a94:	f843 2b04 	str.w	r2, [r3], #4
 8011a98:	429f      	cmp	r7, r3
 8011a9a:	d2fb      	bcs.n	8011a94 <__hexnan+0xcc>
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	b91b      	cbnz	r3, 8011aa8 <__hexnan+0xe0>
 8011aa0:	4547      	cmp	r7, r8
 8011aa2:	d126      	bne.n	8011af2 <__hexnan+0x12a>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	603b      	str	r3, [r7, #0]
 8011aa8:	2005      	movs	r0, #5
 8011aaa:	e025      	b.n	8011af8 <__hexnan+0x130>
 8011aac:	3501      	adds	r5, #1
 8011aae:	2d08      	cmp	r5, #8
 8011ab0:	f10b 0b01 	add.w	fp, fp, #1
 8011ab4:	dd06      	ble.n	8011ac4 <__hexnan+0xfc>
 8011ab6:	4544      	cmp	r4, r8
 8011ab8:	d9c3      	bls.n	8011a42 <__hexnan+0x7a>
 8011aba:	2300      	movs	r3, #0
 8011abc:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ac0:	2501      	movs	r5, #1
 8011ac2:	3c04      	subs	r4, #4
 8011ac4:	6822      	ldr	r2, [r4, #0]
 8011ac6:	f000 000f 	and.w	r0, r0, #15
 8011aca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011ace:	6020      	str	r0, [r4, #0]
 8011ad0:	e7b7      	b.n	8011a42 <__hexnan+0x7a>
 8011ad2:	2508      	movs	r5, #8
 8011ad4:	e7b5      	b.n	8011a42 <__hexnan+0x7a>
 8011ad6:	9b01      	ldr	r3, [sp, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d0df      	beq.n	8011a9c <__hexnan+0xd4>
 8011adc:	f1c3 0320 	rsb	r3, r3, #32
 8011ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae4:	40da      	lsrs	r2, r3
 8011ae6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011aea:	4013      	ands	r3, r2
 8011aec:	f846 3c04 	str.w	r3, [r6, #-4]
 8011af0:	e7d4      	b.n	8011a9c <__hexnan+0xd4>
 8011af2:	3f04      	subs	r7, #4
 8011af4:	e7d2      	b.n	8011a9c <__hexnan+0xd4>
 8011af6:	2004      	movs	r0, #4
 8011af8:	b007      	add	sp, #28
 8011afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011afe <__ascii_mbtowc>:
 8011afe:	b082      	sub	sp, #8
 8011b00:	b901      	cbnz	r1, 8011b04 <__ascii_mbtowc+0x6>
 8011b02:	a901      	add	r1, sp, #4
 8011b04:	b142      	cbz	r2, 8011b18 <__ascii_mbtowc+0x1a>
 8011b06:	b14b      	cbz	r3, 8011b1c <__ascii_mbtowc+0x1e>
 8011b08:	7813      	ldrb	r3, [r2, #0]
 8011b0a:	600b      	str	r3, [r1, #0]
 8011b0c:	7812      	ldrb	r2, [r2, #0]
 8011b0e:	1e10      	subs	r0, r2, #0
 8011b10:	bf18      	it	ne
 8011b12:	2001      	movne	r0, #1
 8011b14:	b002      	add	sp, #8
 8011b16:	4770      	bx	lr
 8011b18:	4610      	mov	r0, r2
 8011b1a:	e7fb      	b.n	8011b14 <__ascii_mbtowc+0x16>
 8011b1c:	f06f 0001 	mvn.w	r0, #1
 8011b20:	e7f8      	b.n	8011b14 <__ascii_mbtowc+0x16>

08011b22 <_realloc_r>:
 8011b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b26:	4680      	mov	r8, r0
 8011b28:	4614      	mov	r4, r2
 8011b2a:	460e      	mov	r6, r1
 8011b2c:	b921      	cbnz	r1, 8011b38 <_realloc_r+0x16>
 8011b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b32:	4611      	mov	r1, r2
 8011b34:	f7fd bc56 	b.w	800f3e4 <_malloc_r>
 8011b38:	b92a      	cbnz	r2, 8011b46 <_realloc_r+0x24>
 8011b3a:	f7fd fbdf 	bl	800f2fc <_free_r>
 8011b3e:	4625      	mov	r5, r4
 8011b40:	4628      	mov	r0, r5
 8011b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b46:	f000 f8c6 	bl	8011cd6 <_malloc_usable_size_r>
 8011b4a:	4284      	cmp	r4, r0
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	d802      	bhi.n	8011b56 <_realloc_r+0x34>
 8011b50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b54:	d812      	bhi.n	8011b7c <_realloc_r+0x5a>
 8011b56:	4621      	mov	r1, r4
 8011b58:	4640      	mov	r0, r8
 8011b5a:	f7fd fc43 	bl	800f3e4 <_malloc_r>
 8011b5e:	4605      	mov	r5, r0
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d0ed      	beq.n	8011b40 <_realloc_r+0x1e>
 8011b64:	42bc      	cmp	r4, r7
 8011b66:	4622      	mov	r2, r4
 8011b68:	4631      	mov	r1, r6
 8011b6a:	bf28      	it	cs
 8011b6c:	463a      	movcs	r2, r7
 8011b6e:	f7ff fc25 	bl	80113bc <memcpy>
 8011b72:	4631      	mov	r1, r6
 8011b74:	4640      	mov	r0, r8
 8011b76:	f7fd fbc1 	bl	800f2fc <_free_r>
 8011b7a:	e7e1      	b.n	8011b40 <_realloc_r+0x1e>
 8011b7c:	4635      	mov	r5, r6
 8011b7e:	e7df      	b.n	8011b40 <_realloc_r+0x1e>

08011b80 <__ascii_wctomb>:
 8011b80:	b149      	cbz	r1, 8011b96 <__ascii_wctomb+0x16>
 8011b82:	2aff      	cmp	r2, #255	; 0xff
 8011b84:	bf85      	ittet	hi
 8011b86:	238a      	movhi	r3, #138	; 0x8a
 8011b88:	6003      	strhi	r3, [r0, #0]
 8011b8a:	700a      	strbls	r2, [r1, #0]
 8011b8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b90:	bf98      	it	ls
 8011b92:	2001      	movls	r0, #1
 8011b94:	4770      	bx	lr
 8011b96:	4608      	mov	r0, r1
 8011b98:	4770      	bx	lr
	...

08011b9c <fiprintf>:
 8011b9c:	b40e      	push	{r1, r2, r3}
 8011b9e:	b503      	push	{r0, r1, lr}
 8011ba0:	4601      	mov	r1, r0
 8011ba2:	ab03      	add	r3, sp, #12
 8011ba4:	4805      	ldr	r0, [pc, #20]	; (8011bbc <fiprintf+0x20>)
 8011ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011baa:	6800      	ldr	r0, [r0, #0]
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	f7ff f96b 	bl	8010e88 <_vfiprintf_r>
 8011bb2:	b002      	add	sp, #8
 8011bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bb8:	b003      	add	sp, #12
 8011bba:	4770      	bx	lr
 8011bbc:	20000200 	.word	0x20000200

08011bc0 <__swhatbuf_r>:
 8011bc0:	b570      	push	{r4, r5, r6, lr}
 8011bc2:	460c      	mov	r4, r1
 8011bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc8:	2900      	cmp	r1, #0
 8011bca:	b096      	sub	sp, #88	; 0x58
 8011bcc:	4615      	mov	r5, r2
 8011bce:	461e      	mov	r6, r3
 8011bd0:	da0d      	bge.n	8011bee <__swhatbuf_r+0x2e>
 8011bd2:	89a3      	ldrh	r3, [r4, #12]
 8011bd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011bd8:	f04f 0100 	mov.w	r1, #0
 8011bdc:	bf0c      	ite	eq
 8011bde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011be2:	2340      	movne	r3, #64	; 0x40
 8011be4:	2000      	movs	r0, #0
 8011be6:	6031      	str	r1, [r6, #0]
 8011be8:	602b      	str	r3, [r5, #0]
 8011bea:	b016      	add	sp, #88	; 0x58
 8011bec:	bd70      	pop	{r4, r5, r6, pc}
 8011bee:	466a      	mov	r2, sp
 8011bf0:	f000 f848 	bl	8011c84 <_fstat_r>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	dbec      	blt.n	8011bd2 <__swhatbuf_r+0x12>
 8011bf8:	9901      	ldr	r1, [sp, #4]
 8011bfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011bfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011c02:	4259      	negs	r1, r3
 8011c04:	4159      	adcs	r1, r3
 8011c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c0a:	e7eb      	b.n	8011be4 <__swhatbuf_r+0x24>

08011c0c <__smakebuf_r>:
 8011c0c:	898b      	ldrh	r3, [r1, #12]
 8011c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c10:	079d      	lsls	r5, r3, #30
 8011c12:	4606      	mov	r6, r0
 8011c14:	460c      	mov	r4, r1
 8011c16:	d507      	bpl.n	8011c28 <__smakebuf_r+0x1c>
 8011c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	6123      	str	r3, [r4, #16]
 8011c20:	2301      	movs	r3, #1
 8011c22:	6163      	str	r3, [r4, #20]
 8011c24:	b002      	add	sp, #8
 8011c26:	bd70      	pop	{r4, r5, r6, pc}
 8011c28:	ab01      	add	r3, sp, #4
 8011c2a:	466a      	mov	r2, sp
 8011c2c:	f7ff ffc8 	bl	8011bc0 <__swhatbuf_r>
 8011c30:	9900      	ldr	r1, [sp, #0]
 8011c32:	4605      	mov	r5, r0
 8011c34:	4630      	mov	r0, r6
 8011c36:	f7fd fbd5 	bl	800f3e4 <_malloc_r>
 8011c3a:	b948      	cbnz	r0, 8011c50 <__smakebuf_r+0x44>
 8011c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c40:	059a      	lsls	r2, r3, #22
 8011c42:	d4ef      	bmi.n	8011c24 <__smakebuf_r+0x18>
 8011c44:	f023 0303 	bic.w	r3, r3, #3
 8011c48:	f043 0302 	orr.w	r3, r3, #2
 8011c4c:	81a3      	strh	r3, [r4, #12]
 8011c4e:	e7e3      	b.n	8011c18 <__smakebuf_r+0xc>
 8011c50:	89a3      	ldrh	r3, [r4, #12]
 8011c52:	6020      	str	r0, [r4, #0]
 8011c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c58:	81a3      	strh	r3, [r4, #12]
 8011c5a:	9b00      	ldr	r3, [sp, #0]
 8011c5c:	6163      	str	r3, [r4, #20]
 8011c5e:	9b01      	ldr	r3, [sp, #4]
 8011c60:	6120      	str	r0, [r4, #16]
 8011c62:	b15b      	cbz	r3, 8011c7c <__smakebuf_r+0x70>
 8011c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c68:	4630      	mov	r0, r6
 8011c6a:	f000 f81d 	bl	8011ca8 <_isatty_r>
 8011c6e:	b128      	cbz	r0, 8011c7c <__smakebuf_r+0x70>
 8011c70:	89a3      	ldrh	r3, [r4, #12]
 8011c72:	f023 0303 	bic.w	r3, r3, #3
 8011c76:	f043 0301 	orr.w	r3, r3, #1
 8011c7a:	81a3      	strh	r3, [r4, #12]
 8011c7c:	89a3      	ldrh	r3, [r4, #12]
 8011c7e:	431d      	orrs	r5, r3
 8011c80:	81a5      	strh	r5, [r4, #12]
 8011c82:	e7cf      	b.n	8011c24 <__smakebuf_r+0x18>

08011c84 <_fstat_r>:
 8011c84:	b538      	push	{r3, r4, r5, lr}
 8011c86:	4d07      	ldr	r5, [pc, #28]	; (8011ca4 <_fstat_r+0x20>)
 8011c88:	2300      	movs	r3, #0
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	4608      	mov	r0, r1
 8011c8e:	4611      	mov	r1, r2
 8011c90:	602b      	str	r3, [r5, #0]
 8011c92:	f7f0 f9b0 	bl	8001ff6 <_fstat>
 8011c96:	1c43      	adds	r3, r0, #1
 8011c98:	d102      	bne.n	8011ca0 <_fstat_r+0x1c>
 8011c9a:	682b      	ldr	r3, [r5, #0]
 8011c9c:	b103      	cbz	r3, 8011ca0 <_fstat_r+0x1c>
 8011c9e:	6023      	str	r3, [r4, #0]
 8011ca0:	bd38      	pop	{r3, r4, r5, pc}
 8011ca2:	bf00      	nop
 8011ca4:	200009d4 	.word	0x200009d4

08011ca8 <_isatty_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d06      	ldr	r5, [pc, #24]	; (8011cc4 <_isatty_r+0x1c>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	f7f0 f9af 	bl	8002016 <_isatty>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_isatty_r+0x1a>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_isatty_r+0x1a>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	200009d4 	.word	0x200009d4

08011cc8 <abort>:
 8011cc8:	b508      	push	{r3, lr}
 8011cca:	2006      	movs	r0, #6
 8011ccc:	f000 f834 	bl	8011d38 <raise>
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	f7f0 f941 	bl	8001f58 <_exit>

08011cd6 <_malloc_usable_size_r>:
 8011cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cda:	1f18      	subs	r0, r3, #4
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	bfbc      	itt	lt
 8011ce0:	580b      	ldrlt	r3, [r1, r0]
 8011ce2:	18c0      	addlt	r0, r0, r3
 8011ce4:	4770      	bx	lr

08011ce6 <_raise_r>:
 8011ce6:	291f      	cmp	r1, #31
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4604      	mov	r4, r0
 8011cec:	460d      	mov	r5, r1
 8011cee:	d904      	bls.n	8011cfa <_raise_r+0x14>
 8011cf0:	2316      	movs	r3, #22
 8011cf2:	6003      	str	r3, [r0, #0]
 8011cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf8:	bd38      	pop	{r3, r4, r5, pc}
 8011cfa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011cfc:	b112      	cbz	r2, 8011d04 <_raise_r+0x1e>
 8011cfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d02:	b94b      	cbnz	r3, 8011d18 <_raise_r+0x32>
 8011d04:	4620      	mov	r0, r4
 8011d06:	f000 f831 	bl	8011d6c <_getpid_r>
 8011d0a:	462a      	mov	r2, r5
 8011d0c:	4601      	mov	r1, r0
 8011d0e:	4620      	mov	r0, r4
 8011d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d14:	f000 b818 	b.w	8011d48 <_kill_r>
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d00a      	beq.n	8011d32 <_raise_r+0x4c>
 8011d1c:	1c59      	adds	r1, r3, #1
 8011d1e:	d103      	bne.n	8011d28 <_raise_r+0x42>
 8011d20:	2316      	movs	r3, #22
 8011d22:	6003      	str	r3, [r0, #0]
 8011d24:	2001      	movs	r0, #1
 8011d26:	e7e7      	b.n	8011cf8 <_raise_r+0x12>
 8011d28:	2400      	movs	r4, #0
 8011d2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d2e:	4628      	mov	r0, r5
 8011d30:	4798      	blx	r3
 8011d32:	2000      	movs	r0, #0
 8011d34:	e7e0      	b.n	8011cf8 <_raise_r+0x12>
	...

08011d38 <raise>:
 8011d38:	4b02      	ldr	r3, [pc, #8]	; (8011d44 <raise+0xc>)
 8011d3a:	4601      	mov	r1, r0
 8011d3c:	6818      	ldr	r0, [r3, #0]
 8011d3e:	f7ff bfd2 	b.w	8011ce6 <_raise_r>
 8011d42:	bf00      	nop
 8011d44:	20000200 	.word	0x20000200

08011d48 <_kill_r>:
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	4d07      	ldr	r5, [pc, #28]	; (8011d68 <_kill_r+0x20>)
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	4604      	mov	r4, r0
 8011d50:	4608      	mov	r0, r1
 8011d52:	4611      	mov	r1, r2
 8011d54:	602b      	str	r3, [r5, #0]
 8011d56:	f7f0 f8ef 	bl	8001f38 <_kill>
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	d102      	bne.n	8011d64 <_kill_r+0x1c>
 8011d5e:	682b      	ldr	r3, [r5, #0]
 8011d60:	b103      	cbz	r3, 8011d64 <_kill_r+0x1c>
 8011d62:	6023      	str	r3, [r4, #0]
 8011d64:	bd38      	pop	{r3, r4, r5, pc}
 8011d66:	bf00      	nop
 8011d68:	200009d4 	.word	0x200009d4

08011d6c <_getpid_r>:
 8011d6c:	f7f0 b8dc 	b.w	8001f28 <_getpid>

08011d70 <pow>:
 8011d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d72:	ed2d 8b02 	vpush	{d8}
 8011d76:	eeb0 8a40 	vmov.f32	s16, s0
 8011d7a:	eef0 8a60 	vmov.f32	s17, s1
 8011d7e:	ec55 4b11 	vmov	r4, r5, d1
 8011d82:	f000 f8ad 	bl	8011ee0 <__ieee754_pow>
 8011d86:	4622      	mov	r2, r4
 8011d88:	462b      	mov	r3, r5
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	4629      	mov	r1, r5
 8011d8e:	ec57 6b10 	vmov	r6, r7, d0
 8011d92:	f7ee fecb 	bl	8000b2c <__aeabi_dcmpun>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d13b      	bne.n	8011e12 <pow+0xa2>
 8011d9a:	ec51 0b18 	vmov	r0, r1, d8
 8011d9e:	2200      	movs	r2, #0
 8011da0:	2300      	movs	r3, #0
 8011da2:	f7ee fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8011da6:	b1b8      	cbz	r0, 8011dd8 <pow+0x68>
 8011da8:	2200      	movs	r2, #0
 8011daa:	2300      	movs	r3, #0
 8011dac:	4620      	mov	r0, r4
 8011dae:	4629      	mov	r1, r5
 8011db0:	f7ee fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d146      	bne.n	8011e46 <pow+0xd6>
 8011db8:	ec45 4b10 	vmov	d0, r4, r5
 8011dbc:	f000 f848 	bl	8011e50 <finite>
 8011dc0:	b338      	cbz	r0, 8011e12 <pow+0xa2>
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	4629      	mov	r1, r5
 8011dca:	f7ee fe87 	bl	8000adc <__aeabi_dcmplt>
 8011dce:	b300      	cbz	r0, 8011e12 <pow+0xa2>
 8011dd0:	f7fc fbe6 	bl	800e5a0 <__errno>
 8011dd4:	2322      	movs	r3, #34	; 0x22
 8011dd6:	e01b      	b.n	8011e10 <pow+0xa0>
 8011dd8:	ec47 6b10 	vmov	d0, r6, r7
 8011ddc:	f000 f838 	bl	8011e50 <finite>
 8011de0:	b9e0      	cbnz	r0, 8011e1c <pow+0xac>
 8011de2:	eeb0 0a48 	vmov.f32	s0, s16
 8011de6:	eef0 0a68 	vmov.f32	s1, s17
 8011dea:	f000 f831 	bl	8011e50 <finite>
 8011dee:	b1a8      	cbz	r0, 8011e1c <pow+0xac>
 8011df0:	ec45 4b10 	vmov	d0, r4, r5
 8011df4:	f000 f82c 	bl	8011e50 <finite>
 8011df8:	b180      	cbz	r0, 8011e1c <pow+0xac>
 8011dfa:	4632      	mov	r2, r6
 8011dfc:	463b      	mov	r3, r7
 8011dfe:	4630      	mov	r0, r6
 8011e00:	4639      	mov	r1, r7
 8011e02:	f7ee fe93 	bl	8000b2c <__aeabi_dcmpun>
 8011e06:	2800      	cmp	r0, #0
 8011e08:	d0e2      	beq.n	8011dd0 <pow+0x60>
 8011e0a:	f7fc fbc9 	bl	800e5a0 <__errno>
 8011e0e:	2321      	movs	r3, #33	; 0x21
 8011e10:	6003      	str	r3, [r0, #0]
 8011e12:	ecbd 8b02 	vpop	{d8}
 8011e16:	ec47 6b10 	vmov	d0, r6, r7
 8011e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	2300      	movs	r3, #0
 8011e20:	4630      	mov	r0, r6
 8011e22:	4639      	mov	r1, r7
 8011e24:	f7ee fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d0f2      	beq.n	8011e12 <pow+0xa2>
 8011e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8011e30:	eef0 0a68 	vmov.f32	s1, s17
 8011e34:	f000 f80c 	bl	8011e50 <finite>
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	d0ea      	beq.n	8011e12 <pow+0xa2>
 8011e3c:	ec45 4b10 	vmov	d0, r4, r5
 8011e40:	f000 f806 	bl	8011e50 <finite>
 8011e44:	e7c3      	b.n	8011dce <pow+0x5e>
 8011e46:	4f01      	ldr	r7, [pc, #4]	; (8011e4c <pow+0xdc>)
 8011e48:	2600      	movs	r6, #0
 8011e4a:	e7e2      	b.n	8011e12 <pow+0xa2>
 8011e4c:	3ff00000 	.word	0x3ff00000

08011e50 <finite>:
 8011e50:	b082      	sub	sp, #8
 8011e52:	ed8d 0b00 	vstr	d0, [sp]
 8011e56:	9801      	ldr	r0, [sp, #4]
 8011e58:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011e5c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011e60:	0fc0      	lsrs	r0, r0, #31
 8011e62:	b002      	add	sp, #8
 8011e64:	4770      	bx	lr
	...

08011e68 <trunc>:
 8011e68:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8011e6c:	ec5c bb10 	vmov	fp, ip, d0
 8011e70:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8011e74:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8011e78:	2913      	cmp	r1, #19
 8011e7a:	4664      	mov	r4, ip
 8011e7c:	dc11      	bgt.n	8011ea2 <trunc+0x3a>
 8011e7e:	2900      	cmp	r1, #0
 8011e80:	bfa7      	ittee	ge
 8011e82:	4b15      	ldrge	r3, [pc, #84]	; (8011ed8 <trunc+0x70>)
 8011e84:	fa43 f101 	asrge.w	r1, r3, r1
 8011e88:	2200      	movlt	r2, #0
 8011e8a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8011e8e:	bfa4      	itt	ge
 8011e90:	2200      	movge	r2, #0
 8011e92:	ea01 030c 	andge.w	r3, r1, ip
 8011e96:	4693      	mov	fp, r2
 8011e98:	469c      	mov	ip, r3
 8011e9a:	ec4c bb10 	vmov	d0, fp, ip
 8011e9e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8011ea2:	2933      	cmp	r1, #51	; 0x33
 8011ea4:	dd0d      	ble.n	8011ec2 <trunc+0x5a>
 8011ea6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011eaa:	d1f6      	bne.n	8011e9a <trunc+0x32>
 8011eac:	4663      	mov	r3, ip
 8011eae:	ee10 2a10 	vmov	r2, s0
 8011eb2:	ee10 0a10 	vmov	r0, s0
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	f7ee f9e8 	bl	800028c <__adddf3>
 8011ebc:	4683      	mov	fp, r0
 8011ebe:	468c      	mov	ip, r1
 8011ec0:	e7eb      	b.n	8011e9a <trunc+0x32>
 8011ec2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8011ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eca:	40c3      	lsrs	r3, r0
 8011ecc:	ea2b 0603 	bic.w	r6, fp, r3
 8011ed0:	46b3      	mov	fp, r6
 8011ed2:	46a4      	mov	ip, r4
 8011ed4:	e7e1      	b.n	8011e9a <trunc+0x32>
 8011ed6:	bf00      	nop
 8011ed8:	fff00000 	.word	0xfff00000
 8011edc:	00000000 	.word	0x00000000

08011ee0 <__ieee754_pow>:
 8011ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ed2d 8b06 	vpush	{d8-d10}
 8011ee8:	b089      	sub	sp, #36	; 0x24
 8011eea:	ed8d 1b00 	vstr	d1, [sp]
 8011eee:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011ef2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011ef6:	ea58 0102 	orrs.w	r1, r8, r2
 8011efa:	ec57 6b10 	vmov	r6, r7, d0
 8011efe:	d115      	bne.n	8011f2c <__ieee754_pow+0x4c>
 8011f00:	19b3      	adds	r3, r6, r6
 8011f02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011f06:	4152      	adcs	r2, r2
 8011f08:	4299      	cmp	r1, r3
 8011f0a:	4b89      	ldr	r3, [pc, #548]	; (8012130 <__ieee754_pow+0x250>)
 8011f0c:	4193      	sbcs	r3, r2
 8011f0e:	f080 84d1 	bcs.w	80128b4 <__ieee754_pow+0x9d4>
 8011f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f16:	4630      	mov	r0, r6
 8011f18:	4639      	mov	r1, r7
 8011f1a:	f7ee f9b7 	bl	800028c <__adddf3>
 8011f1e:	ec41 0b10 	vmov	d0, r0, r1
 8011f22:	b009      	add	sp, #36	; 0x24
 8011f24:	ecbd 8b06 	vpop	{d8-d10}
 8011f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2c:	4b81      	ldr	r3, [pc, #516]	; (8012134 <__ieee754_pow+0x254>)
 8011f2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011f32:	429c      	cmp	r4, r3
 8011f34:	ee10 aa10 	vmov	sl, s0
 8011f38:	463d      	mov	r5, r7
 8011f3a:	dc06      	bgt.n	8011f4a <__ieee754_pow+0x6a>
 8011f3c:	d101      	bne.n	8011f42 <__ieee754_pow+0x62>
 8011f3e:	2e00      	cmp	r6, #0
 8011f40:	d1e7      	bne.n	8011f12 <__ieee754_pow+0x32>
 8011f42:	4598      	cmp	r8, r3
 8011f44:	dc01      	bgt.n	8011f4a <__ieee754_pow+0x6a>
 8011f46:	d10f      	bne.n	8011f68 <__ieee754_pow+0x88>
 8011f48:	b172      	cbz	r2, 8011f68 <__ieee754_pow+0x88>
 8011f4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011f4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011f52:	ea55 050a 	orrs.w	r5, r5, sl
 8011f56:	d1dc      	bne.n	8011f12 <__ieee754_pow+0x32>
 8011f58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011f5c:	18db      	adds	r3, r3, r3
 8011f5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011f62:	4152      	adcs	r2, r2
 8011f64:	429d      	cmp	r5, r3
 8011f66:	e7d0      	b.n	8011f0a <__ieee754_pow+0x2a>
 8011f68:	2d00      	cmp	r5, #0
 8011f6a:	da3b      	bge.n	8011fe4 <__ieee754_pow+0x104>
 8011f6c:	4b72      	ldr	r3, [pc, #456]	; (8012138 <__ieee754_pow+0x258>)
 8011f6e:	4598      	cmp	r8, r3
 8011f70:	dc51      	bgt.n	8012016 <__ieee754_pow+0x136>
 8011f72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011f76:	4598      	cmp	r8, r3
 8011f78:	f340 84ab 	ble.w	80128d2 <__ieee754_pow+0x9f2>
 8011f7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011f80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f84:	2b14      	cmp	r3, #20
 8011f86:	dd0f      	ble.n	8011fa8 <__ieee754_pow+0xc8>
 8011f88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011f8c:	fa22 f103 	lsr.w	r1, r2, r3
 8011f90:	fa01 f303 	lsl.w	r3, r1, r3
 8011f94:	4293      	cmp	r3, r2
 8011f96:	f040 849c 	bne.w	80128d2 <__ieee754_pow+0x9f2>
 8011f9a:	f001 0101 	and.w	r1, r1, #1
 8011f9e:	f1c1 0302 	rsb	r3, r1, #2
 8011fa2:	9304      	str	r3, [sp, #16]
 8011fa4:	b182      	cbz	r2, 8011fc8 <__ieee754_pow+0xe8>
 8011fa6:	e05f      	b.n	8012068 <__ieee754_pow+0x188>
 8011fa8:	2a00      	cmp	r2, #0
 8011faa:	d15b      	bne.n	8012064 <__ieee754_pow+0x184>
 8011fac:	f1c3 0314 	rsb	r3, r3, #20
 8011fb0:	fa48 f103 	asr.w	r1, r8, r3
 8011fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8011fb8:	4543      	cmp	r3, r8
 8011fba:	f040 8487 	bne.w	80128cc <__ieee754_pow+0x9ec>
 8011fbe:	f001 0101 	and.w	r1, r1, #1
 8011fc2:	f1c1 0302 	rsb	r3, r1, #2
 8011fc6:	9304      	str	r3, [sp, #16]
 8011fc8:	4b5c      	ldr	r3, [pc, #368]	; (801213c <__ieee754_pow+0x25c>)
 8011fca:	4598      	cmp	r8, r3
 8011fcc:	d132      	bne.n	8012034 <__ieee754_pow+0x154>
 8011fce:	f1b9 0f00 	cmp.w	r9, #0
 8011fd2:	f280 8477 	bge.w	80128c4 <__ieee754_pow+0x9e4>
 8011fd6:	4959      	ldr	r1, [pc, #356]	; (801213c <__ieee754_pow+0x25c>)
 8011fd8:	4632      	mov	r2, r6
 8011fda:	463b      	mov	r3, r7
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f7ee fc35 	bl	800084c <__aeabi_ddiv>
 8011fe2:	e79c      	b.n	8011f1e <__ieee754_pow+0x3e>
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	9304      	str	r3, [sp, #16]
 8011fe8:	2a00      	cmp	r2, #0
 8011fea:	d13d      	bne.n	8012068 <__ieee754_pow+0x188>
 8011fec:	4b51      	ldr	r3, [pc, #324]	; (8012134 <__ieee754_pow+0x254>)
 8011fee:	4598      	cmp	r8, r3
 8011ff0:	d1ea      	bne.n	8011fc8 <__ieee754_pow+0xe8>
 8011ff2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011ff6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011ffa:	ea53 030a 	orrs.w	r3, r3, sl
 8011ffe:	f000 8459 	beq.w	80128b4 <__ieee754_pow+0x9d4>
 8012002:	4b4f      	ldr	r3, [pc, #316]	; (8012140 <__ieee754_pow+0x260>)
 8012004:	429c      	cmp	r4, r3
 8012006:	dd08      	ble.n	801201a <__ieee754_pow+0x13a>
 8012008:	f1b9 0f00 	cmp.w	r9, #0
 801200c:	f2c0 8456 	blt.w	80128bc <__ieee754_pow+0x9dc>
 8012010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012014:	e783      	b.n	8011f1e <__ieee754_pow+0x3e>
 8012016:	2302      	movs	r3, #2
 8012018:	e7e5      	b.n	8011fe6 <__ieee754_pow+0x106>
 801201a:	f1b9 0f00 	cmp.w	r9, #0
 801201e:	f04f 0000 	mov.w	r0, #0
 8012022:	f04f 0100 	mov.w	r1, #0
 8012026:	f6bf af7a 	bge.w	8011f1e <__ieee754_pow+0x3e>
 801202a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801202e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012032:	e774      	b.n	8011f1e <__ieee754_pow+0x3e>
 8012034:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012038:	d106      	bne.n	8012048 <__ieee754_pow+0x168>
 801203a:	4632      	mov	r2, r6
 801203c:	463b      	mov	r3, r7
 801203e:	4630      	mov	r0, r6
 8012040:	4639      	mov	r1, r7
 8012042:	f7ee fad9 	bl	80005f8 <__aeabi_dmul>
 8012046:	e76a      	b.n	8011f1e <__ieee754_pow+0x3e>
 8012048:	4b3e      	ldr	r3, [pc, #248]	; (8012144 <__ieee754_pow+0x264>)
 801204a:	4599      	cmp	r9, r3
 801204c:	d10c      	bne.n	8012068 <__ieee754_pow+0x188>
 801204e:	2d00      	cmp	r5, #0
 8012050:	db0a      	blt.n	8012068 <__ieee754_pow+0x188>
 8012052:	ec47 6b10 	vmov	d0, r6, r7
 8012056:	b009      	add	sp, #36	; 0x24
 8012058:	ecbd 8b06 	vpop	{d8-d10}
 801205c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012060:	f000 bd20 	b.w	8012aa4 <__ieee754_sqrt>
 8012064:	2300      	movs	r3, #0
 8012066:	9304      	str	r3, [sp, #16]
 8012068:	ec47 6b10 	vmov	d0, r6, r7
 801206c:	f000 fc62 	bl	8012934 <fabs>
 8012070:	ec51 0b10 	vmov	r0, r1, d0
 8012074:	f1ba 0f00 	cmp.w	sl, #0
 8012078:	d129      	bne.n	80120ce <__ieee754_pow+0x1ee>
 801207a:	b124      	cbz	r4, 8012086 <__ieee754_pow+0x1a6>
 801207c:	4b2f      	ldr	r3, [pc, #188]	; (801213c <__ieee754_pow+0x25c>)
 801207e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012082:	429a      	cmp	r2, r3
 8012084:	d123      	bne.n	80120ce <__ieee754_pow+0x1ee>
 8012086:	f1b9 0f00 	cmp.w	r9, #0
 801208a:	da05      	bge.n	8012098 <__ieee754_pow+0x1b8>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	2000      	movs	r0, #0
 8012092:	492a      	ldr	r1, [pc, #168]	; (801213c <__ieee754_pow+0x25c>)
 8012094:	f7ee fbda 	bl	800084c <__aeabi_ddiv>
 8012098:	2d00      	cmp	r5, #0
 801209a:	f6bf af40 	bge.w	8011f1e <__ieee754_pow+0x3e>
 801209e:	9b04      	ldr	r3, [sp, #16]
 80120a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80120a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80120a8:	431c      	orrs	r4, r3
 80120aa:	d108      	bne.n	80120be <__ieee754_pow+0x1de>
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	4610      	mov	r0, r2
 80120b2:	4619      	mov	r1, r3
 80120b4:	f7ee f8e8 	bl	8000288 <__aeabi_dsub>
 80120b8:	4602      	mov	r2, r0
 80120ba:	460b      	mov	r3, r1
 80120bc:	e78f      	b.n	8011fde <__ieee754_pow+0xfe>
 80120be:	9b04      	ldr	r3, [sp, #16]
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	f47f af2c 	bne.w	8011f1e <__ieee754_pow+0x3e>
 80120c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120ca:	4619      	mov	r1, r3
 80120cc:	e727      	b.n	8011f1e <__ieee754_pow+0x3e>
 80120ce:	0feb      	lsrs	r3, r5, #31
 80120d0:	3b01      	subs	r3, #1
 80120d2:	9306      	str	r3, [sp, #24]
 80120d4:	9a06      	ldr	r2, [sp, #24]
 80120d6:	9b04      	ldr	r3, [sp, #16]
 80120d8:	4313      	orrs	r3, r2
 80120da:	d102      	bne.n	80120e2 <__ieee754_pow+0x202>
 80120dc:	4632      	mov	r2, r6
 80120de:	463b      	mov	r3, r7
 80120e0:	e7e6      	b.n	80120b0 <__ieee754_pow+0x1d0>
 80120e2:	4b19      	ldr	r3, [pc, #100]	; (8012148 <__ieee754_pow+0x268>)
 80120e4:	4598      	cmp	r8, r3
 80120e6:	f340 80fb 	ble.w	80122e0 <__ieee754_pow+0x400>
 80120ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80120ee:	4598      	cmp	r8, r3
 80120f0:	4b13      	ldr	r3, [pc, #76]	; (8012140 <__ieee754_pow+0x260>)
 80120f2:	dd0c      	ble.n	801210e <__ieee754_pow+0x22e>
 80120f4:	429c      	cmp	r4, r3
 80120f6:	dc0f      	bgt.n	8012118 <__ieee754_pow+0x238>
 80120f8:	f1b9 0f00 	cmp.w	r9, #0
 80120fc:	da0f      	bge.n	801211e <__ieee754_pow+0x23e>
 80120fe:	2000      	movs	r0, #0
 8012100:	b009      	add	sp, #36	; 0x24
 8012102:	ecbd 8b06 	vpop	{d8-d10}
 8012106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210a:	f000 bcc2 	b.w	8012a92 <__math_oflow>
 801210e:	429c      	cmp	r4, r3
 8012110:	dbf2      	blt.n	80120f8 <__ieee754_pow+0x218>
 8012112:	4b0a      	ldr	r3, [pc, #40]	; (801213c <__ieee754_pow+0x25c>)
 8012114:	429c      	cmp	r4, r3
 8012116:	dd19      	ble.n	801214c <__ieee754_pow+0x26c>
 8012118:	f1b9 0f00 	cmp.w	r9, #0
 801211c:	dcef      	bgt.n	80120fe <__ieee754_pow+0x21e>
 801211e:	2000      	movs	r0, #0
 8012120:	b009      	add	sp, #36	; 0x24
 8012122:	ecbd 8b06 	vpop	{d8-d10}
 8012126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212a:	f000 bca9 	b.w	8012a80 <__math_uflow>
 801212e:	bf00      	nop
 8012130:	fff00000 	.word	0xfff00000
 8012134:	7ff00000 	.word	0x7ff00000
 8012138:	433fffff 	.word	0x433fffff
 801213c:	3ff00000 	.word	0x3ff00000
 8012140:	3fefffff 	.word	0x3fefffff
 8012144:	3fe00000 	.word	0x3fe00000
 8012148:	41e00000 	.word	0x41e00000
 801214c:	4b60      	ldr	r3, [pc, #384]	; (80122d0 <__ieee754_pow+0x3f0>)
 801214e:	2200      	movs	r2, #0
 8012150:	f7ee f89a 	bl	8000288 <__aeabi_dsub>
 8012154:	a354      	add	r3, pc, #336	; (adr r3, 80122a8 <__ieee754_pow+0x3c8>)
 8012156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215a:	4604      	mov	r4, r0
 801215c:	460d      	mov	r5, r1
 801215e:	f7ee fa4b 	bl	80005f8 <__aeabi_dmul>
 8012162:	a353      	add	r3, pc, #332	; (adr r3, 80122b0 <__ieee754_pow+0x3d0>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	4606      	mov	r6, r0
 801216a:	460f      	mov	r7, r1
 801216c:	4620      	mov	r0, r4
 801216e:	4629      	mov	r1, r5
 8012170:	f7ee fa42 	bl	80005f8 <__aeabi_dmul>
 8012174:	4b57      	ldr	r3, [pc, #348]	; (80122d4 <__ieee754_pow+0x3f4>)
 8012176:	4682      	mov	sl, r0
 8012178:	468b      	mov	fp, r1
 801217a:	2200      	movs	r2, #0
 801217c:	4620      	mov	r0, r4
 801217e:	4629      	mov	r1, r5
 8012180:	f7ee fa3a 	bl	80005f8 <__aeabi_dmul>
 8012184:	4602      	mov	r2, r0
 8012186:	460b      	mov	r3, r1
 8012188:	a14b      	add	r1, pc, #300	; (adr r1, 80122b8 <__ieee754_pow+0x3d8>)
 801218a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801218e:	f7ee f87b 	bl	8000288 <__aeabi_dsub>
 8012192:	4622      	mov	r2, r4
 8012194:	462b      	mov	r3, r5
 8012196:	f7ee fa2f 	bl	80005f8 <__aeabi_dmul>
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	2000      	movs	r0, #0
 80121a0:	494d      	ldr	r1, [pc, #308]	; (80122d8 <__ieee754_pow+0x3f8>)
 80121a2:	f7ee f871 	bl	8000288 <__aeabi_dsub>
 80121a6:	4622      	mov	r2, r4
 80121a8:	4680      	mov	r8, r0
 80121aa:	4689      	mov	r9, r1
 80121ac:	462b      	mov	r3, r5
 80121ae:	4620      	mov	r0, r4
 80121b0:	4629      	mov	r1, r5
 80121b2:	f7ee fa21 	bl	80005f8 <__aeabi_dmul>
 80121b6:	4602      	mov	r2, r0
 80121b8:	460b      	mov	r3, r1
 80121ba:	4640      	mov	r0, r8
 80121bc:	4649      	mov	r1, r9
 80121be:	f7ee fa1b 	bl	80005f8 <__aeabi_dmul>
 80121c2:	a33f      	add	r3, pc, #252	; (adr r3, 80122c0 <__ieee754_pow+0x3e0>)
 80121c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c8:	f7ee fa16 	bl	80005f8 <__aeabi_dmul>
 80121cc:	4602      	mov	r2, r0
 80121ce:	460b      	mov	r3, r1
 80121d0:	4650      	mov	r0, sl
 80121d2:	4659      	mov	r1, fp
 80121d4:	f7ee f858 	bl	8000288 <__aeabi_dsub>
 80121d8:	4602      	mov	r2, r0
 80121da:	460b      	mov	r3, r1
 80121dc:	4680      	mov	r8, r0
 80121de:	4689      	mov	r9, r1
 80121e0:	4630      	mov	r0, r6
 80121e2:	4639      	mov	r1, r7
 80121e4:	f7ee f852 	bl	800028c <__adddf3>
 80121e8:	2000      	movs	r0, #0
 80121ea:	4632      	mov	r2, r6
 80121ec:	463b      	mov	r3, r7
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	f7ee f849 	bl	8000288 <__aeabi_dsub>
 80121f6:	4602      	mov	r2, r0
 80121f8:	460b      	mov	r3, r1
 80121fa:	4640      	mov	r0, r8
 80121fc:	4649      	mov	r1, r9
 80121fe:	f7ee f843 	bl	8000288 <__aeabi_dsub>
 8012202:	9b04      	ldr	r3, [sp, #16]
 8012204:	9a06      	ldr	r2, [sp, #24]
 8012206:	3b01      	subs	r3, #1
 8012208:	4313      	orrs	r3, r2
 801220a:	4682      	mov	sl, r0
 801220c:	468b      	mov	fp, r1
 801220e:	f040 81e7 	bne.w	80125e0 <__ieee754_pow+0x700>
 8012212:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80122c8 <__ieee754_pow+0x3e8>
 8012216:	eeb0 8a47 	vmov.f32	s16, s14
 801221a:	eef0 8a67 	vmov.f32	s17, s15
 801221e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012222:	2600      	movs	r6, #0
 8012224:	4632      	mov	r2, r6
 8012226:	463b      	mov	r3, r7
 8012228:	e9dd 0100 	ldrd	r0, r1, [sp]
 801222c:	f7ee f82c 	bl	8000288 <__aeabi_dsub>
 8012230:	4622      	mov	r2, r4
 8012232:	462b      	mov	r3, r5
 8012234:	f7ee f9e0 	bl	80005f8 <__aeabi_dmul>
 8012238:	e9dd 2300 	ldrd	r2, r3, [sp]
 801223c:	4680      	mov	r8, r0
 801223e:	4689      	mov	r9, r1
 8012240:	4650      	mov	r0, sl
 8012242:	4659      	mov	r1, fp
 8012244:	f7ee f9d8 	bl	80005f8 <__aeabi_dmul>
 8012248:	4602      	mov	r2, r0
 801224a:	460b      	mov	r3, r1
 801224c:	4640      	mov	r0, r8
 801224e:	4649      	mov	r1, r9
 8012250:	f7ee f81c 	bl	800028c <__adddf3>
 8012254:	4632      	mov	r2, r6
 8012256:	463b      	mov	r3, r7
 8012258:	4680      	mov	r8, r0
 801225a:	4689      	mov	r9, r1
 801225c:	4620      	mov	r0, r4
 801225e:	4629      	mov	r1, r5
 8012260:	f7ee f9ca 	bl	80005f8 <__aeabi_dmul>
 8012264:	460b      	mov	r3, r1
 8012266:	4604      	mov	r4, r0
 8012268:	460d      	mov	r5, r1
 801226a:	4602      	mov	r2, r0
 801226c:	4649      	mov	r1, r9
 801226e:	4640      	mov	r0, r8
 8012270:	f7ee f80c 	bl	800028c <__adddf3>
 8012274:	4b19      	ldr	r3, [pc, #100]	; (80122dc <__ieee754_pow+0x3fc>)
 8012276:	4299      	cmp	r1, r3
 8012278:	ec45 4b19 	vmov	d9, r4, r5
 801227c:	4606      	mov	r6, r0
 801227e:	460f      	mov	r7, r1
 8012280:	468b      	mov	fp, r1
 8012282:	f340 82f0 	ble.w	8012866 <__ieee754_pow+0x986>
 8012286:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801228a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801228e:	4303      	orrs	r3, r0
 8012290:	f000 81e4 	beq.w	801265c <__ieee754_pow+0x77c>
 8012294:	ec51 0b18 	vmov	r0, r1, d8
 8012298:	2200      	movs	r2, #0
 801229a:	2300      	movs	r3, #0
 801229c:	f7ee fc1e 	bl	8000adc <__aeabi_dcmplt>
 80122a0:	3800      	subs	r0, #0
 80122a2:	bf18      	it	ne
 80122a4:	2001      	movne	r0, #1
 80122a6:	e72b      	b.n	8012100 <__ieee754_pow+0x220>
 80122a8:	60000000 	.word	0x60000000
 80122ac:	3ff71547 	.word	0x3ff71547
 80122b0:	f85ddf44 	.word	0xf85ddf44
 80122b4:	3e54ae0b 	.word	0x3e54ae0b
 80122b8:	55555555 	.word	0x55555555
 80122bc:	3fd55555 	.word	0x3fd55555
 80122c0:	652b82fe 	.word	0x652b82fe
 80122c4:	3ff71547 	.word	0x3ff71547
 80122c8:	00000000 	.word	0x00000000
 80122cc:	bff00000 	.word	0xbff00000
 80122d0:	3ff00000 	.word	0x3ff00000
 80122d4:	3fd00000 	.word	0x3fd00000
 80122d8:	3fe00000 	.word	0x3fe00000
 80122dc:	408fffff 	.word	0x408fffff
 80122e0:	4bd5      	ldr	r3, [pc, #852]	; (8012638 <__ieee754_pow+0x758>)
 80122e2:	402b      	ands	r3, r5
 80122e4:	2200      	movs	r2, #0
 80122e6:	b92b      	cbnz	r3, 80122f4 <__ieee754_pow+0x414>
 80122e8:	4bd4      	ldr	r3, [pc, #848]	; (801263c <__ieee754_pow+0x75c>)
 80122ea:	f7ee f985 	bl	80005f8 <__aeabi_dmul>
 80122ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80122f2:	460c      	mov	r4, r1
 80122f4:	1523      	asrs	r3, r4, #20
 80122f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80122fa:	4413      	add	r3, r2
 80122fc:	9305      	str	r3, [sp, #20]
 80122fe:	4bd0      	ldr	r3, [pc, #832]	; (8012640 <__ieee754_pow+0x760>)
 8012300:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012304:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012308:	429c      	cmp	r4, r3
 801230a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801230e:	dd08      	ble.n	8012322 <__ieee754_pow+0x442>
 8012310:	4bcc      	ldr	r3, [pc, #816]	; (8012644 <__ieee754_pow+0x764>)
 8012312:	429c      	cmp	r4, r3
 8012314:	f340 8162 	ble.w	80125dc <__ieee754_pow+0x6fc>
 8012318:	9b05      	ldr	r3, [sp, #20]
 801231a:	3301      	adds	r3, #1
 801231c:	9305      	str	r3, [sp, #20]
 801231e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012322:	2400      	movs	r4, #0
 8012324:	00e3      	lsls	r3, r4, #3
 8012326:	9307      	str	r3, [sp, #28]
 8012328:	4bc7      	ldr	r3, [pc, #796]	; (8012648 <__ieee754_pow+0x768>)
 801232a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801232e:	ed93 7b00 	vldr	d7, [r3]
 8012332:	4629      	mov	r1, r5
 8012334:	ec53 2b17 	vmov	r2, r3, d7
 8012338:	eeb0 9a47 	vmov.f32	s18, s14
 801233c:	eef0 9a67 	vmov.f32	s19, s15
 8012340:	4682      	mov	sl, r0
 8012342:	f7ed ffa1 	bl	8000288 <__aeabi_dsub>
 8012346:	4652      	mov	r2, sl
 8012348:	4606      	mov	r6, r0
 801234a:	460f      	mov	r7, r1
 801234c:	462b      	mov	r3, r5
 801234e:	ec51 0b19 	vmov	r0, r1, d9
 8012352:	f7ed ff9b 	bl	800028c <__adddf3>
 8012356:	4602      	mov	r2, r0
 8012358:	460b      	mov	r3, r1
 801235a:	2000      	movs	r0, #0
 801235c:	49bb      	ldr	r1, [pc, #748]	; (801264c <__ieee754_pow+0x76c>)
 801235e:	f7ee fa75 	bl	800084c <__aeabi_ddiv>
 8012362:	ec41 0b1a 	vmov	d10, r0, r1
 8012366:	4602      	mov	r2, r0
 8012368:	460b      	mov	r3, r1
 801236a:	4630      	mov	r0, r6
 801236c:	4639      	mov	r1, r7
 801236e:	f7ee f943 	bl	80005f8 <__aeabi_dmul>
 8012372:	2300      	movs	r3, #0
 8012374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012378:	9302      	str	r3, [sp, #8]
 801237a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801237e:	46ab      	mov	fp, r5
 8012380:	106d      	asrs	r5, r5, #1
 8012382:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012386:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801238a:	ec41 0b18 	vmov	d8, r0, r1
 801238e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012392:	2200      	movs	r2, #0
 8012394:	4640      	mov	r0, r8
 8012396:	4649      	mov	r1, r9
 8012398:	4614      	mov	r4, r2
 801239a:	461d      	mov	r5, r3
 801239c:	f7ee f92c 	bl	80005f8 <__aeabi_dmul>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4630      	mov	r0, r6
 80123a6:	4639      	mov	r1, r7
 80123a8:	f7ed ff6e 	bl	8000288 <__aeabi_dsub>
 80123ac:	ec53 2b19 	vmov	r2, r3, d9
 80123b0:	4606      	mov	r6, r0
 80123b2:	460f      	mov	r7, r1
 80123b4:	4620      	mov	r0, r4
 80123b6:	4629      	mov	r1, r5
 80123b8:	f7ed ff66 	bl	8000288 <__aeabi_dsub>
 80123bc:	4602      	mov	r2, r0
 80123be:	460b      	mov	r3, r1
 80123c0:	4650      	mov	r0, sl
 80123c2:	4659      	mov	r1, fp
 80123c4:	f7ed ff60 	bl	8000288 <__aeabi_dsub>
 80123c8:	4642      	mov	r2, r8
 80123ca:	464b      	mov	r3, r9
 80123cc:	f7ee f914 	bl	80005f8 <__aeabi_dmul>
 80123d0:	4602      	mov	r2, r0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4630      	mov	r0, r6
 80123d6:	4639      	mov	r1, r7
 80123d8:	f7ed ff56 	bl	8000288 <__aeabi_dsub>
 80123dc:	ec53 2b1a 	vmov	r2, r3, d10
 80123e0:	f7ee f90a 	bl	80005f8 <__aeabi_dmul>
 80123e4:	ec53 2b18 	vmov	r2, r3, d8
 80123e8:	ec41 0b19 	vmov	d9, r0, r1
 80123ec:	ec51 0b18 	vmov	r0, r1, d8
 80123f0:	f7ee f902 	bl	80005f8 <__aeabi_dmul>
 80123f4:	a37c      	add	r3, pc, #496	; (adr r3, 80125e8 <__ieee754_pow+0x708>)
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	4604      	mov	r4, r0
 80123fc:	460d      	mov	r5, r1
 80123fe:	f7ee f8fb 	bl	80005f8 <__aeabi_dmul>
 8012402:	a37b      	add	r3, pc, #492	; (adr r3, 80125f0 <__ieee754_pow+0x710>)
 8012404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012408:	f7ed ff40 	bl	800028c <__adddf3>
 801240c:	4622      	mov	r2, r4
 801240e:	462b      	mov	r3, r5
 8012410:	f7ee f8f2 	bl	80005f8 <__aeabi_dmul>
 8012414:	a378      	add	r3, pc, #480	; (adr r3, 80125f8 <__ieee754_pow+0x718>)
 8012416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241a:	f7ed ff37 	bl	800028c <__adddf3>
 801241e:	4622      	mov	r2, r4
 8012420:	462b      	mov	r3, r5
 8012422:	f7ee f8e9 	bl	80005f8 <__aeabi_dmul>
 8012426:	a376      	add	r3, pc, #472	; (adr r3, 8012600 <__ieee754_pow+0x720>)
 8012428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242c:	f7ed ff2e 	bl	800028c <__adddf3>
 8012430:	4622      	mov	r2, r4
 8012432:	462b      	mov	r3, r5
 8012434:	f7ee f8e0 	bl	80005f8 <__aeabi_dmul>
 8012438:	a373      	add	r3, pc, #460	; (adr r3, 8012608 <__ieee754_pow+0x728>)
 801243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243e:	f7ed ff25 	bl	800028c <__adddf3>
 8012442:	4622      	mov	r2, r4
 8012444:	462b      	mov	r3, r5
 8012446:	f7ee f8d7 	bl	80005f8 <__aeabi_dmul>
 801244a:	a371      	add	r3, pc, #452	; (adr r3, 8012610 <__ieee754_pow+0x730>)
 801244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012450:	f7ed ff1c 	bl	800028c <__adddf3>
 8012454:	4622      	mov	r2, r4
 8012456:	4606      	mov	r6, r0
 8012458:	460f      	mov	r7, r1
 801245a:	462b      	mov	r3, r5
 801245c:	4620      	mov	r0, r4
 801245e:	4629      	mov	r1, r5
 8012460:	f7ee f8ca 	bl	80005f8 <__aeabi_dmul>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	4630      	mov	r0, r6
 801246a:	4639      	mov	r1, r7
 801246c:	f7ee f8c4 	bl	80005f8 <__aeabi_dmul>
 8012470:	4642      	mov	r2, r8
 8012472:	4604      	mov	r4, r0
 8012474:	460d      	mov	r5, r1
 8012476:	464b      	mov	r3, r9
 8012478:	ec51 0b18 	vmov	r0, r1, d8
 801247c:	f7ed ff06 	bl	800028c <__adddf3>
 8012480:	ec53 2b19 	vmov	r2, r3, d9
 8012484:	f7ee f8b8 	bl	80005f8 <__aeabi_dmul>
 8012488:	4622      	mov	r2, r4
 801248a:	462b      	mov	r3, r5
 801248c:	f7ed fefe 	bl	800028c <__adddf3>
 8012490:	4642      	mov	r2, r8
 8012492:	4682      	mov	sl, r0
 8012494:	468b      	mov	fp, r1
 8012496:	464b      	mov	r3, r9
 8012498:	4640      	mov	r0, r8
 801249a:	4649      	mov	r1, r9
 801249c:	f7ee f8ac 	bl	80005f8 <__aeabi_dmul>
 80124a0:	4b6b      	ldr	r3, [pc, #428]	; (8012650 <__ieee754_pow+0x770>)
 80124a2:	2200      	movs	r2, #0
 80124a4:	4606      	mov	r6, r0
 80124a6:	460f      	mov	r7, r1
 80124a8:	f7ed fef0 	bl	800028c <__adddf3>
 80124ac:	4652      	mov	r2, sl
 80124ae:	465b      	mov	r3, fp
 80124b0:	f7ed feec 	bl	800028c <__adddf3>
 80124b4:	2000      	movs	r0, #0
 80124b6:	4604      	mov	r4, r0
 80124b8:	460d      	mov	r5, r1
 80124ba:	4602      	mov	r2, r0
 80124bc:	460b      	mov	r3, r1
 80124be:	4640      	mov	r0, r8
 80124c0:	4649      	mov	r1, r9
 80124c2:	f7ee f899 	bl	80005f8 <__aeabi_dmul>
 80124c6:	4b62      	ldr	r3, [pc, #392]	; (8012650 <__ieee754_pow+0x770>)
 80124c8:	4680      	mov	r8, r0
 80124ca:	4689      	mov	r9, r1
 80124cc:	2200      	movs	r2, #0
 80124ce:	4620      	mov	r0, r4
 80124d0:	4629      	mov	r1, r5
 80124d2:	f7ed fed9 	bl	8000288 <__aeabi_dsub>
 80124d6:	4632      	mov	r2, r6
 80124d8:	463b      	mov	r3, r7
 80124da:	f7ed fed5 	bl	8000288 <__aeabi_dsub>
 80124de:	4602      	mov	r2, r0
 80124e0:	460b      	mov	r3, r1
 80124e2:	4650      	mov	r0, sl
 80124e4:	4659      	mov	r1, fp
 80124e6:	f7ed fecf 	bl	8000288 <__aeabi_dsub>
 80124ea:	ec53 2b18 	vmov	r2, r3, d8
 80124ee:	f7ee f883 	bl	80005f8 <__aeabi_dmul>
 80124f2:	4622      	mov	r2, r4
 80124f4:	4606      	mov	r6, r0
 80124f6:	460f      	mov	r7, r1
 80124f8:	462b      	mov	r3, r5
 80124fa:	ec51 0b19 	vmov	r0, r1, d9
 80124fe:	f7ee f87b 	bl	80005f8 <__aeabi_dmul>
 8012502:	4602      	mov	r2, r0
 8012504:	460b      	mov	r3, r1
 8012506:	4630      	mov	r0, r6
 8012508:	4639      	mov	r1, r7
 801250a:	f7ed febf 	bl	800028c <__adddf3>
 801250e:	4606      	mov	r6, r0
 8012510:	460f      	mov	r7, r1
 8012512:	4602      	mov	r2, r0
 8012514:	460b      	mov	r3, r1
 8012516:	4640      	mov	r0, r8
 8012518:	4649      	mov	r1, r9
 801251a:	f7ed feb7 	bl	800028c <__adddf3>
 801251e:	a33e      	add	r3, pc, #248	; (adr r3, 8012618 <__ieee754_pow+0x738>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	2000      	movs	r0, #0
 8012526:	4604      	mov	r4, r0
 8012528:	460d      	mov	r5, r1
 801252a:	f7ee f865 	bl	80005f8 <__aeabi_dmul>
 801252e:	4642      	mov	r2, r8
 8012530:	ec41 0b18 	vmov	d8, r0, r1
 8012534:	464b      	mov	r3, r9
 8012536:	4620      	mov	r0, r4
 8012538:	4629      	mov	r1, r5
 801253a:	f7ed fea5 	bl	8000288 <__aeabi_dsub>
 801253e:	4602      	mov	r2, r0
 8012540:	460b      	mov	r3, r1
 8012542:	4630      	mov	r0, r6
 8012544:	4639      	mov	r1, r7
 8012546:	f7ed fe9f 	bl	8000288 <__aeabi_dsub>
 801254a:	a335      	add	r3, pc, #212	; (adr r3, 8012620 <__ieee754_pow+0x740>)
 801254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012550:	f7ee f852 	bl	80005f8 <__aeabi_dmul>
 8012554:	a334      	add	r3, pc, #208	; (adr r3, 8012628 <__ieee754_pow+0x748>)
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	4606      	mov	r6, r0
 801255c:	460f      	mov	r7, r1
 801255e:	4620      	mov	r0, r4
 8012560:	4629      	mov	r1, r5
 8012562:	f7ee f849 	bl	80005f8 <__aeabi_dmul>
 8012566:	4602      	mov	r2, r0
 8012568:	460b      	mov	r3, r1
 801256a:	4630      	mov	r0, r6
 801256c:	4639      	mov	r1, r7
 801256e:	f7ed fe8d 	bl	800028c <__adddf3>
 8012572:	9a07      	ldr	r2, [sp, #28]
 8012574:	4b37      	ldr	r3, [pc, #220]	; (8012654 <__ieee754_pow+0x774>)
 8012576:	4413      	add	r3, r2
 8012578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257c:	f7ed fe86 	bl	800028c <__adddf3>
 8012580:	4682      	mov	sl, r0
 8012582:	9805      	ldr	r0, [sp, #20]
 8012584:	468b      	mov	fp, r1
 8012586:	f7ed ffcd 	bl	8000524 <__aeabi_i2d>
 801258a:	9a07      	ldr	r2, [sp, #28]
 801258c:	4b32      	ldr	r3, [pc, #200]	; (8012658 <__ieee754_pow+0x778>)
 801258e:	4413      	add	r3, r2
 8012590:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012594:	4606      	mov	r6, r0
 8012596:	460f      	mov	r7, r1
 8012598:	4652      	mov	r2, sl
 801259a:	465b      	mov	r3, fp
 801259c:	ec51 0b18 	vmov	r0, r1, d8
 80125a0:	f7ed fe74 	bl	800028c <__adddf3>
 80125a4:	4642      	mov	r2, r8
 80125a6:	464b      	mov	r3, r9
 80125a8:	f7ed fe70 	bl	800028c <__adddf3>
 80125ac:	4632      	mov	r2, r6
 80125ae:	463b      	mov	r3, r7
 80125b0:	f7ed fe6c 	bl	800028c <__adddf3>
 80125b4:	2000      	movs	r0, #0
 80125b6:	4632      	mov	r2, r6
 80125b8:	463b      	mov	r3, r7
 80125ba:	4604      	mov	r4, r0
 80125bc:	460d      	mov	r5, r1
 80125be:	f7ed fe63 	bl	8000288 <__aeabi_dsub>
 80125c2:	4642      	mov	r2, r8
 80125c4:	464b      	mov	r3, r9
 80125c6:	f7ed fe5f 	bl	8000288 <__aeabi_dsub>
 80125ca:	ec53 2b18 	vmov	r2, r3, d8
 80125ce:	f7ed fe5b 	bl	8000288 <__aeabi_dsub>
 80125d2:	4602      	mov	r2, r0
 80125d4:	460b      	mov	r3, r1
 80125d6:	4650      	mov	r0, sl
 80125d8:	4659      	mov	r1, fp
 80125da:	e610      	b.n	80121fe <__ieee754_pow+0x31e>
 80125dc:	2401      	movs	r4, #1
 80125de:	e6a1      	b.n	8012324 <__ieee754_pow+0x444>
 80125e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012630 <__ieee754_pow+0x750>
 80125e4:	e617      	b.n	8012216 <__ieee754_pow+0x336>
 80125e6:	bf00      	nop
 80125e8:	4a454eef 	.word	0x4a454eef
 80125ec:	3fca7e28 	.word	0x3fca7e28
 80125f0:	93c9db65 	.word	0x93c9db65
 80125f4:	3fcd864a 	.word	0x3fcd864a
 80125f8:	a91d4101 	.word	0xa91d4101
 80125fc:	3fd17460 	.word	0x3fd17460
 8012600:	518f264d 	.word	0x518f264d
 8012604:	3fd55555 	.word	0x3fd55555
 8012608:	db6fabff 	.word	0xdb6fabff
 801260c:	3fdb6db6 	.word	0x3fdb6db6
 8012610:	33333303 	.word	0x33333303
 8012614:	3fe33333 	.word	0x3fe33333
 8012618:	e0000000 	.word	0xe0000000
 801261c:	3feec709 	.word	0x3feec709
 8012620:	dc3a03fd 	.word	0xdc3a03fd
 8012624:	3feec709 	.word	0x3feec709
 8012628:	145b01f5 	.word	0x145b01f5
 801262c:	be3e2fe0 	.word	0xbe3e2fe0
 8012630:	00000000 	.word	0x00000000
 8012634:	3ff00000 	.word	0x3ff00000
 8012638:	7ff00000 	.word	0x7ff00000
 801263c:	43400000 	.word	0x43400000
 8012640:	0003988e 	.word	0x0003988e
 8012644:	000bb679 	.word	0x000bb679
 8012648:	080132d0 	.word	0x080132d0
 801264c:	3ff00000 	.word	0x3ff00000
 8012650:	40080000 	.word	0x40080000
 8012654:	080132f0 	.word	0x080132f0
 8012658:	080132e0 	.word	0x080132e0
 801265c:	a3b3      	add	r3, pc, #716	; (adr r3, 801292c <__ieee754_pow+0xa4c>)
 801265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012662:	4640      	mov	r0, r8
 8012664:	4649      	mov	r1, r9
 8012666:	f7ed fe11 	bl	800028c <__adddf3>
 801266a:	4622      	mov	r2, r4
 801266c:	ec41 0b1a 	vmov	d10, r0, r1
 8012670:	462b      	mov	r3, r5
 8012672:	4630      	mov	r0, r6
 8012674:	4639      	mov	r1, r7
 8012676:	f7ed fe07 	bl	8000288 <__aeabi_dsub>
 801267a:	4602      	mov	r2, r0
 801267c:	460b      	mov	r3, r1
 801267e:	ec51 0b1a 	vmov	r0, r1, d10
 8012682:	f7ee fa49 	bl	8000b18 <__aeabi_dcmpgt>
 8012686:	2800      	cmp	r0, #0
 8012688:	f47f ae04 	bne.w	8012294 <__ieee754_pow+0x3b4>
 801268c:	4aa2      	ldr	r2, [pc, #648]	; (8012918 <__ieee754_pow+0xa38>)
 801268e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012692:	4293      	cmp	r3, r2
 8012694:	f340 8107 	ble.w	80128a6 <__ieee754_pow+0x9c6>
 8012698:	151b      	asrs	r3, r3, #20
 801269a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801269e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80126a2:	fa4a fa03 	asr.w	sl, sl, r3
 80126a6:	44da      	add	sl, fp
 80126a8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80126ac:	489b      	ldr	r0, [pc, #620]	; (801291c <__ieee754_pow+0xa3c>)
 80126ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80126b2:	4108      	asrs	r0, r1
 80126b4:	ea00 030a 	and.w	r3, r0, sl
 80126b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80126bc:	f1c1 0114 	rsb	r1, r1, #20
 80126c0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80126c4:	fa4a fa01 	asr.w	sl, sl, r1
 80126c8:	f1bb 0f00 	cmp.w	fp, #0
 80126cc:	f04f 0200 	mov.w	r2, #0
 80126d0:	4620      	mov	r0, r4
 80126d2:	4629      	mov	r1, r5
 80126d4:	bfb8      	it	lt
 80126d6:	f1ca 0a00 	rsblt	sl, sl, #0
 80126da:	f7ed fdd5 	bl	8000288 <__aeabi_dsub>
 80126de:	ec41 0b19 	vmov	d9, r0, r1
 80126e2:	4642      	mov	r2, r8
 80126e4:	464b      	mov	r3, r9
 80126e6:	ec51 0b19 	vmov	r0, r1, d9
 80126ea:	f7ed fdcf 	bl	800028c <__adddf3>
 80126ee:	a37a      	add	r3, pc, #488	; (adr r3, 80128d8 <__ieee754_pow+0x9f8>)
 80126f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f4:	2000      	movs	r0, #0
 80126f6:	4604      	mov	r4, r0
 80126f8:	460d      	mov	r5, r1
 80126fa:	f7ed ff7d 	bl	80005f8 <__aeabi_dmul>
 80126fe:	ec53 2b19 	vmov	r2, r3, d9
 8012702:	4606      	mov	r6, r0
 8012704:	460f      	mov	r7, r1
 8012706:	4620      	mov	r0, r4
 8012708:	4629      	mov	r1, r5
 801270a:	f7ed fdbd 	bl	8000288 <__aeabi_dsub>
 801270e:	4602      	mov	r2, r0
 8012710:	460b      	mov	r3, r1
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	f7ed fdb7 	bl	8000288 <__aeabi_dsub>
 801271a:	a371      	add	r3, pc, #452	; (adr r3, 80128e0 <__ieee754_pow+0xa00>)
 801271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012720:	f7ed ff6a 	bl	80005f8 <__aeabi_dmul>
 8012724:	a370      	add	r3, pc, #448	; (adr r3, 80128e8 <__ieee754_pow+0xa08>)
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	4680      	mov	r8, r0
 801272c:	4689      	mov	r9, r1
 801272e:	4620      	mov	r0, r4
 8012730:	4629      	mov	r1, r5
 8012732:	f7ed ff61 	bl	80005f8 <__aeabi_dmul>
 8012736:	4602      	mov	r2, r0
 8012738:	460b      	mov	r3, r1
 801273a:	4640      	mov	r0, r8
 801273c:	4649      	mov	r1, r9
 801273e:	f7ed fda5 	bl	800028c <__adddf3>
 8012742:	4604      	mov	r4, r0
 8012744:	460d      	mov	r5, r1
 8012746:	4602      	mov	r2, r0
 8012748:	460b      	mov	r3, r1
 801274a:	4630      	mov	r0, r6
 801274c:	4639      	mov	r1, r7
 801274e:	f7ed fd9d 	bl	800028c <__adddf3>
 8012752:	4632      	mov	r2, r6
 8012754:	463b      	mov	r3, r7
 8012756:	4680      	mov	r8, r0
 8012758:	4689      	mov	r9, r1
 801275a:	f7ed fd95 	bl	8000288 <__aeabi_dsub>
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	4620      	mov	r0, r4
 8012764:	4629      	mov	r1, r5
 8012766:	f7ed fd8f 	bl	8000288 <__aeabi_dsub>
 801276a:	4642      	mov	r2, r8
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	464b      	mov	r3, r9
 8012772:	4640      	mov	r0, r8
 8012774:	4649      	mov	r1, r9
 8012776:	f7ed ff3f 	bl	80005f8 <__aeabi_dmul>
 801277a:	a35d      	add	r3, pc, #372	; (adr r3, 80128f0 <__ieee754_pow+0xa10>)
 801277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012780:	4604      	mov	r4, r0
 8012782:	460d      	mov	r5, r1
 8012784:	f7ed ff38 	bl	80005f8 <__aeabi_dmul>
 8012788:	a35b      	add	r3, pc, #364	; (adr r3, 80128f8 <__ieee754_pow+0xa18>)
 801278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278e:	f7ed fd7b 	bl	8000288 <__aeabi_dsub>
 8012792:	4622      	mov	r2, r4
 8012794:	462b      	mov	r3, r5
 8012796:	f7ed ff2f 	bl	80005f8 <__aeabi_dmul>
 801279a:	a359      	add	r3, pc, #356	; (adr r3, 8012900 <__ieee754_pow+0xa20>)
 801279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a0:	f7ed fd74 	bl	800028c <__adddf3>
 80127a4:	4622      	mov	r2, r4
 80127a6:	462b      	mov	r3, r5
 80127a8:	f7ed ff26 	bl	80005f8 <__aeabi_dmul>
 80127ac:	a356      	add	r3, pc, #344	; (adr r3, 8012908 <__ieee754_pow+0xa28>)
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	f7ed fd69 	bl	8000288 <__aeabi_dsub>
 80127b6:	4622      	mov	r2, r4
 80127b8:	462b      	mov	r3, r5
 80127ba:	f7ed ff1d 	bl	80005f8 <__aeabi_dmul>
 80127be:	a354      	add	r3, pc, #336	; (adr r3, 8012910 <__ieee754_pow+0xa30>)
 80127c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c4:	f7ed fd62 	bl	800028c <__adddf3>
 80127c8:	4622      	mov	r2, r4
 80127ca:	462b      	mov	r3, r5
 80127cc:	f7ed ff14 	bl	80005f8 <__aeabi_dmul>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	4640      	mov	r0, r8
 80127d6:	4649      	mov	r1, r9
 80127d8:	f7ed fd56 	bl	8000288 <__aeabi_dsub>
 80127dc:	4604      	mov	r4, r0
 80127de:	460d      	mov	r5, r1
 80127e0:	4602      	mov	r2, r0
 80127e2:	460b      	mov	r3, r1
 80127e4:	4640      	mov	r0, r8
 80127e6:	4649      	mov	r1, r9
 80127e8:	f7ed ff06 	bl	80005f8 <__aeabi_dmul>
 80127ec:	2200      	movs	r2, #0
 80127ee:	ec41 0b19 	vmov	d9, r0, r1
 80127f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127f6:	4620      	mov	r0, r4
 80127f8:	4629      	mov	r1, r5
 80127fa:	f7ed fd45 	bl	8000288 <__aeabi_dsub>
 80127fe:	4602      	mov	r2, r0
 8012800:	460b      	mov	r3, r1
 8012802:	ec51 0b19 	vmov	r0, r1, d9
 8012806:	f7ee f821 	bl	800084c <__aeabi_ddiv>
 801280a:	4632      	mov	r2, r6
 801280c:	4604      	mov	r4, r0
 801280e:	460d      	mov	r5, r1
 8012810:	463b      	mov	r3, r7
 8012812:	4640      	mov	r0, r8
 8012814:	4649      	mov	r1, r9
 8012816:	f7ed feef 	bl	80005f8 <__aeabi_dmul>
 801281a:	4632      	mov	r2, r6
 801281c:	463b      	mov	r3, r7
 801281e:	f7ed fd35 	bl	800028c <__adddf3>
 8012822:	4602      	mov	r2, r0
 8012824:	460b      	mov	r3, r1
 8012826:	4620      	mov	r0, r4
 8012828:	4629      	mov	r1, r5
 801282a:	f7ed fd2d 	bl	8000288 <__aeabi_dsub>
 801282e:	4642      	mov	r2, r8
 8012830:	464b      	mov	r3, r9
 8012832:	f7ed fd29 	bl	8000288 <__aeabi_dsub>
 8012836:	460b      	mov	r3, r1
 8012838:	4602      	mov	r2, r0
 801283a:	4939      	ldr	r1, [pc, #228]	; (8012920 <__ieee754_pow+0xa40>)
 801283c:	2000      	movs	r0, #0
 801283e:	f7ed fd23 	bl	8000288 <__aeabi_dsub>
 8012842:	ec41 0b10 	vmov	d0, r0, r1
 8012846:	ee10 3a90 	vmov	r3, s1
 801284a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801284e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012852:	da2b      	bge.n	80128ac <__ieee754_pow+0x9cc>
 8012854:	4650      	mov	r0, sl
 8012856:	f000 f877 	bl	8012948 <scalbn>
 801285a:	ec51 0b10 	vmov	r0, r1, d0
 801285e:	ec53 2b18 	vmov	r2, r3, d8
 8012862:	f7ff bbee 	b.w	8012042 <__ieee754_pow+0x162>
 8012866:	4b2f      	ldr	r3, [pc, #188]	; (8012924 <__ieee754_pow+0xa44>)
 8012868:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801286c:	429e      	cmp	r6, r3
 801286e:	f77f af0d 	ble.w	801268c <__ieee754_pow+0x7ac>
 8012872:	4b2d      	ldr	r3, [pc, #180]	; (8012928 <__ieee754_pow+0xa48>)
 8012874:	440b      	add	r3, r1
 8012876:	4303      	orrs	r3, r0
 8012878:	d009      	beq.n	801288e <__ieee754_pow+0x9ae>
 801287a:	ec51 0b18 	vmov	r0, r1, d8
 801287e:	2200      	movs	r2, #0
 8012880:	2300      	movs	r3, #0
 8012882:	f7ee f92b 	bl	8000adc <__aeabi_dcmplt>
 8012886:	3800      	subs	r0, #0
 8012888:	bf18      	it	ne
 801288a:	2001      	movne	r0, #1
 801288c:	e448      	b.n	8012120 <__ieee754_pow+0x240>
 801288e:	4622      	mov	r2, r4
 8012890:	462b      	mov	r3, r5
 8012892:	f7ed fcf9 	bl	8000288 <__aeabi_dsub>
 8012896:	4642      	mov	r2, r8
 8012898:	464b      	mov	r3, r9
 801289a:	f7ee f933 	bl	8000b04 <__aeabi_dcmpge>
 801289e:	2800      	cmp	r0, #0
 80128a0:	f43f aef4 	beq.w	801268c <__ieee754_pow+0x7ac>
 80128a4:	e7e9      	b.n	801287a <__ieee754_pow+0x99a>
 80128a6:	f04f 0a00 	mov.w	sl, #0
 80128aa:	e71a      	b.n	80126e2 <__ieee754_pow+0x802>
 80128ac:	ec51 0b10 	vmov	r0, r1, d0
 80128b0:	4619      	mov	r1, r3
 80128b2:	e7d4      	b.n	801285e <__ieee754_pow+0x97e>
 80128b4:	491a      	ldr	r1, [pc, #104]	; (8012920 <__ieee754_pow+0xa40>)
 80128b6:	2000      	movs	r0, #0
 80128b8:	f7ff bb31 	b.w	8011f1e <__ieee754_pow+0x3e>
 80128bc:	2000      	movs	r0, #0
 80128be:	2100      	movs	r1, #0
 80128c0:	f7ff bb2d 	b.w	8011f1e <__ieee754_pow+0x3e>
 80128c4:	4630      	mov	r0, r6
 80128c6:	4639      	mov	r1, r7
 80128c8:	f7ff bb29 	b.w	8011f1e <__ieee754_pow+0x3e>
 80128cc:	9204      	str	r2, [sp, #16]
 80128ce:	f7ff bb7b 	b.w	8011fc8 <__ieee754_pow+0xe8>
 80128d2:	2300      	movs	r3, #0
 80128d4:	f7ff bb65 	b.w	8011fa2 <__ieee754_pow+0xc2>
 80128d8:	00000000 	.word	0x00000000
 80128dc:	3fe62e43 	.word	0x3fe62e43
 80128e0:	fefa39ef 	.word	0xfefa39ef
 80128e4:	3fe62e42 	.word	0x3fe62e42
 80128e8:	0ca86c39 	.word	0x0ca86c39
 80128ec:	be205c61 	.word	0xbe205c61
 80128f0:	72bea4d0 	.word	0x72bea4d0
 80128f4:	3e663769 	.word	0x3e663769
 80128f8:	c5d26bf1 	.word	0xc5d26bf1
 80128fc:	3ebbbd41 	.word	0x3ebbbd41
 8012900:	af25de2c 	.word	0xaf25de2c
 8012904:	3f11566a 	.word	0x3f11566a
 8012908:	16bebd93 	.word	0x16bebd93
 801290c:	3f66c16c 	.word	0x3f66c16c
 8012910:	5555553e 	.word	0x5555553e
 8012914:	3fc55555 	.word	0x3fc55555
 8012918:	3fe00000 	.word	0x3fe00000
 801291c:	fff00000 	.word	0xfff00000
 8012920:	3ff00000 	.word	0x3ff00000
 8012924:	4090cbff 	.word	0x4090cbff
 8012928:	3f6f3400 	.word	0x3f6f3400
 801292c:	652b82fe 	.word	0x652b82fe
 8012930:	3c971547 	.word	0x3c971547

08012934 <fabs>:
 8012934:	ec51 0b10 	vmov	r0, r1, d0
 8012938:	ee10 2a10 	vmov	r2, s0
 801293c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012940:	ec43 2b10 	vmov	d0, r2, r3
 8012944:	4770      	bx	lr
	...

08012948 <scalbn>:
 8012948:	b570      	push	{r4, r5, r6, lr}
 801294a:	ec55 4b10 	vmov	r4, r5, d0
 801294e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012952:	4606      	mov	r6, r0
 8012954:	462b      	mov	r3, r5
 8012956:	b999      	cbnz	r1, 8012980 <scalbn+0x38>
 8012958:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801295c:	4323      	orrs	r3, r4
 801295e:	d03f      	beq.n	80129e0 <scalbn+0x98>
 8012960:	4b35      	ldr	r3, [pc, #212]	; (8012a38 <scalbn+0xf0>)
 8012962:	4629      	mov	r1, r5
 8012964:	ee10 0a10 	vmov	r0, s0
 8012968:	2200      	movs	r2, #0
 801296a:	f7ed fe45 	bl	80005f8 <__aeabi_dmul>
 801296e:	4b33      	ldr	r3, [pc, #204]	; (8012a3c <scalbn+0xf4>)
 8012970:	429e      	cmp	r6, r3
 8012972:	4604      	mov	r4, r0
 8012974:	460d      	mov	r5, r1
 8012976:	da10      	bge.n	801299a <scalbn+0x52>
 8012978:	a327      	add	r3, pc, #156	; (adr r3, 8012a18 <scalbn+0xd0>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	e01f      	b.n	80129c0 <scalbn+0x78>
 8012980:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012984:	4291      	cmp	r1, r2
 8012986:	d10c      	bne.n	80129a2 <scalbn+0x5a>
 8012988:	ee10 2a10 	vmov	r2, s0
 801298c:	4620      	mov	r0, r4
 801298e:	4629      	mov	r1, r5
 8012990:	f7ed fc7c 	bl	800028c <__adddf3>
 8012994:	4604      	mov	r4, r0
 8012996:	460d      	mov	r5, r1
 8012998:	e022      	b.n	80129e0 <scalbn+0x98>
 801299a:	460b      	mov	r3, r1
 801299c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80129a0:	3936      	subs	r1, #54	; 0x36
 80129a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80129a6:	4296      	cmp	r6, r2
 80129a8:	dd0d      	ble.n	80129c6 <scalbn+0x7e>
 80129aa:	2d00      	cmp	r5, #0
 80129ac:	a11c      	add	r1, pc, #112	; (adr r1, 8012a20 <scalbn+0xd8>)
 80129ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129b2:	da02      	bge.n	80129ba <scalbn+0x72>
 80129b4:	a11c      	add	r1, pc, #112	; (adr r1, 8012a28 <scalbn+0xe0>)
 80129b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129ba:	a319      	add	r3, pc, #100	; (adr r3, 8012a20 <scalbn+0xd8>)
 80129bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c0:	f7ed fe1a 	bl	80005f8 <__aeabi_dmul>
 80129c4:	e7e6      	b.n	8012994 <scalbn+0x4c>
 80129c6:	1872      	adds	r2, r6, r1
 80129c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80129cc:	428a      	cmp	r2, r1
 80129ce:	dcec      	bgt.n	80129aa <scalbn+0x62>
 80129d0:	2a00      	cmp	r2, #0
 80129d2:	dd08      	ble.n	80129e6 <scalbn+0x9e>
 80129d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80129d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80129dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80129e0:	ec45 4b10 	vmov	d0, r4, r5
 80129e4:	bd70      	pop	{r4, r5, r6, pc}
 80129e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80129ea:	da08      	bge.n	80129fe <scalbn+0xb6>
 80129ec:	2d00      	cmp	r5, #0
 80129ee:	a10a      	add	r1, pc, #40	; (adr r1, 8012a18 <scalbn+0xd0>)
 80129f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129f4:	dac0      	bge.n	8012978 <scalbn+0x30>
 80129f6:	a10e      	add	r1, pc, #56	; (adr r1, 8012a30 <scalbn+0xe8>)
 80129f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129fc:	e7bc      	b.n	8012978 <scalbn+0x30>
 80129fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012a02:	3236      	adds	r2, #54	; 0x36
 8012a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012a08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4b0c      	ldr	r3, [pc, #48]	; (8012a40 <scalbn+0xf8>)
 8012a10:	2200      	movs	r2, #0
 8012a12:	e7d5      	b.n	80129c0 <scalbn+0x78>
 8012a14:	f3af 8000 	nop.w
 8012a18:	c2f8f359 	.word	0xc2f8f359
 8012a1c:	01a56e1f 	.word	0x01a56e1f
 8012a20:	8800759c 	.word	0x8800759c
 8012a24:	7e37e43c 	.word	0x7e37e43c
 8012a28:	8800759c 	.word	0x8800759c
 8012a2c:	fe37e43c 	.word	0xfe37e43c
 8012a30:	c2f8f359 	.word	0xc2f8f359
 8012a34:	81a56e1f 	.word	0x81a56e1f
 8012a38:	43500000 	.word	0x43500000
 8012a3c:	ffff3cb0 	.word	0xffff3cb0
 8012a40:	3c900000 	.word	0x3c900000

08012a44 <with_errno>:
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	4604      	mov	r4, r0
 8012a48:	460d      	mov	r5, r1
 8012a4a:	4616      	mov	r6, r2
 8012a4c:	f7fb fda8 	bl	800e5a0 <__errno>
 8012a50:	4629      	mov	r1, r5
 8012a52:	6006      	str	r6, [r0, #0]
 8012a54:	4620      	mov	r0, r4
 8012a56:	bd70      	pop	{r4, r5, r6, pc}

08012a58 <xflow>:
 8012a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a5a:	4614      	mov	r4, r2
 8012a5c:	461d      	mov	r5, r3
 8012a5e:	b108      	cbz	r0, 8012a64 <xflow+0xc>
 8012a60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012a64:	e9cd 2300 	strd	r2, r3, [sp]
 8012a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	4629      	mov	r1, r5
 8012a70:	f7ed fdc2 	bl	80005f8 <__aeabi_dmul>
 8012a74:	2222      	movs	r2, #34	; 0x22
 8012a76:	b003      	add	sp, #12
 8012a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a7c:	f7ff bfe2 	b.w	8012a44 <with_errno>

08012a80 <__math_uflow>:
 8012a80:	b508      	push	{r3, lr}
 8012a82:	2200      	movs	r2, #0
 8012a84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012a88:	f7ff ffe6 	bl	8012a58 <xflow>
 8012a8c:	ec41 0b10 	vmov	d0, r0, r1
 8012a90:	bd08      	pop	{r3, pc}

08012a92 <__math_oflow>:
 8012a92:	b508      	push	{r3, lr}
 8012a94:	2200      	movs	r2, #0
 8012a96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012a9a:	f7ff ffdd 	bl	8012a58 <xflow>
 8012a9e:	ec41 0b10 	vmov	d0, r0, r1
 8012aa2:	bd08      	pop	{r3, pc}

08012aa4 <__ieee754_sqrt>:
 8012aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	ec55 4b10 	vmov	r4, r5, d0
 8012aac:	4e67      	ldr	r6, [pc, #412]	; (8012c4c <__ieee754_sqrt+0x1a8>)
 8012aae:	43ae      	bics	r6, r5
 8012ab0:	ee10 0a10 	vmov	r0, s0
 8012ab4:	ee10 2a10 	vmov	r2, s0
 8012ab8:	4629      	mov	r1, r5
 8012aba:	462b      	mov	r3, r5
 8012abc:	d10d      	bne.n	8012ada <__ieee754_sqrt+0x36>
 8012abe:	f7ed fd9b 	bl	80005f8 <__aeabi_dmul>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f7ed fbdf 	bl	800028c <__adddf3>
 8012ace:	4604      	mov	r4, r0
 8012ad0:	460d      	mov	r5, r1
 8012ad2:	ec45 4b10 	vmov	d0, r4, r5
 8012ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ada:	2d00      	cmp	r5, #0
 8012adc:	dc0b      	bgt.n	8012af6 <__ieee754_sqrt+0x52>
 8012ade:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012ae2:	4326      	orrs	r6, r4
 8012ae4:	d0f5      	beq.n	8012ad2 <__ieee754_sqrt+0x2e>
 8012ae6:	b135      	cbz	r5, 8012af6 <__ieee754_sqrt+0x52>
 8012ae8:	f7ed fbce 	bl	8000288 <__aeabi_dsub>
 8012aec:	4602      	mov	r2, r0
 8012aee:	460b      	mov	r3, r1
 8012af0:	f7ed feac 	bl	800084c <__aeabi_ddiv>
 8012af4:	e7eb      	b.n	8012ace <__ieee754_sqrt+0x2a>
 8012af6:	1509      	asrs	r1, r1, #20
 8012af8:	f000 808d 	beq.w	8012c16 <__ieee754_sqrt+0x172>
 8012afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b00:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b08:	07c9      	lsls	r1, r1, #31
 8012b0a:	bf5c      	itt	pl
 8012b0c:	005b      	lslpl	r3, r3, #1
 8012b0e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012b12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b16:	bf58      	it	pl
 8012b18:	0052      	lslpl	r2, r2, #1
 8012b1a:	2500      	movs	r5, #0
 8012b1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012b20:	1076      	asrs	r6, r6, #1
 8012b22:	0052      	lsls	r2, r2, #1
 8012b24:	f04f 0e16 	mov.w	lr, #22
 8012b28:	46ac      	mov	ip, r5
 8012b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012b2e:	eb0c 0001 	add.w	r0, ip, r1
 8012b32:	4298      	cmp	r0, r3
 8012b34:	bfde      	ittt	le
 8012b36:	1a1b      	suble	r3, r3, r0
 8012b38:	eb00 0c01 	addle.w	ip, r0, r1
 8012b3c:	186d      	addle	r5, r5, r1
 8012b3e:	005b      	lsls	r3, r3, #1
 8012b40:	f1be 0e01 	subs.w	lr, lr, #1
 8012b44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012b48:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012b4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012b50:	d1ed      	bne.n	8012b2e <__ieee754_sqrt+0x8a>
 8012b52:	4674      	mov	r4, lr
 8012b54:	2720      	movs	r7, #32
 8012b56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012b5a:	4563      	cmp	r3, ip
 8012b5c:	eb01 000e 	add.w	r0, r1, lr
 8012b60:	dc02      	bgt.n	8012b68 <__ieee754_sqrt+0xc4>
 8012b62:	d113      	bne.n	8012b8c <__ieee754_sqrt+0xe8>
 8012b64:	4290      	cmp	r0, r2
 8012b66:	d811      	bhi.n	8012b8c <__ieee754_sqrt+0xe8>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	eb00 0e01 	add.w	lr, r0, r1
 8012b6e:	da57      	bge.n	8012c20 <__ieee754_sqrt+0x17c>
 8012b70:	f1be 0f00 	cmp.w	lr, #0
 8012b74:	db54      	blt.n	8012c20 <__ieee754_sqrt+0x17c>
 8012b76:	f10c 0801 	add.w	r8, ip, #1
 8012b7a:	eba3 030c 	sub.w	r3, r3, ip
 8012b7e:	4290      	cmp	r0, r2
 8012b80:	bf88      	it	hi
 8012b82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012b86:	1a12      	subs	r2, r2, r0
 8012b88:	440c      	add	r4, r1
 8012b8a:	46c4      	mov	ip, r8
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	3f01      	subs	r7, #1
 8012b90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012b94:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012b98:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012b9c:	d1dd      	bne.n	8012b5a <__ieee754_sqrt+0xb6>
 8012b9e:	4313      	orrs	r3, r2
 8012ba0:	d01b      	beq.n	8012bda <__ieee754_sqrt+0x136>
 8012ba2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012c50 <__ieee754_sqrt+0x1ac>
 8012ba6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012c54 <__ieee754_sqrt+0x1b0>
 8012baa:	e9da 0100 	ldrd	r0, r1, [sl]
 8012bae:	e9db 2300 	ldrd	r2, r3, [fp]
 8012bb2:	f7ed fb69 	bl	8000288 <__aeabi_dsub>
 8012bb6:	e9da 8900 	ldrd	r8, r9, [sl]
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4640      	mov	r0, r8
 8012bc0:	4649      	mov	r1, r9
 8012bc2:	f7ed ff95 	bl	8000af0 <__aeabi_dcmple>
 8012bc6:	b140      	cbz	r0, 8012bda <__ieee754_sqrt+0x136>
 8012bc8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012bcc:	e9da 0100 	ldrd	r0, r1, [sl]
 8012bd0:	e9db 2300 	ldrd	r2, r3, [fp]
 8012bd4:	d126      	bne.n	8012c24 <__ieee754_sqrt+0x180>
 8012bd6:	3501      	adds	r5, #1
 8012bd8:	463c      	mov	r4, r7
 8012bda:	106a      	asrs	r2, r5, #1
 8012bdc:	0863      	lsrs	r3, r4, #1
 8012bde:	07e9      	lsls	r1, r5, #31
 8012be0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012be4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012be8:	bf48      	it	mi
 8012bea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012bee:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012bf2:	461c      	mov	r4, r3
 8012bf4:	e76d      	b.n	8012ad2 <__ieee754_sqrt+0x2e>
 8012bf6:	0ad3      	lsrs	r3, r2, #11
 8012bf8:	3815      	subs	r0, #21
 8012bfa:	0552      	lsls	r2, r2, #21
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d0fa      	beq.n	8012bf6 <__ieee754_sqrt+0x152>
 8012c00:	02dc      	lsls	r4, r3, #11
 8012c02:	d50a      	bpl.n	8012c1a <__ieee754_sqrt+0x176>
 8012c04:	f1c1 0420 	rsb	r4, r1, #32
 8012c08:	fa22 f404 	lsr.w	r4, r2, r4
 8012c0c:	1e4d      	subs	r5, r1, #1
 8012c0e:	408a      	lsls	r2, r1
 8012c10:	4323      	orrs	r3, r4
 8012c12:	1b41      	subs	r1, r0, r5
 8012c14:	e772      	b.n	8012afc <__ieee754_sqrt+0x58>
 8012c16:	4608      	mov	r0, r1
 8012c18:	e7f0      	b.n	8012bfc <__ieee754_sqrt+0x158>
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	3101      	adds	r1, #1
 8012c1e:	e7ef      	b.n	8012c00 <__ieee754_sqrt+0x15c>
 8012c20:	46e0      	mov	r8, ip
 8012c22:	e7aa      	b.n	8012b7a <__ieee754_sqrt+0xd6>
 8012c24:	f7ed fb32 	bl	800028c <__adddf3>
 8012c28:	e9da 8900 	ldrd	r8, r9, [sl]
 8012c2c:	4602      	mov	r2, r0
 8012c2e:	460b      	mov	r3, r1
 8012c30:	4640      	mov	r0, r8
 8012c32:	4649      	mov	r1, r9
 8012c34:	f7ed ff52 	bl	8000adc <__aeabi_dcmplt>
 8012c38:	b120      	cbz	r0, 8012c44 <__ieee754_sqrt+0x1a0>
 8012c3a:	1ca0      	adds	r0, r4, #2
 8012c3c:	bf08      	it	eq
 8012c3e:	3501      	addeq	r5, #1
 8012c40:	3402      	adds	r4, #2
 8012c42:	e7ca      	b.n	8012bda <__ieee754_sqrt+0x136>
 8012c44:	3401      	adds	r4, #1
 8012c46:	f024 0401 	bic.w	r4, r4, #1
 8012c4a:	e7c6      	b.n	8012bda <__ieee754_sqrt+0x136>
 8012c4c:	7ff00000 	.word	0x7ff00000
 8012c50:	20000370 	.word	0x20000370
 8012c54:	20000378 	.word	0x20000378

08012c58 <_init>:
 8012c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c5a:	bf00      	nop
 8012c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c5e:	bc08      	pop	{r3}
 8012c60:	469e      	mov	lr, r3
 8012c62:	4770      	bx	lr

08012c64 <_fini>:
 8012c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c66:	bf00      	nop
 8012c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c6a:	bc08      	pop	{r3}
 8012c6c:	469e      	mov	lr, r3
 8012c6e:	4770      	bx	lr
