
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa4  08003fa4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003fb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003fb8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002091  00000000  00000000  0002f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00031fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e79  00000000  00000000  00032af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff44  00000000  00000000  00058971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6c78  00000000  00000000  000688b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f52d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  0014f580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f0c 	.word	0x08003f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f0c 	.word	0x08003f0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a24      	ldr	r2, [pc, #144]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a18      	ldr	r2, [pc, #96]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 ff0f 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000554:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xc8>)
 8000566:	f000 fd57 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800056a:	2320      	movs	r3, #32
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fd48 	bl	8001018 <HAL_GPIO_Init>

}
 8000588:	bf00      	nop
 800058a:	3728      	adds	r7, #40	; 0x28
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	48000800 	.word	0x48000800

08000598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_I2C1_Init+0x74>)
 800059e:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <MX_I2C1_Init+0x78>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_I2C1_Init+0x74>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <MX_I2C1_Init+0x7c>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_I2C1_Init+0x74>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d2:	480e      	ldr	r0, [pc, #56]	; (800060c <MX_I2C1_Init+0x74>)
 80005d4:	f000 fee2 	bl	800139c <HAL_I2C_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005de:	f000 fa7a 	bl	8000ad6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <MX_I2C1_Init+0x74>)
 80005e6:	f001 fb63 	bl	8001cb0 <HAL_I2CEx_ConfigAnalogFilter>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 fa71 	bl	8000ad6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_I2C1_Init+0x74>)
 80005f8:	f001 fba5 	bl	8001d46 <HAL_I2CEx_ConfigDigitalFilter>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000602:	f000 fa68 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028
 8000610:	40005400 	.word	0x40005400
 8000614:	10909cec 	.word	0x10909cec

08000618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0ac      	sub	sp, #176	; 0xb0
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2288      	movs	r2, #136	; 0x88
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fc5f 	bl	8003efc <memset>
  if(i2cHandle->Instance==I2C1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <HAL_I2C_MspInit+0xb0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d13b      	bne.n	80006c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000648:	2340      	movs	r3, #64	; 0x40
 800064a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800064c:	2300      	movs	r3, #0
 800064e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fa27 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000660:	f000 fa39 	bl	8000ad6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_I2C_MspInit+0xb4>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	4a18      	ldr	r2, [pc, #96]	; (80006cc <HAL_I2C_MspInit+0xb4>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <HAL_I2C_MspInit+0xb4>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800067c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000684:	2312      	movs	r3, #18
 8000686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000696:	2304      	movs	r3, #4
 8000698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <HAL_I2C_MspInit+0xb8>)
 80006a4:	f000 fcb8 	bl	8001018 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_I2C_MspInit+0xb4>)
 80006aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_I2C_MspInit+0xb4>)
 80006ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b2:	6593      	str	r3, [r2, #88]	; 0x58
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_I2C_MspInit+0xb4>)
 80006b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006c0:	bf00      	nop
 80006c2:	37b0      	adds	r7, #176	; 0xb0
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40005400 	.word	0x40005400
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f043 030c 	orr.w	r3, r3, #12
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	f043 0320 	orr.w	r3, r3, #32
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000700:	f107 0118 	add.w	r1, r7, #24
 8000704:	230a      	movs	r3, #10
 8000706:	2202      	movs	r2, #2
 8000708:	486c      	ldr	r0, [pc, #432]	; (80008bc <lcd_init+0x1e8>)
 800070a:	f002 fed7 	bl	80034bc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800070e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000712:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000714:	f107 0114 	add.w	r1, r7, #20
 8000718:	230a      	movs	r3, #10
 800071a:	2202      	movs	r2, #2
 800071c:	4867      	ldr	r0, [pc, #412]	; (80008bc <lcd_init+0x1e8>)
 800071e:	f002 fecd 	bl	80034bc <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	2205      	movs	r2, #5
 8000726:	217c      	movs	r1, #124	; 0x7c
 8000728:	69f8      	ldr	r0, [r7, #28]
 800072a:	f000 ffbb 	bl	80016a4 <HAL_I2C_IsDeviceReady>
 800072e:	4603      	mov	r3, r0
 8000730:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8000732:	f107 0113 	add.w	r1, r7, #19
 8000736:	230a      	movs	r3, #10
 8000738:	2201      	movs	r2, #1
 800073a:	4860      	ldr	r0, [pc, #384]	; (80008bc <lcd_init+0x1e8>)
 800073c:	f002 febe 	bl	80034bc <HAL_UART_Transmit>
	HAL_Delay(50);
 8000740:	2032      	movs	r0, #50	; 0x32
 8000742:	f000 fb5f 	bl	8000e04 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000746:	f107 0218 	add.w	r2, r7, #24
 800074a:	f241 3388 	movw	r3, #5000	; 0x1388
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	217c      	movs	r1, #124	; 0x7c
 8000754:	69f8      	ldr	r0, [r7, #28]
 8000756:	f000 feb1 	bl	80014bc <HAL_I2C_Master_Transmit>
 800075a:	4603      	mov	r3, r0
 800075c:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800075e:	f107 0112 	add.w	r1, r7, #18
 8000762:	230a      	movs	r3, #10
 8000764:	2201      	movs	r2, #1
 8000766:	4855      	ldr	r0, [pc, #340]	; (80008bc <lcd_init+0x1e8>)
 8000768:	f002 fea8 	bl	80034bc <HAL_UART_Transmit>
	HAL_Delay(50);
 800076c:	2032      	movs	r0, #50	; 0x32
 800076e:	f000 fb49 	bl	8000e04 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000772:	f107 0218 	add.w	r2, r7, #24
 8000776:	f241 3388 	movw	r3, #5000	; 0x1388
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2302      	movs	r3, #2
 800077e:	217c      	movs	r1, #124	; 0x7c
 8000780:	69f8      	ldr	r0, [r7, #28]
 8000782:	f000 fe9b 	bl	80014bc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000786:	2005      	movs	r0, #5
 8000788:	f000 fb3c 	bl	8000e04 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800078c:	f107 0218 	add.w	r2, r7, #24
 8000790:	f241 3388 	movw	r3, #5000	; 0x1388
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2302      	movs	r3, #2
 8000798:	217c      	movs	r1, #124	; 0x7c
 800079a:	69f8      	ldr	r0, [r7, #28]
 800079c:	f000 fe8e 	bl	80014bc <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2204      	movs	r2, #4
 80007a4:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	785b      	ldrb	r3, [r3, #1]
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80007b2:	f107 0218 	add.w	r2, r7, #24
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2302      	movs	r3, #2
 80007be:	217c      	movs	r1, #124	; 0x7c
 80007c0:	69f8      	ldr	r0, [r7, #28]
 80007c2:	f000 fe7b 	bl	80014bc <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80007c6:	2301      	movs	r3, #1
 80007c8:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80007ca:	f107 0218 	add.w	r2, r7, #24
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2302      	movs	r3, #2
 80007d6:	217c      	movs	r1, #124	; 0x7c
 80007d8:	69f8      	ldr	r0, [r7, #28]
 80007da:	f000 fe6f 	bl	80014bc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 fb10 	bl	8000e04 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2202      	movs	r2, #2
 80007e8:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80007f6:	f107 0218 	add.w	r2, r7, #24
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2302      	movs	r3, #2
 8000802:	217c      	movs	r1, #124	; 0x7c
 8000804:	69f8      	ldr	r0, [r7, #28]
 8000806:	f000 fe59 	bl	80014bc <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800080a:	2300      	movs	r3, #0
 800080c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000812:	f107 0210 	add.w	r2, r7, #16
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2302      	movs	r3, #2
 800081e:	21c4      	movs	r1, #196	; 0xc4
 8000820:	69f8      	ldr	r0, [r7, #28]
 8000822:	f000 fe4b 	bl	80014bc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000826:	2308      	movs	r3, #8
 8000828:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800082a:	23ff      	movs	r3, #255	; 0xff
 800082c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800082e:	f107 0210 	add.w	r2, r7, #16
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2302      	movs	r3, #2
 800083a:	21c4      	movs	r1, #196	; 0xc4
 800083c:	69f8      	ldr	r0, [r7, #28]
 800083e:	f000 fe3d 	bl	80014bc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000842:	2301      	movs	r3, #1
 8000844:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000846:	2320      	movs	r3, #32
 8000848:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800084a:	f107 0210 	add.w	r2, r7, #16
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2302      	movs	r3, #2
 8000856:	21c4      	movs	r1, #196	; 0xc4
 8000858:	69f8      	ldr	r0, [r7, #28]
 800085a:	f000 fe2f 	bl	80014bc <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800085e:	2304      	movs	r3, #4
 8000860:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000862:	23ff      	movs	r3, #255	; 0xff
 8000864:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000866:	f107 020c 	add.w	r2, r7, #12
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2302      	movs	r3, #2
 8000872:	21c4      	movs	r1, #196	; 0xc4
 8000874:	69f8      	ldr	r0, [r7, #28]
 8000876:	f000 fe21 	bl	80014bc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800087a:	2303      	movs	r3, #3
 800087c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800087e:	23ff      	movs	r3, #255	; 0xff
 8000880:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000882:	f107 020c 	add.w	r2, r7, #12
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2302      	movs	r3, #2
 800088e:	21c4      	movs	r1, #196	; 0xc4
 8000890:	69f8      	ldr	r0, [r7, #28]
 8000892:	f000 fe13 	bl	80014bc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000896:	2302      	movs	r3, #2
 8000898:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800089a:	23ff      	movs	r3, #255	; 0xff
 800089c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800089e:	f107 020c 	add.w	r2, r7, #12
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2302      	movs	r3, #2
 80008aa:	21c4      	movs	r1, #196	; 0xc4
 80008ac:	69f8      	ldr	r0, [r7, #28]
 80008ae:	f000 fe05 	bl	80014bc <HAL_I2C_Master_Transmit>


}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000080 	.word	0x20000080

080008c0 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <clearlcd+0x2c>)
 80008ca:	f000 f83c 	bl	8000946 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <clearlcd+0x30>)
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <clearlcd+0x2c>)
 80008d2:	f000 f80f 	bl	80008f4 <lcd_print>
	lcd_position(&hi2c1,0,1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <clearlcd+0x2c>)
 80008dc:	f000 f833 	bl	8000946 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80008e0:	4903      	ldr	r1, [pc, #12]	; (80008f0 <clearlcd+0x30>)
 80008e2:	4802      	ldr	r0, [pc, #8]	; (80008ec <clearlcd+0x2c>)
 80008e4:	f000 f806 	bl	80008f4 <lcd_print>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000028 	.word	0x20000028
 80008f0:	08003f24 	.word	0x08003f24

080008f4 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800090a:	e011      	b.n	8000930 <lcd_print+0x3c>
    {
            data[1] = str[i];
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000916:	f107 020c 	add.w	r2, r7, #12
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2302      	movs	r3, #2
 8000922:	217c      	movs	r1, #124	; 0x7c
 8000924:	6938      	ldr	r0, [r7, #16]
 8000926:	f000 fdc9 	bl	80014bc <HAL_I2C_Master_Transmit>
            i++;
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1e7      	bne.n	800090c <lcd_print+0x18>
   }
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af02      	add	r7, sp, #8
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
 8000952:	4613      	mov	r3, r2
 8000954:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800095a:	78bb      	ldrb	r3, [r7, #2]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <lcd_position+0x24>
    {
        col = col | 0x80;
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000966:	70fb      	strb	r3, [r7, #3]
 8000968:	e003      	b.n	8000972 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000970:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800097a:	f107 0208 	add.w	r2, r7, #8
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2302      	movs	r3, #2
 8000986:	217c      	movs	r1, #124	; 0x7c
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f000 fd97 	bl	80014bc <HAL_I2C_Master_Transmit>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 f9b6 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f848 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f7ff fd92 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a8:	f000 f8fa 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009ac:	f7ff fdf4 	bl	8000598 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(&hi2c1,&lcd_struct);
 80009b0:	491b      	ldr	r1, [pc, #108]	; (8000a20 <main+0x88>)
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <main+0x8c>)
 80009b4:	f7ff fe8e 	bl	80006d4 <lcd_init>
  lcd_position(&hi2c1,0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	4819      	ldr	r0, [pc, #100]	; (8000a24 <main+0x8c>)
 80009be:	f7ff ffc2 	bl	8000946 <lcd_position>
  lcd_print(&hi2c1, "Temp = ");
 80009c2:	4919      	ldr	r1, [pc, #100]	; (8000a28 <main+0x90>)
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0x8c>)
 80009c6:	f7ff ff95 	bl	80008f4 <lcd_print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2120      	movs	r1, #32
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 fccb 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f000 fa13 	bl	8000e04 <HAL_Delay>
	  clearlcd();
 80009de:	f7ff ff6f 	bl	80008c0 <clearlcd>
	  lcd_position(&hi2c1,0, 1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2100      	movs	r1, #0
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <main+0x8c>)
 80009e8:	f7ff ffad 	bl	8000946 <lcd_position>
	  lcd_print(&hi2c1, "LED ON ");
 80009ec:	490f      	ldr	r1, [pc, #60]	; (8000a2c <main+0x94>)
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <main+0x8c>)
 80009f0:	f7ff ff80 	bl	80008f4 <lcd_print>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2120      	movs	r1, #32
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 fcb6 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a04:	f000 f9fe 	bl	8000e04 <HAL_Delay>
	  clearlcd();
 8000a08:	f7ff ff5a 	bl	80008c0 <clearlcd>
	  lcd_position(&hi2c1,0, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <main+0x8c>)
 8000a12:	f7ff ff98 	bl	8000946 <lcd_position>
	  lcd_print(&hi2c1, "LED OFF ");
 8000a16:	4906      	ldr	r1, [pc, #24]	; (8000a30 <main+0x98>)
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <main+0x8c>)
 8000a1a:	f7ff ff6b 	bl	80008f4 <lcd_print>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a1e:	e7d4      	b.n	80009ca <main+0x32>
 8000a20:	2000007c 	.word	0x2000007c
 8000a24:	20000028 	.word	0x20000028
 8000a28:	08003f38 	.word	0x08003f38
 8000a2c:	08003f40 	.word	0x08003f40
 8000a30:	08003f48 	.word	0x08003f48

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b096      	sub	sp, #88	; 0x58
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2244      	movs	r2, #68	; 0x44
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fa5a 	bl	8003efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5a:	f001 f9cf 	bl	8001dfc <HAL_PWREx_ControlVoltageScaling>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a64:	f000 f837 	bl	8000ad6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a72:	2310      	movs	r3, #16
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a82:	230a      	movs	r3, #10
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fa06 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aa2:	f000 f818 	bl	8000ad6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	2104      	movs	r1, #4
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fdce 	bl	8002660 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aca:	f000 f804 	bl	8000ad6 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3758      	adds	r7, #88	; 0x58
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ada:	b672      	cpsid	i
}
 8000adc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ade:	e7fe      	b.n	8000ade <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f926 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_USART2_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000be4:	f002 fc1c 	bl	8003420 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f7ff ff72 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000080 	.word	0x20000080
 8000bfc:	40004400 	.word	0x40004400

08000c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0ac      	sub	sp, #176	; 0xb0
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2288      	movs	r2, #136	; 0x88
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 f96b 	bl	8003efc <memset>
  if(uartHandle->Instance==USART2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <HAL_UART_MspInit+0xb0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d13b      	bne.n	8000ca8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 ff33 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c48:	f7ff ff45 	bl	8000ad6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c56:	6593      	str	r3, [r2, #88]	; 0x58
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c94:	2307      	movs	r3, #7
 8000c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f000 f9b8 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	37b0      	adds	r7, #176	; 0xb0
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ff5e 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 f8e5 	bl	8003eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fe55 	bl	8000998 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cfc:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 8000d00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d04:	20000108 	.word	0x20000108

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f944 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f80f 	bl	8000d4c <HAL_InitTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3a:	f7ff fed1 	bl	8000ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f941 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f919 	bl	8000fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000104 	.word	0x20000104

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000104 	.word	0x20000104

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff5c 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffb0 	bl	8000f6c <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e17f      	b.n	8001328 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8171 	beq.w	8001322 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d118      	bne.n	80010f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80ac 	beq.w	8001322 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6613      	str	r3, [r2, #96]	; 0x60
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_GPIO_Init+0x334>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x242>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x338>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x23e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x33c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x23a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x340>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x236>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x344>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x232>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x348>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x22e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x34c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x22a>
 800123e:	2306      	movs	r3, #6
 8001240:	e00c      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001242:	2307      	movs	r3, #7
 8001244:	e00a      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001246:	2305      	movs	r3, #5
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x244>
 800124a:	2304      	movs	r3, #4
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x244>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x244>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x244>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126c:	4937      	ldr	r1, [pc, #220]	; (800134c <HAL_GPIO_Init+0x334>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <HAL_GPIO_Init+0x350>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129e:	4a32      	ldr	r2, [pc, #200]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_GPIO_Init+0x350>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa22 f303 	lsr.w	r3, r2, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	f47f ae78 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	48001400 	.word	0x48001400
 8001364:	48001800 	.word	0x48001800
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e081      	b.n	80014b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff f928 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e006      	b.n	8001424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d104      	bne.n	8001436 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001434:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001448:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001458:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69d9      	ldr	r1, [r3, #28]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2220      	movs	r2, #32
 800149e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	461a      	mov	r2, r3
 80014c8:	460b      	mov	r3, r1
 80014ca:	817b      	strh	r3, [r7, #10]
 80014cc:	4613      	mov	r3, r2
 80014ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b20      	cmp	r3, #32
 80014da:	f040 80da 	bne.w	8001692 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_I2C_Master_Transmit+0x30>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e0d3      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1d8>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014f4:	f7ff fc7a 	bl	8000dec <HAL_GetTick>
 80014f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2319      	movs	r3, #25
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f9f7 	bl	80018fa <I2C_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0be      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2221      	movs	r2, #33	; 0x21
 800151a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2210      	movs	r2, #16
 8001522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	893a      	ldrh	r2, [r7, #8]
 8001536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	d90e      	bls.n	8001566 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	b2da      	uxtb	r2, r3
 8001554:	8979      	ldrh	r1, [r7, #10]
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_I2C_Master_Transmit+0x1e0>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 fb74 	bl	8001c4c <I2C_TransferConfig>
 8001564:	e06c      	b.n	8001640 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	b2da      	uxtb	r2, r3
 8001576:	8979      	ldrh	r1, [r7, #10]
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <HAL_I2C_Master_Transmit+0x1e0>)
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fb63 	bl	8001c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001586:	e05b      	b.n	8001640 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	6a39      	ldr	r1, [r7, #32]
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f9f4 	bl	800197a <I2C_WaitOnTXISFlagUntilTimeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e07b      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d034      	beq.n	8001640 <HAL_I2C_Master_Transmit+0x184>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d130      	bne.n	8001640 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f986 	bl	80018fa <I2C_WaitOnFlagUntilTimeout>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e04d      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d90e      	bls.n	8001620 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	22ff      	movs	r2, #255	; 0xff
 8001606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	b2da      	uxtb	r2, r3
 800160e:	8979      	ldrh	r1, [r7, #10]
 8001610:	2300      	movs	r3, #0
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fb17 	bl	8001c4c <I2C_TransferConfig>
 800161e:	e00f      	b.n	8001640 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	b2da      	uxtb	r2, r3
 8001630:	8979      	ldrh	r1, [r7, #10]
 8001632:	2300      	movs	r3, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fb06 	bl	8001c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d19e      	bne.n	8001588 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f9d3 	bl	80019fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e01a      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2220      	movs	r2, #32
 8001664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001672:	400b      	ands	r3, r1
 8001674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001692:	2302      	movs	r3, #2
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	80002000 	.word	0x80002000
 80016a0:	fe00e800 	.word	0xfe00e800

080016a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	460b      	mov	r3, r1
 80016b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	f040 80f1 	bne.w	80018a8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d4:	d101      	bne.n	80016da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	e0e7      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_I2C_IsDeviceReady+0x44>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e0e0      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_I2C_IsDeviceReady+0x72>
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800170c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001714:	e004      	b.n	8001720 <HAL_I2C_IsDeviceReady+0x7c>
 8001716:	897b      	ldrh	r3, [r7, #10]
 8001718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800171c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fb61 	bl	8000dec <HAL_GetTick>
 800172a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b20      	cmp	r3, #32
 8001738:	bf0c      	ite	eq
 800173a:	2301      	moveq	r3, #1
 800173c:	2300      	movne	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b10      	cmp	r3, #16
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001758:	e034      	b.n	80017c4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d01a      	beq.n	8001798 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001762:	f7ff fb43 	bl	8000dec <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d302      	bcc.n	8001778 <HAL_I2C_IsDeviceReady+0xd4>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10f      	bne.n	8001798 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f043 0220 	orr.w	r2, r3, #32
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e088      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_I2C_IsDeviceReady+0x12c>
 80017ca:	7fbb      	ldrb	r3, [r7, #30]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0c4      	beq.n	800175a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d01a      	beq.n	8001814 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f886 	bl	80018fa <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e058      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2220      	movs	r2, #32
 80017fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e04a      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	2120      	movs	r1, #32
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f86b 	bl	80018fa <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e03d      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2210      	movs	r2, #16
 8001834:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2220      	movs	r2, #32
 800183c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	d118      	bne.n	8001878 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001854:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	2120      	movs	r1, #32
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 f84a 	bl	80018fa <I2C_WaitOnFlagUntilTimeout>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e01c      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2220      	movs	r2, #32
 8001876:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	f63f af3b 	bhi.w	80016fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d103      	bne.n	80018d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	619a      	str	r2, [r3, #24]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4613      	mov	r3, r2
 8001908:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800190a:	e022      	b.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001912:	d01e      	beq.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001914:	f7ff fa6a 	bl	8000dec <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d302      	bcc.n	800192a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d113      	bne.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699a      	ldr	r2, [r3, #24]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4013      	ands	r3, r2
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	429a      	cmp	r2, r3
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	429a      	cmp	r2, r3
 800196e:	d0cd      	beq.n	800190c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001986:	e02c      	b.n	80019e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f871 	bl	8001a74 <I2C_IsErrorOccurred>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e02a      	b.n	80019f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a2:	d01e      	beq.n	80019e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a4:	f7ff fa22 	bl	8000dec <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d302      	bcc.n	80019ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d113      	bne.n	80019e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f043 0220 	orr.w	r2, r3, #32
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e007      	b.n	80019f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d1cb      	bne.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a06:	e028      	b.n	8001a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f831 	bl	8001a74 <I2C_IsErrorOccurred>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e026      	b.n	8001a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1c:	f7ff f9e6 	bl	8000dec <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d302      	bcc.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d113      	bne.n	8001a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f043 0220 	orr.w	r2, r3, #32
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e007      	b.n	8001a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d1cf      	bne.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d075      	beq.n	8001b8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aa8:	e056      	b.n	8001b58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d052      	beq.n	8001b58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff f99b 	bl	8000dec <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_IsErrorOccurred+0x54>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d147      	bne.n	8001b58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ada:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aea:	d12e      	bne.n	8001b4a <I2C_IsErrorOccurred+0xd6>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af2:	d02a      	beq.n	8001b4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d027      	beq.n	8001b4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b0a:	f7ff f96f 	bl	8000dec <HAL_GetTick>
 8001b0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b10:	e01b      	b.n	8001b4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b12:	f7ff f96b 	bl	8000dec <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b19      	cmp	r3, #25
 8001b1e:	d914      	bls.n	8001b4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d1dc      	bne.n	8001b12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	d003      	beq.n	8001b6e <I2C_IsErrorOccurred+0xfa>
 8001b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d09d      	beq.n	8001aaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f043 0308 	orr.w	r3, r3, #8
 8001bc6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01c      	beq.n	8001c3c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fe55 	bl	80018b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <I2C_IsErrorOccurred+0x1d4>)
 8001c14:	400b      	ands	r3, r1
 8001c16:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	fe00e800 	.word	0xfe00e800

08001c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c64:	7a7b      	ldrb	r3, [r7, #9]
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	0d5b      	lsrs	r3, r3, #21
 8001c86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <I2C_TransferConfig+0x60>)
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	ea02 0103 	and.w	r1, r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	03ff63ff 	.word	0x03ff63ff

08001cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d138      	bne.n	8001d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e032      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d139      	bne.n	8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e033      	b.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2224      	movs	r2, #36	; 0x24
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0a:	d130      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d038      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2232      	movs	r2, #50	; 0x32
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e40:	e002      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e54:	d102      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f2      	bne.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d110      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e00f      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d007      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e3ca      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b97      	ldr	r3, [pc, #604]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	4b94      	ldr	r3, [pc, #592]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80e4 	beq.w	80020a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4a>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	f040 808b 	bne.w	8002000 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f040 8087 	bne.w	8002000 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x62>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e3a2      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1a      	ldr	r2, [r3, #32]
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <HAL_RCC_OscConfig+0x7c>
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_OscConfig+0x88>
 8001f24:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d223      	bcs.n	8001f7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fd55 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e383      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f48:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	496d      	ldr	r1, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	4968      	ldr	r1, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
 8001f7a:	e025      	b.n	8001fc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4960      	ldr	r1, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	495b      	ldr	r1, [pc, #364]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fd15 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e343      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc8:	f000 fc4a 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	4950      	ldr	r1, [pc, #320]	; (800211c <HAL_RCC_OscConfig+0x274>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <HAL_RCC_OscConfig+0x278>)
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fe8:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fead 	bl	8000d4c <HAL_InitTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d052      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	e327      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d032      	beq.n	800206e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a42      	ldr	r2, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002014:	f7fe feea 	bl	8000dec <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201c:	f7fe fee6 	bl	8000dec <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e310      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a36      	ldr	r2, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4931      	ldr	r1, [pc, #196]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	492c      	ldr	r1, [pc, #176]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	e01a      	b.n	80020a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207a:	f7fe feb7 	bl	8000dec <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002082:	f7fe feb3 	bl	8000dec <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e2dd      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x1da>
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d074      	beq.n	800219a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x21a>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d10e      	bne.n	80020da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d064      	beq.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d160      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e2ba      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x24a>
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e026      	b.n	8002140 <HAL_RCC_OscConfig+0x298>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_OscConfig+0x280>
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a02      	ldr	r2, [pc, #8]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e014      	b.n	8002140 <HAL_RCC_OscConfig+0x298>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	08003f54 	.word	0x08003f54
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004
 8002128:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a9f      	ldr	r2, [pc, #636]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a9c      	ldr	r2, [pc, #624]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fe50 	bl	8000dec <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fe4c 	bl	8000dec <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e276      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4b92      	ldr	r3, [pc, #584]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2a8>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fe3c 	bl	8000dec <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fe38 	bl	8000dec <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e262      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d0>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d060      	beq.n	8002268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x310>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d116      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x328>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e23f      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4973      	ldr	r1, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	e040      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d023      	beq.n	8002236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fdf7 	bl	8000dec <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe fdf3 	bl	8000dec <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e21d      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	495f      	ldr	r1, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e018      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fdd3 	bl	8000dec <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fdcf 	bl	8000dec <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1f9      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fdae 	bl	8000dec <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe fdaa 	bl	8000dec <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1d4      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x3ec>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe fd91 	bl	8000dec <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe fd8d 	bl	8000dec <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1b7      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	; 0x58
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe fd54 	bl	8000dec <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe fd50 	bl	8000dec <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e17a      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d8>
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237e:	e029      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d115      	bne.n	80023b4 <HAL_RCC_OscConfig+0x50c>
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a03      	ldr	r2, [pc, #12]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	4b9c      	ldr	r3, [pc, #624]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a9b      	ldr	r2, [pc, #620]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c4:	4b98      	ldr	r3, [pc, #608]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a97      	ldr	r2, [pc, #604]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe fd06 	bl	8000dec <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe fd02 	bl	8000dec <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e12a      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	4b8b      	ldr	r3, [pc, #556]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ed      	beq.n	80023e4 <HAL_RCC_OscConfig+0x53c>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe fcef 	bl	8000dec <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fceb 	bl	8000dec <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e113      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ed      	bne.n	8002412 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a79      	ldr	r2, [pc, #484]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80fe 	beq.w	800264e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b02      	cmp	r3, #2
 8002458:	f040 80d0 	bne.w	80025fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800245c:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	429a      	cmp	r2, r3
 800246e:	d130      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	3b01      	subs	r3, #1
 800247c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d127      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d11f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800249c:	2a07      	cmp	r2, #7
 800249e:	bf14      	ite	ne
 80024a0:	2201      	movne	r2, #1
 80024a2:	2200      	moveq	r2, #0
 80024a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	3b01      	subs	r3, #1
 80024b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	085b      	lsrs	r3, r3, #1
 80024ca:	3b01      	subs	r3, #1
 80024cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d06e      	beq.n	80025b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	d069      	beq.n	80025ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0ad      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002500:	f7fe fc74 	bl	8000dec <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fc70 	bl	8000dec <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e09a      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002526:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_RCC_OscConfig+0x784>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002536:	3a01      	subs	r2, #1
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002540:	0212      	lsls	r2, r2, #8
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002548:	0852      	lsrs	r2, r2, #1
 800254a:	3a01      	subs	r2, #1
 800254c:	0552      	lsls	r2, r2, #21
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002554:	0852      	lsrs	r2, r2, #1
 8002556:	3a01      	subs	r2, #1
 8002558:	0652      	lsls	r2, r2, #25
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002560:	0912      	lsrs	r2, r2, #4
 8002562:	0452      	lsls	r2, r2, #17
 8002564:	430a      	orrs	r2, r1
 8002566:	4930      	ldr	r1, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002584:	f7fe fc32 	bl	8000dec <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fc2e 	bl	8000dec <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e058      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025aa:	e050      	b.n	800264e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e04f      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d148      	bne.n	800264e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d4:	f7fe fc0a 	bl	8000dec <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fc06 	bl	8000dec <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e030      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x734>
 80025fa:	e028      	b.n	800264e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d023      	beq.n	800264a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fbed 	bl	8000dec <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002614:	e00c      	b.n	8002630 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fbe9 	bl	8000dec <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d905      	bls.n	8002630 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e013      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
 8002628:	40021000 	.word	0x40021000
 800262c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_OscConfig+0x7b0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ec      	bne.n	8002616 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x7b0>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4905      	ldr	r1, [pc, #20]	; (8002658 <HAL_RCC_OscConfig+0x7b0>)
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x7b4>)
 8002644:	4013      	ands	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
 8002648:	e001      	b.n	800264e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	feeefffc 	.word	0xfeeefffc

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0e7      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4970      	ldr	r1, [pc, #448]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cf      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026bc:	429a      	cmp	r2, r3
 80026be:	d908      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4960      	ldr	r1, [pc, #384]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04c      	beq.n	8002778 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d121      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0a6      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4b54      	ldr	r3, [pc, #336]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d115      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e09a      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08e      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e086      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4943      	ldr	r1, [pc, #268]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7fe fb50 	bl	8000dec <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7fe fb4c 	bl	8000dec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e06e      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	429a      	cmp	r2, r3
 8002792:	d208      	bcs.n	80027a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	492b      	ldr	r1, [pc, #172]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d210      	bcs.n	80027d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 0207 	bic.w	r2, r3, #7
 80027bc:	4923      	ldr	r1, [pc, #140]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e036      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4918      	ldr	r1, [pc, #96]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4910      	ldr	r1, [pc, #64]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002814:	f000 f824 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	490b      	ldr	r1, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1f4>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1fc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fa87 	bl	8000d4c <HAL_InitTick>
 800283e:	4603      	mov	r3, r0
 8002840:	72fb      	strb	r3, [r7, #11]

  return status;
 8002842:	7afb      	ldrb	r3, [r7, #11]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40022000 	.word	0x40022000
 8002850:	40021000 	.word	0x40021000
 8002854:	08003f54 	.word	0x08003f54
 8002858:	20000000 	.word	0x20000000
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x34>
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d11e      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e005      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d102      	bne.n	80028de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_GetSysClockFreq+0x110>)
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	e004      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_RCC_GetSysClockFreq+0x114>)
 80028e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d134      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0xa6>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d003      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0xac>
 8002904:	e005      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_RCC_GetSysClockFreq+0x110>)
 8002908:	617b      	str	r3, [r7, #20]
      break;
 800290a:	e005      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_GetSysClockFreq+0x114>)
 800290e:	617b      	str	r3, [r7, #20]
      break;
 8002910:	e002      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	617b      	str	r3, [r7, #20]
      break;
 8002916:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	3301      	adds	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0e5b      	lsrs	r3, r3, #25
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	3301      	adds	r3, #1
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002958:	69bb      	ldr	r3, [r7, #24]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	08003f6c 	.word	0x08003f6c
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08003f64 	.word	0x08003f64

080029bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c0:	f7ff ffda 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0adb      	lsrs	r3, r3, #11
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08003f64 	.word	0x08003f64

080029e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9ee 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
 8002a06:	e014      	b.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff f9de 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	d10b      	bne.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d919      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2ba0      	cmp	r3, #160	; 0xa0
 8002a44:	d902      	bls.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a46:	2302      	movs	r3, #2
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e013      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e010      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d902      	bls.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a58:	2303      	movs	r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e00a      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d102      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e004      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d101      	bne.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 0207 	bic.w	r2, r3, #7
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d041      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002acc:	d02a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a85      	ldr	r2, [pc, #532]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af8:	e015      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fabb 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b0a:	e00c      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3320      	adds	r3, #32
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fba6 	bl	8003264 <RCCEx_PLLSAI2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	74fb      	strb	r3, [r7, #19]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3a:	4973      	ldr	r1, [pc, #460]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d041      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b5c:	d02a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b62:	d824      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6e:	d81e      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d010      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	e018      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b88:	e015      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa73 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b9a:	e00c      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3320      	adds	r3, #32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fb5e 	bl	8003264 <RCCEx_PLLSAI2_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bac:	e003      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bbc:	4b52      	ldr	r3, [pc, #328]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bca:	494f      	ldr	r1, [pc, #316]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bd2:	e001      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a0 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3a      	ldr	r2, [pc, #232]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c28:	f7fe f8e0 	bl	8000dec <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c2e:	e009      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fe f8dc 	bl	8000dec <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	74fb      	strb	r3, [r7, #19]
        break;
 8002c42:	e005      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ef      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d15c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f89b 	bl	8000dec <HAL_GetTick>
 8002cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe f897 	bl	8000dec <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	74fb      	strb	r3, [r7, #19]
            break;
 8002cd0:	e006      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ec      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cfe:	e009      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7c7b      	ldrb	r3, [r7, #17]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b9e      	ldr	r3, [pc, #632]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a9d      	ldr	r2, [pc, #628]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d32:	4b98      	ldr	r3, [pc, #608]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	4994      	ldr	r1, [pc, #592]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d54:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 020c 	bic.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	498c      	ldr	r1, [pc, #560]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d76:	4b87      	ldr	r3, [pc, #540]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4983      	ldr	r1, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d98:	4b7e      	ldr	r3, [pc, #504]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	497b      	ldr	r1, [pc, #492]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	4972      	ldr	r1, [pc, #456]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ddc:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	496a      	ldr	r1, [pc, #424]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e20:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	4959      	ldr	r1, [pc, #356]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	4950      	ldr	r1, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	4948      	ldr	r1, [pc, #288]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	493f      	ldr	r1, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	4937      	ldr	r1, [pc, #220]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e011      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f8c8 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d028      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	491f      	ldr	r1, [pc, #124]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f30:	60d3      	str	r3, [r2, #12]
 8002f32:	e011      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f899 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f82:	d109      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
 8002f90:	e014      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f867 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02f      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	4928      	ldr	r1, [pc, #160]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f844 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
 8003002:	e011      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3320      	adds	r3, #32
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f925 	bl	8003264 <RCCEx_PLLSAI2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003066:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800306e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0203 	and.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
       ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ae:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
       ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d047      	beq.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e044      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d018      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x86>
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d825      	bhi.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <RCCEx_PLLSAI1_Config+0x62>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d009      	beq.n	80030f0 <RCCEx_PLLSAI1_Config+0x74>
 80030dc:	e020      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11d      	bne.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e01a      	b.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f0:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e013      	b.n	800312a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003102:	4b57      	ldr	r3, [pc, #348]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310e:	4b54      	ldr	r3, [pc, #336]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311e:	e006      	b.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e004      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	430b      	orrs	r3, r1
 800314c:	4944      	ldr	r1, [pc, #272]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d17d      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd fe42 	bl	8000dec <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fd fe3e 	bl	8000dec <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003180:	4b37      	ldr	r3, [pc, #220]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d160      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b31      	ldr	r3, [pc, #196]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	0211      	lsls	r1, r2, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	0912      	lsrs	r2, r2, #4
 80031b0:	0452      	lsls	r2, r2, #17
 80031b2:	430a      	orrs	r2, r1
 80031b4:	492a      	ldr	r1, [pc, #168]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	610b      	str	r3, [r1, #16]
 80031ba:	e027      	b.n	800320c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d112      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	0211      	lsls	r1, r2, #8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6912      	ldr	r2, [r2, #16]
 80031d8:	0852      	lsrs	r2, r2, #1
 80031da:	3a01      	subs	r2, #1
 80031dc:	0552      	lsls	r2, r2, #21
 80031de:	430a      	orrs	r2, r1
 80031e0:	491f      	ldr	r1, [pc, #124]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]
 80031e6:	e011      	b.n	800320c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6892      	ldr	r2, [r2, #8]
 80031f8:	0211      	lsls	r1, r2, #8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6952      	ldr	r2, [r2, #20]
 80031fe:	0852      	lsrs	r2, r2, #1
 8003200:	3a01      	subs	r2, #1
 8003202:	0652      	lsls	r2, r2, #25
 8003204:	430a      	orrs	r2, r1
 8003206:	4916      	ldr	r1, [pc, #88]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a13      	ldr	r2, [pc, #76]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003216:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fd fde8 	bl	8000dec <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800321e:	e009      	b.n	8003234 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003220:	f7fd fde4 	bl	8000dec <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d902      	bls.n	8003234 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	73fb      	strb	r3, [r7, #15]
          break;
 8003232:	e005      	b.n	8003240 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000

08003264 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0203 	and.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d10d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
       ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
       ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d047      	beq.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	e044      	b.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d018      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0x86>
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d825      	bhi.n	8003308 <RCCEx_PLLSAI2_Config+0xa4>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <RCCEx_PLLSAI2_Config+0x62>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d009      	beq.n	80032d8 <RCCEx_PLLSAI2_Config+0x74>
 80032c4:	e020      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11d      	bne.n	800330e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d6:	e01a      	b.n	800330e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e013      	b.n	8003312 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ea:	4b4c      	ldr	r3, [pc, #304]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003306:	e006      	b.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e004      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003316:	bf00      	nop
    }

    if(status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	430b      	orrs	r3, r1
 8003334:	4939      	ldr	r1, [pc, #228]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d167      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a35      	ldr	r2, [pc, #212]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fd fd4e 	bl	8000dec <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003352:	e009      	b.n	8003368 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003354:	f7fd fd4a 	bl	8000dec <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	73fb      	strb	r3, [r7, #15]
        break;
 8003366:	e005      	b.n	8003374 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003368:	4b2c      	ldr	r3, [pc, #176]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ef      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d14a      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	0211      	lsls	r1, r2, #8
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	0912      	lsrs	r2, r2, #4
 8003398:	0452      	lsls	r2, r2, #17
 800339a:	430a      	orrs	r2, r1
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	614b      	str	r3, [r1, #20]
 80033a2:	e011      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	0211      	lsls	r1, r2, #8
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6912      	ldr	r2, [r2, #16]
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	0652      	lsls	r2, r2, #25
 80033c0:	430a      	orrs	r2, r1
 80033c2:	4916      	ldr	r1, [pc, #88]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fd fd0a 	bl	8000dec <HAL_GetTick>
 80033d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033da:	e009      	b.n	80033f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033dc:	f7fd fd06 	bl	8000dec <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d902      	bls.n	80033f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	73fb      	strb	r3, [r7, #15]
          break;
 80033ee:	e005      	b.n	80033fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000

08003420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e040      	b.n	80034b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fbdc 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8c0 	bl	80035e4 <UART_SetConfig>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e022      	b.n	80034b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fb6c 	bl	8003b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800348a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800349a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fbf3 	bl	8003c98 <UART_CheckIdleState>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	f040 8082 	bne.w	80035da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_Transmit+0x26>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07a      	b.n	80035dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Transmit+0x38>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e073      	b.n	80035dc <HAL_UART_Transmit+0x120>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2221      	movs	r2, #33	; 0x21
 8003508:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800350a:	f7fd fc6f 	bl	8000dec <HAL_GetTick>
 800350e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003528:	d108      	bne.n	800353c <HAL_UART_Transmit+0x80>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e003      	b.n	8003544 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800354c:	e02d      	b.n	80035aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fbe6 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e039      	b.n	80035dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	881a      	ldrh	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800357a:	b292      	uxth	r2, r2
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3302      	adds	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e008      	b.n	8003598 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b292      	uxth	r2, r2
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1cb      	bne.n	800354e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fbb2 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e005      	b.n	80035dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e8:	b08a      	sub	sp, #40	; 0x28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4313      	orrs	r3, r2
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4ba4      	ldr	r3, [pc, #656]	; (80038a4 <UART_SetConfig+0x2c0>)
 8003614:	4013      	ands	r3, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a99      	ldr	r2, [pc, #612]	; (80038a8 <UART_SetConfig+0x2c4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	4313      	orrs	r3, r2
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a90      	ldr	r2, [pc, #576]	; (80038ac <UART_SetConfig+0x2c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d126      	bne.n	80036bc <UART_SetConfig+0xd8>
 800366e:	4b90      	ldr	r3, [pc, #576]	; (80038b0 <UART_SetConfig+0x2cc>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d81b      	bhi.n	80036b4 <UART_SetConfig+0xd0>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <UART_SetConfig+0xa0>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036a5 	.word	0x080036a5
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036ad 	.word	0x080036ad
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e116      	b.n	80038ca <UART_SetConfig+0x2e6>
 800369c:	2302      	movs	r3, #2
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e112      	b.n	80038ca <UART_SetConfig+0x2e6>
 80036a4:	2304      	movs	r3, #4
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e10e      	b.n	80038ca <UART_SetConfig+0x2e6>
 80036ac:	2308      	movs	r3, #8
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e10a      	b.n	80038ca <UART_SetConfig+0x2e6>
 80036b4:	2310      	movs	r3, #16
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e106      	b.n	80038ca <UART_SetConfig+0x2e6>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a7c      	ldr	r2, [pc, #496]	; (80038b4 <UART_SetConfig+0x2d0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d138      	bne.n	8003738 <UART_SetConfig+0x154>
 80036c6:	4b7a      	ldr	r3, [pc, #488]	; (80038b0 <UART_SetConfig+0x2cc>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d82d      	bhi.n	8003730 <UART_SetConfig+0x14c>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <UART_SetConfig+0xf8>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003731 	.word	0x08003731
 80036e4:	08003731 	.word	0x08003731
 80036e8:	08003731 	.word	0x08003731
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003731 	.word	0x08003731
 80036f4:	08003731 	.word	0x08003731
 80036f8:	08003731 	.word	0x08003731
 80036fc:	08003719 	.word	0x08003719
 8003700:	08003731 	.word	0x08003731
 8003704:	08003731 	.word	0x08003731
 8003708:	08003731 	.word	0x08003731
 800370c:	08003729 	.word	0x08003729
 8003710:	2300      	movs	r3, #0
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e0d8      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003718:	2302      	movs	r3, #2
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e0d4      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003720:	2304      	movs	r3, #4
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e0d0      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003728:	2308      	movs	r3, #8
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	e0cc      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003730:	2310      	movs	r3, #16
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003736:	e0c8      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5e      	ldr	r2, [pc, #376]	; (80038b8 <UART_SetConfig+0x2d4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d125      	bne.n	800378e <UART_SetConfig+0x1aa>
 8003742:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <UART_SetConfig+0x2cc>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d016      	beq.n	800377e <UART_SetConfig+0x19a>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d818      	bhi.n	8003786 <UART_SetConfig+0x1a2>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d00a      	beq.n	800376e <UART_SetConfig+0x18a>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d814      	bhi.n	8003786 <UART_SetConfig+0x1a2>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <UART_SetConfig+0x182>
 8003760:	2b10      	cmp	r3, #16
 8003762:	d008      	beq.n	8003776 <UART_SetConfig+0x192>
 8003764:	e00f      	b.n	8003786 <UART_SetConfig+0x1a2>
 8003766:	2300      	movs	r3, #0
 8003768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376c:	e0ad      	b.n	80038ca <UART_SetConfig+0x2e6>
 800376e:	2302      	movs	r3, #2
 8003770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003774:	e0a9      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003776:	2304      	movs	r3, #4
 8003778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377c:	e0a5      	b.n	80038ca <UART_SetConfig+0x2e6>
 800377e:	2308      	movs	r3, #8
 8003780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003784:	e0a1      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003786:	2310      	movs	r3, #16
 8003788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378c:	e09d      	b.n	80038ca <UART_SetConfig+0x2e6>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <UART_SetConfig+0x2d8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d125      	bne.n	80037e4 <UART_SetConfig+0x200>
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <UART_SetConfig+0x2cc>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037a2:	2bc0      	cmp	r3, #192	; 0xc0
 80037a4:	d016      	beq.n	80037d4 <UART_SetConfig+0x1f0>
 80037a6:	2bc0      	cmp	r3, #192	; 0xc0
 80037a8:	d818      	bhi.n	80037dc <UART_SetConfig+0x1f8>
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d00a      	beq.n	80037c4 <UART_SetConfig+0x1e0>
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d814      	bhi.n	80037dc <UART_SetConfig+0x1f8>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <UART_SetConfig+0x1d8>
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d008      	beq.n	80037cc <UART_SetConfig+0x1e8>
 80037ba:	e00f      	b.n	80037dc <UART_SetConfig+0x1f8>
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e082      	b.n	80038ca <UART_SetConfig+0x2e6>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e07e      	b.n	80038ca <UART_SetConfig+0x2e6>
 80037cc:	2304      	movs	r3, #4
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e07a      	b.n	80038ca <UART_SetConfig+0x2e6>
 80037d4:	2308      	movs	r3, #8
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e076      	b.n	80038ca <UART_SetConfig+0x2e6>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e072      	b.n	80038ca <UART_SetConfig+0x2e6>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a35      	ldr	r2, [pc, #212]	; (80038c0 <UART_SetConfig+0x2dc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d12a      	bne.n	8003844 <UART_SetConfig+0x260>
 80037ee:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <UART_SetConfig+0x2cc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fc:	d01a      	beq.n	8003834 <UART_SetConfig+0x250>
 80037fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003802:	d81b      	bhi.n	800383c <UART_SetConfig+0x258>
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d00c      	beq.n	8003824 <UART_SetConfig+0x240>
 800380a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380e:	d815      	bhi.n	800383c <UART_SetConfig+0x258>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <UART_SetConfig+0x238>
 8003814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003818:	d008      	beq.n	800382c <UART_SetConfig+0x248>
 800381a:	e00f      	b.n	800383c <UART_SetConfig+0x258>
 800381c:	2300      	movs	r3, #0
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e052      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003824:	2302      	movs	r3, #2
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e04e      	b.n	80038ca <UART_SetConfig+0x2e6>
 800382c:	2304      	movs	r3, #4
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e04a      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003834:	2308      	movs	r3, #8
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e046      	b.n	80038ca <UART_SetConfig+0x2e6>
 800383c:	2310      	movs	r3, #16
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e042      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <UART_SetConfig+0x2c4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d13a      	bne.n	80038c4 <UART_SetConfig+0x2e0>
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <UART_SetConfig+0x2cc>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800385c:	d01a      	beq.n	8003894 <UART_SetConfig+0x2b0>
 800385e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003862:	d81b      	bhi.n	800389c <UART_SetConfig+0x2b8>
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003868:	d00c      	beq.n	8003884 <UART_SetConfig+0x2a0>
 800386a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386e:	d815      	bhi.n	800389c <UART_SetConfig+0x2b8>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <UART_SetConfig+0x298>
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d008      	beq.n	800388c <UART_SetConfig+0x2a8>
 800387a:	e00f      	b.n	800389c <UART_SetConfig+0x2b8>
 800387c:	2300      	movs	r3, #0
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e022      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003884:	2302      	movs	r3, #2
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e01e      	b.n	80038ca <UART_SetConfig+0x2e6>
 800388c:	2304      	movs	r3, #4
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003892:	e01a      	b.n	80038ca <UART_SetConfig+0x2e6>
 8003894:	2308      	movs	r3, #8
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389a:	e016      	b.n	80038ca <UART_SetConfig+0x2e6>
 800389c:	2310      	movs	r3, #16
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a2:	e012      	b.n	80038ca <UART_SetConfig+0x2e6>
 80038a4:	efff69f3 	.word	0xefff69f3
 80038a8:	40008000 	.word	0x40008000
 80038ac:	40013800 	.word	0x40013800
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40004400 	.word	0x40004400
 80038b8:	40004800 	.word	0x40004800
 80038bc:	40004c00 	.word	0x40004c00
 80038c0:	40005000 	.word	0x40005000
 80038c4:	2310      	movs	r3, #16
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a9f      	ldr	r2, [pc, #636]	; (8003b4c <UART_SetConfig+0x568>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d17a      	bne.n	80039ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d824      	bhi.n	8003926 <UART_SetConfig+0x342>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <UART_SetConfig+0x300>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003909 	.word	0x08003909
 80038e8:	08003927 	.word	0x08003927
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003917 	.word	0x08003917
 80038f8:	08003927 	.word	0x08003927
 80038fc:	08003927 	.word	0x08003927
 8003900:	08003927 	.word	0x08003927
 8003904:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003908:	f7ff f842 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800390c:	61f8      	str	r0, [r7, #28]
        break;
 800390e:	e010      	b.n	8003932 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b8f      	ldr	r3, [pc, #572]	; (8003b50 <UART_SetConfig+0x56c>)
 8003912:	61fb      	str	r3, [r7, #28]
        break;
 8003914:	e00d      	b.n	8003932 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7fe ffa3 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800391a:	61f8      	str	r0, [r7, #28]
        break;
 800391c:	e009      	b.n	8003932 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	61fb      	str	r3, [r7, #28]
        break;
 8003924:	e005      	b.n	8003932 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80fb 	beq.w	8003b30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	429a      	cmp	r2, r3
 8003948:	d305      	bcc.n	8003956 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	429a      	cmp	r2, r3
 8003954:	d903      	bls.n	800395e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800395c:	e0e8      	b.n	8003b30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2200      	movs	r2, #0
 8003962:	461c      	mov	r4, r3
 8003964:	4615      	mov	r5, r2
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	022b      	lsls	r3, r5, #8
 8003970:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003974:	0222      	lsls	r2, r4, #8
 8003976:	68f9      	ldr	r1, [r7, #12]
 8003978:	6849      	ldr	r1, [r1, #4]
 800397a:	0849      	lsrs	r1, r1, #1
 800397c:	2000      	movs	r0, #0
 800397e:	4688      	mov	r8, r1
 8003980:	4681      	mov	r9, r0
 8003982:	eb12 0a08 	adds.w	sl, r2, r8
 8003986:	eb43 0b09 	adc.w	fp, r3, r9
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003998:	4650      	mov	r0, sl
 800399a:	4659      	mov	r1, fp
 800399c:	f7fc fc14 	bl	80001c8 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ae:	d308      	bcc.n	80039c2 <UART_SetConfig+0x3de>
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b6:	d204      	bcs.n	80039c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	e0b6      	b.n	8003b30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039c8:	e0b2      	b.n	8003b30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	d15e      	bne.n	8003a92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d828      	bhi.n	8003a2e <UART_SetConfig+0x44a>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0x400>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2f 	.word	0x08003a2f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a2f 	.word	0x08003a2f
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a27 	.word	0x08003a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7fe ffc2 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	61f8      	str	r0, [r7, #28]
        break;
 8003a0e:	e014      	b.n	8003a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7fe ffd4 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8003a14:	61f8      	str	r0, [r7, #28]
        break;
 8003a16:	e010      	b.n	8003a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b4d      	ldr	r3, [pc, #308]	; (8003b50 <UART_SetConfig+0x56c>)
 8003a1a:	61fb      	str	r3, [r7, #28]
        break;
 8003a1c:	e00d      	b.n	8003a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7fe ff1f 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8003a22:	61f8      	str	r0, [r7, #28]
        break;
 8003a24:	e009      	b.n	8003a3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	61fb      	str	r3, [r7, #28]
        break;
 8003a2c:	e005      	b.n	8003a3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d077      	beq.n	8003b30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005a      	lsls	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	441a      	add	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d916      	bls.n	8003a8a <UART_SetConfig+0x4a6>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d212      	bcs.n	8003a8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f023 030f 	bic.w	r3, r3, #15
 8003a6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	8afb      	ldrh	r3, [r7, #22]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	8afa      	ldrh	r2, [r7, #22]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	e052      	b.n	8003b30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a90:	e04e      	b.n	8003b30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d827      	bhi.n	8003aea <UART_SetConfig+0x506>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x4bc>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ac5 	.word	0x08003ac5
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003ad5 	.word	0x08003ad5
 8003aac:	08003aeb 	.word	0x08003aeb
 8003ab0:	08003adb 	.word	0x08003adb
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003aeb 	.word	0x08003aeb
 8003abc:	08003aeb 	.word	0x08003aeb
 8003ac0:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f7fe ff64 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003ac8:	61f8      	str	r0, [r7, #28]
        break;
 8003aca:	e014      	b.n	8003af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003acc:	f7fe ff76 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8003ad0:	61f8      	str	r0, [r7, #28]
        break;
 8003ad2:	e010      	b.n	8003af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <UART_SetConfig+0x56c>)
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e00d      	b.n	8003af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe fec1 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
        break;
 8003ae0:	e009      	b.n	8003af6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e005      	b.n	8003af6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af4:	bf00      	nop
    }

    if (pclk != 0U)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d019      	beq.n	8003b30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	085a      	lsrs	r2, r3, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	441a      	add	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d909      	bls.n	8003b2a <UART_SetConfig+0x546>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d205      	bcs.n	8003b2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	e002      	b.n	8003b30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3728      	adds	r7, #40	; 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40008000 	.word	0x40008000
 8003b50:	00f42400 	.word	0x00f42400

08003b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d10a      	bne.n	8003c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca8:	f7fd f8a0 	bl	8000dec <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10e      	bne.n	8003cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f82d 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e023      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d10e      	bne.n	8003d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f817 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00d      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b09c      	sub	sp, #112	; 0x70
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	e0a5      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	f000 80a1 	beq.w	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd f851 	bl	8000dec <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d13e      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d70:	667b      	str	r3, [r7, #100]	; 0x64
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e067      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d04f      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df6:	d147      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	613b      	str	r3, [r7, #16]
   return(result);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e54:	623a      	str	r2, [r7, #32]
 8003e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e010      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f43f af4a 	beq.w	8003d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3770      	adds	r7, #112	; 0x70
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <__libc_init_array>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4d0d      	ldr	r5, [pc, #52]	; (8003eec <__libc_init_array+0x38>)
 8003eb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ef0 <__libc_init_array+0x3c>)
 8003eba:	1b64      	subs	r4, r4, r5
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	42a6      	cmp	r6, r4
 8003ec2:	d109      	bne.n	8003ed8 <__libc_init_array+0x24>
 8003ec4:	4d0b      	ldr	r5, [pc, #44]	; (8003ef4 <__libc_init_array+0x40>)
 8003ec6:	4c0c      	ldr	r4, [pc, #48]	; (8003ef8 <__libc_init_array+0x44>)
 8003ec8:	f000 f820 	bl	8003f0c <_init>
 8003ecc:	1b64      	subs	r4, r4, r5
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	42a6      	cmp	r6, r4
 8003ed4:	d105      	bne.n	8003ee2 <__libc_init_array+0x2e>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003edc:	4798      	blx	r3
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__libc_init_array+0xc>
 8003ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee6:	4798      	blx	r3
 8003ee8:	3601      	adds	r6, #1
 8003eea:	e7f2      	b.n	8003ed2 <__libc_init_array+0x1e>
 8003eec:	08003fa4 	.word	0x08003fa4
 8003ef0:	08003fa4 	.word	0x08003fa4
 8003ef4:	08003fa4 	.word	0x08003fa4
 8003ef8:	08003fa8 	.word	0x08003fa8

08003efc <memset>:
 8003efc:	4402      	add	r2, r0
 8003efe:	4603      	mov	r3, r0
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d100      	bne.n	8003f06 <memset+0xa>
 8003f04:	4770      	bx	lr
 8003f06:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0a:	e7f9      	b.n	8003f00 <memset+0x4>

08003f0c <_init>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	bf00      	nop
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr

08003f18 <_fini>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr
